{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1537237437830},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1537237437830},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1537237437831},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1537237437831},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1537237437831},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1537237437842},{"_id":"source/_drafts/hello-world.md","hash":"4bcf3e8fa7a8900705e5e524e5ab00dedf292a05","modified":1537350518669},{"_id":"source/_posts/2018-2019技术书单.md","hash":"68078c1269a652846f8968ffa9ccba2dd6db4a52","modified":1537361316734},{"_id":"source/_posts/D3-js数据可视化实践（精简）.md","hash":"144e706326a134a0c3ab8a381efa2ceb7754edc6","modified":1537355949261},{"_id":"source/_posts/D3-js数据可视化实践（讲义）.md","hash":"de0e68ae3b698f5b612519665631ae006157b292","modified":1537354955296},{"_id":"source/_posts/HTTPS证书及Nginx配置相关.md","hash":"4fe551250c4f6f270a79d4d10f84a07557ef9d17","modified":1537354708454},{"_id":"source/_posts/Hbase基础知识点梳理.md","hash":"0c8cc815b18c00dd358720cd8334b8387e512ed2","modified":1537359489430},{"_id":"source/_posts/Hive2Hbase入库逻辑.md","hash":"515cf5458e2831aeaf07f36232eb2f28f46dd733","modified":1537359798346},{"_id":"source/_posts/Linux下离线安装node和npm.md","hash":"9d59e6ce067fe50dc96cb82f034b7247da019f50","modified":1537351242447},{"_id":"source/_posts/webcola介绍.md","hash":"fdb8930517b6b1e8354ec3671dd82b4684aa2078","modified":1537359651376},{"_id":"source/_posts/webpack中文文档摘要.md","hash":"2332f1bd0cfc9ebc17594823c7296395f4f978c7","modified":1537360142614},{"_id":"source/_posts/《D3-js-in-Action-Data-visualization-with-JavaScript-2nd-》部分章节摘要.md","hash":"9e6531854335a8272d48396e58a83b6da816fad7","modified":1537354835162},{"_id":"source/_posts/从接口调用安全考虑.md","hash":"f04225fb13bd0c7a7bc127fdb37c76d8ed45ec89","modified":1537351848653},{"_id":"source/_posts/利用travis自动化部署博客项目.md","hash":"d635b43151d5a39ac546cb3d3aed01de286e539f","modified":1537350498875},{"_id":"source/_posts/基于VUE-VUEX-ELEMENT-UI的项目结构.md","hash":"66c3f8ee8c7b14f50a0a4d338c87b4deb430451c","modified":1537350917087},{"_id":"source/_posts/常见的Web安全漏洞介绍及解决办法.md","hash":"0fb9fd877faedbcbdaca284312b8f66fd87d817c","modified":1537351727762},{"_id":"source/_posts/怎样更有竞争力.md","hash":"51d4375d6a8dfc029d7154ddb5f6117cc03186f7","modified":1537360816469},{"_id":"source/_posts/记一次crontab执行scp异常解决.md","hash":"d8ffba858c5cdca7b781677b6088ced29cc89342","modified":1540195191630},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1537237437831},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1537237437831},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1537237437832},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1537237437832},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1537237437832},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1537237437833},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1537237437833},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1537237437833},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1537237437833},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1537237437833},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1537237437834},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1537237437834},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1537237437840},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1537237437840},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1537237437840},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1537237437841},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1537237437841},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1537237437841},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1537237437841},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1537237437842},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1537237437834},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1537237437835},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1537237437835},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1537237437835},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1537237437835},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1537237437835},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1537237437836},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1537237437836},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1537237437836},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1537237437836},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1537237437839},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1537237437839},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1537237437839},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1537237437839},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1537237437840},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1537237437840},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1537237437842},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1537237437847},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1537237437855},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537237437855},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537237437855},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537237437856},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537237437856},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537237437857},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537237437858},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1537237437860},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1537237437861},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1537237437862},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1537237437862},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1537237437837},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1537237437837},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1537237437838},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1537237437838},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1537237437838},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1537237437838},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1537237437843},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1537237437843},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1537237437844},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1537237437844},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1537237437844},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1537237437844},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1537237437845},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1537237437845},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1537237437846},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1537237437846},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1537237437846},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1537237437847},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1537237437848},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1537237437848},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1537237437852},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537237437859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1537237437859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1537237437859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1537237437859},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1537237437860},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1537237437860},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1537237437851},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1537237437850},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1537237437854},{"_id":"public/2018/09/18/2018-2019技术书单/index.html","hash":"97ff04d54ae29964dd5649218c22fc221b78f98c","modified":1540195367823},{"_id":"public/2018/09/18/怎样更有竞争力/index.html","hash":"e4091bce796da89ff1b4f557f9c32472abef4694","modified":1540195367823},{"_id":"public/2018/05/17/从接口调用安全考虑/index.html","hash":"6064d811a10f56d066dae9a6ffdb7e128ce21acf","modified":1540195367823},{"_id":"public/2017/08/10/Linux下离线安装node和npm/index.html","hash":"41eb865b2964d0b5861bcb4f07dcf072ed5a41ec","modified":1540195367824},{"_id":"public/archives/index.html","hash":"f2a4c8526151af0a79d70049325925f2d2f501fe","modified":1540195367824},{"_id":"public/archives/page/2/index.html","hash":"625549b2351024a441fa0e3564820a2712f65dfb","modified":1540195367824},{"_id":"public/archives/2017/index.html","hash":"30832ddaf18995a4a37ec2085975720143be92fd","modified":1540195367824},{"_id":"public/archives/2017/07/index.html","hash":"7f0273708b2162e6ddaa9fd6e7b02701f55ef86f","modified":1540195367824},{"_id":"public/archives/2017/08/index.html","hash":"e099f0f7e314a5ef0006699d5f68d07f89a68d79","modified":1540195367824},{"_id":"public/archives/2018/index.html","hash":"f7784d433e92f3b9e255ab4673247d11c112f1c3","modified":1540195367824},{"_id":"public/archives/2018/page/2/index.html","hash":"970525965557e3df93dc3199353ad223b943ec47","modified":1540195367824},{"_id":"public/archives/2018/05/index.html","hash":"ab914b3a3fab771ae631088891a7035f4b97b713","modified":1540195367824},{"_id":"public/archives/2018/06/index.html","hash":"30718242d0d293494170797a2c2cde255d35104f","modified":1540195367824},{"_id":"public/archives/2018/07/index.html","hash":"67980f3423a60d180c7eccedb8f6e2ac91b0ca78","modified":1540195367824},{"_id":"public/archives/2018/09/index.html","hash":"c32d13f1b7bda33434efa57e0531366240008152","modified":1540195367824},{"_id":"public/archives/2018/10/index.html","hash":"206d29b4316cc13715fc652b3c0406e39c2237f9","modified":1540195367825},{"_id":"public/categories/基础科学/index.html","hash":"14bba54b212ad318dd9487c5816d4446d8a81643","modified":1540195367825},{"_id":"public/categories/数据可视化/index.html","hash":"fa3dee7b4a188605cbd33fd2d70764ba37dc010b","modified":1540195367825},{"_id":"public/categories/Nginx/index.html","hash":"617327ec95b89436c53ae1ee37e1bad886044f5d","modified":1540195367825},{"_id":"public/categories/大数据/index.html","hash":"9aac6de64119df177c87953c3a5a6dcbd6c6d50a","modified":1540195367825},{"_id":"public/categories/环境安装/index.html","hash":"dff35dc6fbd8b8591b10e3f25be0f7d88ce26588","modified":1540195367825},{"_id":"public/categories/可视化/index.html","hash":"315c36e982737ef524e26ff0c123b95348b4fe6f","modified":1540195367825},{"_id":"public/categories/webpack/index.html","hash":"0c61d7883c751143e5039744d105e888636213b5","modified":1540195367825},{"_id":"public/categories/系统设计/index.html","hash":"26778cc192e9ef67f326a19a4ba9e2e95282a3dc","modified":1540195367825},{"_id":"public/categories/博客/index.html","hash":"b6a7f78c3add8ca2987de65f2dcfe522ef5c75b4","modified":1540195367825},{"_id":"public/categories/vue/index.html","hash":"695505c9199a897bc942d01fe58548fe102b1341","modified":1540195367825},{"_id":"public/categories/感悟/index.html","hash":"b04ad7cf49e60ff1dfcbfa73fcdf50185338e19f","modified":1540195367825},{"_id":"public/categories/Web安全/index.html","hash":"84142406546a639f2b61c5e300b42df0ad74ba4d","modified":1540195367825},{"_id":"public/categories/运维/index.html","hash":"d6a78b17be046aba4f8980bc2848166c006627b4","modified":1540195367825},{"_id":"public/tags/书单/index.html","hash":"7238171aadf01f821a5386536d15f3164fabdb41","modified":1540195367826},{"_id":"public/tags/D3-js/index.html","hash":"779c9b8b13d84249fc75cc59fdb9494f81a257c1","modified":1540195367826},{"_id":"public/tags/HTTPS/index.html","hash":"b56a0b68123a879c350284db32ee750912c41b85","modified":1540195367826},{"_id":"public/tags/Hbase/index.html","hash":"826d2808920c6433eed8efe6243280c561db15d0","modified":1540195367826},{"_id":"public/tags/前端环境/index.html","hash":"c38531a831836df01f40b8ffd32f40fac1e25209","modified":1540195367826},{"_id":"public/tags/数据入库/index.html","hash":"2252d6d8ec233cac44ba303178e0f08afee0ab95","modified":1540195367826},{"_id":"public/tags/webcola/index.html","hash":"c75fdbabd49cc7add75e2ca5bc29a9582576c1c8","modified":1540195367826},{"_id":"public/tags/webpack/index.html","hash":"232b2bfff7bb834ce9f9d7686db999cac3f73426","modified":1540195367826},{"_id":"public/tags/接口设计/index.html","hash":"a2fe7f1ad47eec7b28167834307adee9aad067a1","modified":1540195367826},{"_id":"public/tags/自动化部署-博客/index.html","hash":"7ce30c0c8f0eaa8a5a822170640fe809cb0faf2e","modified":1540195367826},{"_id":"public/tags/vue/index.html","hash":"dcc69a33cec728c1cdb1db81151b02bccafa81b1","modified":1540195367826},{"_id":"public/tags/竞争力/index.html","hash":"46f68d75211e72abc959af5bca8933a707319b90","modified":1540195367826},{"_id":"public/tags/Web安全/index.html","hash":"caa5bd07f76f061e522759ed04ac0a9b11a657dc","modified":1540195367826},{"_id":"public/tags/异常解决/index.html","hash":"d1e72ac17a96206e520bde1808f922ef7c2eb9e4","modified":1540195367826},{"_id":"public/2018/10/22/记一次crontab执行scp异常解决/index.html","hash":"d4874e39a656b6444db577a7dbfe8d515ea38ac8","modified":1540195367826},{"_id":"public/2018/09/19/Hive2Hbase入库逻辑/index.html","hash":"3687a0eec68c4e8430357009567c6694c4480f3c","modified":1540195367827},{"_id":"public/2018/09/12/webcola介绍/index.html","hash":"6621395f4b8f62c847293d5f7af7aa30422a3d35","modified":1540195367827},{"_id":"public/2018/09/10/Hbase基础知识点梳理/index.html","hash":"a81cffa4ffebf68011b8f8f5a0c018b675c0e6db","modified":1540195367827},{"_id":"public/2018/07/01/D3-js数据可视化实践（精简）/index.html","hash":"68eaf20b3858e1e545b05bd4df0687464b317b43","modified":1540195367827},{"_id":"public/2018/06/29/D3-js数据可视化实践（讲义）/index.html","hash":"c53e5c9993710ee7a9af6bbaa4f2569db1694954","modified":1540195367827},{"_id":"public/2018/06/27/《D3-js-in-Action-Data-visualization-with-JavaScript-2nd-》部分章节摘要/index.html","hash":"6b49793efa12435ea8bb8869a1032bedc6d4e2af","modified":1540195367827},{"_id":"public/2018/06/08/HTTPS证书及Nginx配置相关/index.html","hash":"3a215548548b67a00266ea08a57f79355f5558f3","modified":1540195367827},{"_id":"public/2017/08/14/常见的Web安全漏洞介绍及解决办法/index.html","hash":"b5b61adedd1f246e624d0299af9430796bc2f913","modified":1540195367827},{"_id":"public/2017/07/31/基于VUE-VUEX-ELEMENT-UI的项目结构/index.html","hash":"6db93c65ab6bb614aa9385624fd0e25416573a09","modified":1540195367828},{"_id":"public/2017/07/31/webpack中文文档摘要/index.html","hash":"85fde01517959f5acb77041c64dfb1c80328e693","modified":1540195367828},{"_id":"public/2017/07/25/利用travis自动化部署博客项目/index.html","hash":"9c8f632358d43b765006f807ff943c86ecf673c4","modified":1540195367828},{"_id":"public/index.html","hash":"c4f5e8590e0cacf409785e2fb2b8f7e2d0ad1b0d","modified":1540195367828},{"_id":"public/page/2/index.html","hash":"1d2063f38400f9584c12fbf34d52d515dd1fe6bb","modified":1540195367828},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1540195367832},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1540195367833},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1540195367833},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1540195367833},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1540195367833},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1540195367833},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1540195367833},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1540195367833},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1540195367833},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1540195367833},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1540195368182},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1540195368187},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1540195368187},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1540195368187},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1540195368187},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1540195368187},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1540195368187},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1540195368187},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1540195368187},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1540195368187},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1540195368188},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1540195368192},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1540195368192},{"_id":"source/CNAME","hash":"deba49118509134ed435daa9b53f6d76b4bc5303","modified":1538114491272}],"Category":[{"name":"基础科学","_id":"cjnk0jz0200032v2pz4ryjecy"},{"name":"数据可视化","_id":"cjnk0jz0700082v2pgnug8cn2"},{"name":"Nginx","_id":"cjnk0jz0j000j2v2punqhmxeb"},{"name":"大数据","_id":"cjnk0jz0m000q2v2pvohuzhmt"},{"name":"环境安装","_id":"cjnk0jz0q000x2v2pzi19yb9o"},{"name":"可视化","_id":"cjnk0jz0v00182v2p63suz92q"},{"name":"webpack","_id":"cjnk0jz0w001c2v2pc8n1wzv9"},{"name":"系统设计","_id":"cjnk0jz0x001h2v2phu11mny6"},{"name":"博客","_id":"cjnk0jz0z001l2v2pgam8wiip"},{"name":"vue","_id":"cjnk0jz10001p2v2po6q0tp3x"},{"name":"感悟","_id":"cjnk0jz11001t2v2pon8em5pj"},{"name":"Web安全","_id":"cjnk0jz12001x2v2ptv5pqc9g"},{"name":"运维","_id":"cjnk0jz1300212v2p4gtj5kwm"}],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2018-09-19T09:48:38.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_drafts/hello-world.md","raw":"title: Hello World\ndate: 2018-09-19 17:48:38\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":0,"updated":"2018-09-19T09:48:38.669Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jyzt00002v2p81r76g2m","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"2018-2019技术书单","author":"Peng Fang","date":"2018-09-18T12:42:00.000Z","_content":"2018到2019书单   \n       —— 计算机系统化学习，大神进化之路   \n##### 数学   \n具体数学  \n图论及其应用  \n矩阵理论   \n线性代数与空间解析几何   \n最优化理论与方法  \n组合数学  \n深入浅出统计学  \n\n##### 机器学习\n统计学习方法  \n机器学习(西瓜书)  \n机器学习(经典)  \n\n##### 大数据\nHadoop权威指南   \n\n#### 编程语言\ncss世界  \nJava核心技术(卷一)  \n深入理解Java虚拟机   \nwebkit技术内幕  \n高性能JavaScript  \n\n#### 数据结构及算法\n算法导论  \n算法：C语言实现  \n算法心得  \n数据结构与算法分析——C语言描述  \n\n#### 网络\nTCP/IP详解  \n计算机网络自顶向下方法  \n\n\n#### 操作系统\n深入理解计算机系统  \nLinux内核设计与实现(第三版)  \nLinux程序设计实践  \nUnix操作系统设计   \n老码识途  \n\n#### 数据库\n数据库系统概论  \nMySQL DBA修炼之道  \n高性能MySQL  \n","source":"_posts/2018-2019技术书单.md","raw":"title: 2018-2019技术书单\nauthor: Peng Fang\ntags:\n  - 书单\ncategories:\n  - 基础科学\ndate: 2018-09-18 20:42:00\n---\n2018到2019书单   \n       —— 计算机系统化学习，大神进化之路   \n##### 数学   \n具体数学  \n图论及其应用  \n矩阵理论   \n线性代数与空间解析几何   \n最优化理论与方法  \n组合数学  \n深入浅出统计学  \n\n##### 机器学习\n统计学习方法  \n机器学习(西瓜书)  \n机器学习(经典)  \n\n##### 大数据\nHadoop权威指南   \n\n#### 编程语言\ncss世界  \nJava核心技术(卷一)  \n深入理解Java虚拟机   \nwebkit技术内幕  \n高性能JavaScript  \n\n#### 数据结构及算法\n算法导论  \n算法：C语言实现  \n算法心得  \n数据结构与算法分析——C语言描述  \n\n#### 网络\nTCP/IP详解  \n计算机网络自顶向下方法  \n\n\n#### 操作系统\n深入理解计算机系统  \nLinux内核设计与实现(第三版)  \nLinux程序设计实践  \nUnix操作系统设计   \n老码识途  \n\n#### 数据库\n数据库系统概论  \nMySQL DBA修炼之道  \n高性能MySQL  \n","slug":"2018-2019技术书单","published":1,"updated":"2018-09-19T12:48:36.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jyzx00012v2pxzmvpttf","content":"<p>2018到2019书单<br>       —— 计算机系统化学习，大神进化之路   </p>\n<h5 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h5><p>具体数学<br>图论及其应用<br>矩阵理论<br>线性代数与空间解析几何<br>最优化理论与方法<br>组合数学<br>深入浅出统计学  </p>\n<h5 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h5><p>统计学习方法<br>机器学习(西瓜书)<br>机器学习(经典)  </p>\n<h5 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h5><p>Hadoop权威指南   </p>\n<h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4><p>css世界<br>Java核心技术(卷一)<br>深入理解Java虚拟机<br>webkit技术内幕<br>高性能JavaScript  </p>\n<h4 id=\"数据结构及算法\"><a href=\"#数据结构及算法\" class=\"headerlink\" title=\"数据结构及算法\"></a>数据结构及算法</h4><p>算法导论<br>算法：C语言实现<br>算法心得<br>数据结构与算法分析——C语言描述  </p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>TCP/IP详解<br>计算机网络自顶向下方法  </p>\n<h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>深入理解计算机系统<br>Linux内核设计与实现(第三版)<br>Linux程序设计实践<br>Unix操作系统设计<br>老码识途  </p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库系统概论<br>MySQL DBA修炼之道<br>高性能MySQL  </p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018到2019书单<br>       —— 计算机系统化学习，大神进化之路   </p>\n<h5 id=\"数学\"><a href=\"#数学\" class=\"headerlink\" title=\"数学\"></a>数学</h5><p>具体数学<br>图论及其应用<br>矩阵理论<br>线性代数与空间解析几何<br>最优化理论与方法<br>组合数学<br>深入浅出统计学  </p>\n<h5 id=\"机器学习\"><a href=\"#机器学习\" class=\"headerlink\" title=\"机器学习\"></a>机器学习</h5><p>统计学习方法<br>机器学习(西瓜书)<br>机器学习(经典)  </p>\n<h5 id=\"大数据\"><a href=\"#大数据\" class=\"headerlink\" title=\"大数据\"></a>大数据</h5><p>Hadoop权威指南   </p>\n<h4 id=\"编程语言\"><a href=\"#编程语言\" class=\"headerlink\" title=\"编程语言\"></a>编程语言</h4><p>css世界<br>Java核心技术(卷一)<br>深入理解Java虚拟机<br>webkit技术内幕<br>高性能JavaScript  </p>\n<h4 id=\"数据结构及算法\"><a href=\"#数据结构及算法\" class=\"headerlink\" title=\"数据结构及算法\"></a>数据结构及算法</h4><p>算法导论<br>算法：C语言实现<br>算法心得<br>数据结构与算法分析——C语言描述  </p>\n<h4 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h4><p>TCP/IP详解<br>计算机网络自顶向下方法  </p>\n<h4 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h4><p>深入理解计算机系统<br>Linux内核设计与实现(第三版)<br>Linux程序设计实践<br>Unix操作系统设计<br>老码识途  </p>\n<h4 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h4><p>数据库系统概论<br>MySQL DBA修炼之道<br>高性能MySQL  </p>\n"},{"title":"D3.js数据可视化实践（精简）","author":"Peng Fang","date":"2018-07-01T11:03:00.000Z","_content":"## D3数据可视化实践\n\n> 方鹏 2018/07/05\n\n### 前言\n在我们的APP上线后，经过数据分析，实时获取反映使用情况的活跃用户数；活跃数可分为总的日活或月活，分APP的日活或月活，分APP分省的日活或月活等等。想把这些数据表达清楚，可能会涉及实时的动态的变化数据；数据的按维度分类展示；如何按数字大小或者属性进行区分，着重展示我们感兴趣的数据。以上涉及到的就是我们常说的数据可视化。数据可视化的目的就是对数据进行可视化处理，以使得明确有效地传递信息。  \n利用图表来对数据进行可视化是我们熟知的方式。产品经理对可视化需求进行分析，选择合适的图表来表达和传递信息。而我们作为前端开发人员，也需要理解需求及设计，选用能满足需求的图表组件或可视化方案来实现产品设计。   \n选择技术方案的时候，我们或许会发现，因为图表内容复杂，没有现成的图表组件能够利用；或者现有的图表组件不能满足我们的部分需求；或者因为大数据量的场景，造成图表渲染较慢。解决这些需求中的痛点，我们就得思考用何种技术方案，怎样解决遇到的问题。思考为什么选择这个方案，它能帮助我们解决什么问题，或者说它有什么优势。\n\n### 怎么选择\n现有的可视化库很多，像Echarts，Highcharts，D3这些我们多少都在项目中经常使用或者听说过大名。Echarts等可视化库封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。D3在这一点上取得了平衡。D3提供了极度灵活的Web标准化能力，例如CSS3, HTML5, SVG。\n试想用原生的HTML、SVG、Canvas来实现数据绘图是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。那么方案怎么选择呢？我们应该熟悉各可视化库的优势，在满足需求的同时也要考虑开发成本。\n\n### 关于D3.js\n\n#### 什么是D3.js\nD3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。\n\n> 数据由用户或开发者提供  \n> 文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG、Canvas   \n> 由D3来驱动数据和文档。从某种意义上说，它将文档和数据联系起来。\n\n<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。\n\n用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\">Mike Bostock</a>\n\n其开源地址：\n<a href=\"https://github.com/d3/d3\">https://github.com/d3/d3</a>\n\n#### 历史及版本比较\n1. 2011年2月，Mike Bostock发布了v1.0.0版本。\n2. 2012年12月，v3.0.0版本发布，网上3.x的资料比较多。\n3. 2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。\n\n| v3.x | v4.x |\n| :-------------: | :-------------: |\n| 嵌套结构 | 模块化|\n| 稳定，资料多 | 有优化，资料相对较少 |\n| 只支持SVG渲染 | 支持Canvas渲染 |\n\n> 注意：<strong style=\"color:red;\">两个版本的代码不兼容</strong>\n\n#### D3的优势\n\n- 相对比较底层   \n数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。\n- 更像数学库   \n强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。\n- 即封装操作，也给予自由   \n计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。\n\n#### D3部分模块\n| 模块 | 描述 | 依赖 | \n| -------- | --------------- | ----------- | \n| d3-axis | 坐标轴| d3-scale, d3-selection, d3-transition | \n| d3-color | 颜色集操作和呈现 | None. | \n| d3-format | 数字格式化 | None. |\n| d3-interpolate | 插值函数 | d3-color |\n| d3-path | 路径生成 | None. |\n| d3-polygon | 二维多边形几何操作 | None. |\n| d3-request | XMLHttpRequest封装 | d3-dsv, d3-dispatch |\n| d3-scale | XMLHttpRequest封装 | d3-dsv, d3-dispatch |\n| d3-request | 从抽象到具体数据的映射 | d3-array, d3-collection, d3-color, d3-format, d3-interpolate, d3-time, d3-time-format |\n| d3-selection | 通过选择和加入数据进行DOM转换 | d3-dsv, d3-dispatch |\n| d3-transition | D3.js选择集的动画过渡 | d3-ease, d3-timer, d3-interpolate, d3-selection |\n\n### D3基础\n#### SVG基础\nSVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。   \n位图与矢量图的区别：   \n位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。\n##### SVG图形元素\nSVG预定义七种形状元素：   \n矩形`<rect>`、圆形`<circle>`、椭圆形`<ellipse>`、线段`<line>`、折线`<polyline>`、多边形`<polygon>`、路径`<path>`   \n路径指令：   \n- M=moveto\n- L=lineto\n- H=horizontal lineto\n- V=vertical lineto\n- C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点\n- S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称\n- Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点\n- T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线   \n<a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\">SVG 示例</a>\n\n##### 文字\n在SVG中可以使用`<text>`标签绘制文字   \ndx: 相对当前位置在x方向上平移的距离，dy同理。   \n<a href=\"https://segmentfault.com/a/1190000009293590\">text-anchor属性</a>\n``` html\n<text class=\"label-2\" text-anchor=\"end\" dy=\".35em\" rank=\"B\">\n  <tspan x=\"0\" dy=\"0.35em\">(不知情定制B004)内容战</tspan>\n  <tspan x=\"0\" dy=\"1.0499999999999998em\">略合作伙伴分类不合规</tspan>\n</text>\n```\n\n### D3数据选择和属性设定\n我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。\nd3.select()是选中单个元素；d3.selectAll()是选中多个元素。\n选择集是一个或多个页面元素的组合，能够与数据集相关联。\n利用D3提供的方法设置元素属性和样式值：\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\nd3.select(\"circle\").attr(\"class\", \"active\");\nd3.select(\"circle\").classed(\"active\", true); // 添加或者移除命名的样式\n\n```\n有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：\n\n``` javascript \nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\n方法链，也叫链式调用。和JQuery写法类似。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n  .data(someColors)\n  .enter()\n  .append(\"div\")\n  .style(\"background\", function(d) {return d})\n  .attr(\"cx\", function(d,i) {return i})\n  .html(function(d) {return d})\n```\n<a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\"></a>\n\n\n### D3数据处理\n- 数据映射  \n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。\n![线性比例尺示意](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsToicK4bbZXicsHTkMajMTP75ibRcXZlFSdKxXQczGXJ64CcSG51074fl1A/0?wx_fmt=png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。\n- 数据分类  \n将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。\n![定量数据分类](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTvC0bxjDkN7K9SW4BRglwcTu3DsK1yA6h5P7Pa9j0DGVuSaXTc8gn9Q/0?wx_fmt=png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。\n下面的例子，将示例数据首先按year分组再按variety分组，如下：\n``` javascript\nvar yields = [{yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n              {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n              {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, \n               ...]\nvar nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);\n```\n返回的嵌套数组中,以键值对的形式对数据进行分组:\n``` javascript \n[{key: 1931, values: [\n    {key: \"Manchuria\", values: [\n        {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n        {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n        {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n    {key: \"Glabron\", values: [\n        {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n        {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: 1932, values: ...}]\n```\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。\n\n- 数据测量  \n在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。\n加入想从cities.csv获取城市人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n  d3.min(data, el => +el.population); \n  d3.max(data, el => +el.population);\n  d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n``` Javascript\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n\n<a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\">简单数据可视化示例</a>\n\n### D3数据绑定过程\n一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n  if (error) {\n      console.error(error)\n  } else {\n      dataViz(data)\n  }\n});\nfunction dataViz(incomingData) {\n  d3.select(\"body\").selectAll(\"div.cities\")\n      .data(incomingData) // 绑定数据到选择集\n      .enter() // 定义当选择集中的数据多于DOM元素时如何响应\n      .append(\"div\") // 在当前选择集中创建一个元素\n      .attr(\"class\", \"cities\") // 设置新创建元素class\n      .html(d => d.label); // 设置创建div的内容\n}\n```\n经常传入id没有匹配到任何元素，那么称其为空选择集。\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n- 如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”\n- 如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”\n- 如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”\n\n大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。\n![进入退出更新示意图](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTyUz4Pa5o4PUA4ia9iaU3VX4nRnbPx1SuEbndtj97bWiaov6yvIU1ImwTA/0?wx_fmt=png)\n\n### 交互\n\n#### 颜色插值\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0, maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：`d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c`   \n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。   \n<a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\">Color Scales</a>\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n\n#### 事件监听\nD3选择器可以通过on来为事件添加监听器：`selection.on(type[, listener[, capture]])`\n``` javascript\nselection.on(\"click\",  function () {\n    console.log(d3.mouse(this)); // 输出相对坐标\n})\n```\n在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。\n\n如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click\", null)。\n\n#### 行为\n下面给出拖拽和缩放的例子：  \n<a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\">拖拽简单示例</a>   \n<a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\">缩放简单示例</a>\n\n#### 布局\nD3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。   \n力导向图（Force-Directed Graph），是一种常用的绘图算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。\n\n> 力导向图的绘制\n> 1. 生成数据\n> 2. 设置力导向图\n> 3. 添加绘制方法\n> 4. 添加交互\n\n\n<a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\">力导向图示例</a>\n\n### 总结\nBen Fry提出的数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互。D3数据可视化也会经历这几个过程。首先D3读取源数据，进行解析得到需要处理的对象数组，然后将得到的数据进行过滤返回我们感兴趣的数据，然后对过滤得到的数据进行格式化，分类或分组，方便利用数据来驱动文档。\n通常我们根据数据数值大小或时间远近等熟悉转换为图形上元素的大小或者位置。如果需要生成网络图谱等可视化图表，我们可以利用D3提供的布局来绘制。以力导向图为例，首先构建节点和连线的对象数据，然后将其设定给力导向图，力导向图为给节点连线生成初始的位置信息，然后根据节点和连线对象数据来自定义（绘制）节点和内容。同时我们利用tick机制绑定tick回调函数，在回调函数中定义机制对节点和连线的坐标进行更新，并更新图表。\nD3.js是一种很强大的可视化利器，在GitHub数据可视化分类中关注度最高的。在AI+物联网时代，数据可视化或者说人机交互将会越来越重要。掌握常见的数据可视化技术，理解可视化中的图形图像算法对于想在可视化方向深耕的小伙伴来说是很有必要的。\n\n### 参考资料\n- [D3 API 中文文档](https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)\n- [精通D3.js（第二版）](http://www.broadview.com.cn/book/4786)\n- [D3.js 4.x Data Visualization(Third Edition)](https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X)\n- [图说D3数据可视化利器从入门到进阶](http://www.broadview.com.cn/book/638)\n","source":"_posts/D3-js数据可视化实践（精简）.md","raw":"title: D3.js数据可视化实践（精简）\nauthor: Peng Fang\ntags:\n  - D3.js\ncategories:\n  - 数据可视化\ndate: 2018-07-01 19:03:00\n---\n## D3数据可视化实践\n\n> 方鹏 2018/07/05\n\n### 前言\n在我们的APP上线后，经过数据分析，实时获取反映使用情况的活跃用户数；活跃数可分为总的日活或月活，分APP的日活或月活，分APP分省的日活或月活等等。想把这些数据表达清楚，可能会涉及实时的动态的变化数据；数据的按维度分类展示；如何按数字大小或者属性进行区分，着重展示我们感兴趣的数据。以上涉及到的就是我们常说的数据可视化。数据可视化的目的就是对数据进行可视化处理，以使得明确有效地传递信息。  \n利用图表来对数据进行可视化是我们熟知的方式。产品经理对可视化需求进行分析，选择合适的图表来表达和传递信息。而我们作为前端开发人员，也需要理解需求及设计，选用能满足需求的图表组件或可视化方案来实现产品设计。   \n选择技术方案的时候，我们或许会发现，因为图表内容复杂，没有现成的图表组件能够利用；或者现有的图表组件不能满足我们的部分需求；或者因为大数据量的场景，造成图表渲染较慢。解决这些需求中的痛点，我们就得思考用何种技术方案，怎样解决遇到的问题。思考为什么选择这个方案，它能帮助我们解决什么问题，或者说它有什么优势。\n\n### 怎么选择\n现有的可视化库很多，像Echarts，Highcharts，D3这些我们多少都在项目中经常使用或者听说过大名。Echarts等可视化库封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。D3在这一点上取得了平衡。D3提供了极度灵活的Web标准化能力，例如CSS3, HTML5, SVG。\n试想用原生的HTML、SVG、Canvas来实现数据绘图是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。那么方案怎么选择呢？我们应该熟悉各可视化库的优势，在满足需求的同时也要考虑开发成本。\n\n### 关于D3.js\n\n#### 什么是D3.js\nD3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。\n\n> 数据由用户或开发者提供  \n> 文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG、Canvas   \n> 由D3来驱动数据和文档。从某种意义上说，它将文档和数据联系起来。\n\n<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。\n\n用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\">Mike Bostock</a>\n\n其开源地址：\n<a href=\"https://github.com/d3/d3\">https://github.com/d3/d3</a>\n\n#### 历史及版本比较\n1. 2011年2月，Mike Bostock发布了v1.0.0版本。\n2. 2012年12月，v3.0.0版本发布，网上3.x的资料比较多。\n3. 2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。\n\n| v3.x | v4.x |\n| :-------------: | :-------------: |\n| 嵌套结构 | 模块化|\n| 稳定，资料多 | 有优化，资料相对较少 |\n| 只支持SVG渲染 | 支持Canvas渲染 |\n\n> 注意：<strong style=\"color:red;\">两个版本的代码不兼容</strong>\n\n#### D3的优势\n\n- 相对比较底层   \n数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。\n- 更像数学库   \n强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。\n- 即封装操作，也给予自由   \n计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。\n\n#### D3部分模块\n| 模块 | 描述 | 依赖 | \n| -------- | --------------- | ----------- | \n| d3-axis | 坐标轴| d3-scale, d3-selection, d3-transition | \n| d3-color | 颜色集操作和呈现 | None. | \n| d3-format | 数字格式化 | None. |\n| d3-interpolate | 插值函数 | d3-color |\n| d3-path | 路径生成 | None. |\n| d3-polygon | 二维多边形几何操作 | None. |\n| d3-request | XMLHttpRequest封装 | d3-dsv, d3-dispatch |\n| d3-scale | XMLHttpRequest封装 | d3-dsv, d3-dispatch |\n| d3-request | 从抽象到具体数据的映射 | d3-array, d3-collection, d3-color, d3-format, d3-interpolate, d3-time, d3-time-format |\n| d3-selection | 通过选择和加入数据进行DOM转换 | d3-dsv, d3-dispatch |\n| d3-transition | D3.js选择集的动画过渡 | d3-ease, d3-timer, d3-interpolate, d3-selection |\n\n### D3基础\n#### SVG基础\nSVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。   \n位图与矢量图的区别：   \n位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。\n##### SVG图形元素\nSVG预定义七种形状元素：   \n矩形`<rect>`、圆形`<circle>`、椭圆形`<ellipse>`、线段`<line>`、折线`<polyline>`、多边形`<polygon>`、路径`<path>`   \n路径指令：   \n- M=moveto\n- L=lineto\n- H=horizontal lineto\n- V=vertical lineto\n- C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点\n- S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称\n- Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点\n- T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线   \n<a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\">SVG 示例</a>\n\n##### 文字\n在SVG中可以使用`<text>`标签绘制文字   \ndx: 相对当前位置在x方向上平移的距离，dy同理。   \n<a href=\"https://segmentfault.com/a/1190000009293590\">text-anchor属性</a>\n``` html\n<text class=\"label-2\" text-anchor=\"end\" dy=\".35em\" rank=\"B\">\n  <tspan x=\"0\" dy=\"0.35em\">(不知情定制B004)内容战</tspan>\n  <tspan x=\"0\" dy=\"1.0499999999999998em\">略合作伙伴分类不合规</tspan>\n</text>\n```\n\n### D3数据选择和属性设定\n我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。\nd3.select()是选中单个元素；d3.selectAll()是选中多个元素。\n选择集是一个或多个页面元素的组合，能够与数据集相关联。\n利用D3提供的方法设置元素属性和样式值：\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\nd3.select(\"circle\").attr(\"class\", \"active\");\nd3.select(\"circle\").classed(\"active\", true); // 添加或者移除命名的样式\n\n```\n有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：\n\n``` javascript \nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\n方法链，也叫链式调用。和JQuery写法类似。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n  .data(someColors)\n  .enter()\n  .append(\"div\")\n  .style(\"background\", function(d) {return d})\n  .attr(\"cx\", function(d,i) {return i})\n  .html(function(d) {return d})\n```\n<a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\"></a>\n\n\n### D3数据处理\n- 数据映射  \n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。\n![线性比例尺示意](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsToicK4bbZXicsHTkMajMTP75ibRcXZlFSdKxXQczGXJ64CcSG51074fl1A/0?wx_fmt=png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。\n- 数据分类  \n将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。\n![定量数据分类](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTvC0bxjDkN7K9SW4BRglwcTu3DsK1yA6h5P7Pa9j0DGVuSaXTc8gn9Q/0?wx_fmt=png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。\n下面的例子，将示例数据首先按year分组再按variety分组，如下：\n``` javascript\nvar yields = [{yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n              {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n              {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, \n               ...]\nvar nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);\n```\n返回的嵌套数组中,以键值对的形式对数据进行分组:\n``` javascript \n[{key: 1931, values: [\n    {key: \"Manchuria\", values: [\n        {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n        {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n        {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n    {key: \"Glabron\", values: [\n        {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n        {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: 1932, values: ...}]\n```\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。\n\n- 数据测量  \n在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。\n加入想从cities.csv获取城市人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n  d3.min(data, el => +el.population); \n  d3.max(data, el => +el.population);\n  d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n``` Javascript\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n\n<a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\">简单数据可视化示例</a>\n\n### D3数据绑定过程\n一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n  if (error) {\n      console.error(error)\n  } else {\n      dataViz(data)\n  }\n});\nfunction dataViz(incomingData) {\n  d3.select(\"body\").selectAll(\"div.cities\")\n      .data(incomingData) // 绑定数据到选择集\n      .enter() // 定义当选择集中的数据多于DOM元素时如何响应\n      .append(\"div\") // 在当前选择集中创建一个元素\n      .attr(\"class\", \"cities\") // 设置新创建元素class\n      .html(d => d.label); // 设置创建div的内容\n}\n```\n经常传入id没有匹配到任何元素，那么称其为空选择集。\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n- 如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”\n- 如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”\n- 如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”\n\n大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。\n![进入退出更新示意图](https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTyUz4Pa5o4PUA4ia9iaU3VX4nRnbPx1SuEbndtj97bWiaov6yvIU1ImwTA/0?wx_fmt=png)\n\n### 交互\n\n#### 颜色插值\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0, maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：`d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c`   \n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。   \n<a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\">Color Scales</a>\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n\n#### 事件监听\nD3选择器可以通过on来为事件添加监听器：`selection.on(type[, listener[, capture]])`\n``` javascript\nselection.on(\"click\",  function () {\n    console.log(d3.mouse(this)); // 输出相对坐标\n})\n```\n在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。\n\n如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click\", null)。\n\n#### 行为\n下面给出拖拽和缩放的例子：  \n<a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\">拖拽简单示例</a>   \n<a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\">缩放简单示例</a>\n\n#### 布局\nD3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。   \n力导向图（Force-Directed Graph），是一种常用的绘图算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。\n\n> 力导向图的绘制\n> 1. 生成数据\n> 2. 设置力导向图\n> 3. 添加绘制方法\n> 4. 添加交互\n\n\n<a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\">力导向图示例</a>\n\n### 总结\nBen Fry提出的数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互。D3数据可视化也会经历这几个过程。首先D3读取源数据，进行解析得到需要处理的对象数组，然后将得到的数据进行过滤返回我们感兴趣的数据，然后对过滤得到的数据进行格式化，分类或分组，方便利用数据来驱动文档。\n通常我们根据数据数值大小或时间远近等熟悉转换为图形上元素的大小或者位置。如果需要生成网络图谱等可视化图表，我们可以利用D3提供的布局来绘制。以力导向图为例，首先构建节点和连线的对象数据，然后将其设定给力导向图，力导向图为给节点连线生成初始的位置信息，然后根据节点和连线对象数据来自定义（绘制）节点和内容。同时我们利用tick机制绑定tick回调函数，在回调函数中定义机制对节点和连线的坐标进行更新，并更新图表。\nD3.js是一种很强大的可视化利器，在GitHub数据可视化分类中关注度最高的。在AI+物联网时代，数据可视化或者说人机交互将会越来越重要。掌握常见的数据可视化技术，理解可视化中的图形图像算法对于想在可视化方向深耕的小伙伴来说是很有必要的。\n\n### 参考资料\n- [D3 API 中文文档](https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)\n- [精通D3.js（第二版）](http://www.broadview.com.cn/book/4786)\n- [D3.js 4.x Data Visualization(Third Edition)](https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X)\n- [图说D3数据可视化利器从入门到进阶](http://www.broadview.com.cn/book/638)\n","slug":"D3-js数据可视化实践（精简）","published":1,"updated":"2018-09-19T11:19:09.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0000022v2p7ycgf68m","content":"<h2 id=\"D3数据可视化实践\"><a href=\"#D3数据可视化实践\" class=\"headerlink\" title=\"D3数据可视化实践\"></a>D3数据可视化实践</h2><blockquote>\n<p>方鹏 2018/07/05</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在我们的APP上线后，经过数据分析，实时获取反映使用情况的活跃用户数；活跃数可分为总的日活或月活，分APP的日活或月活，分APP分省的日活或月活等等。想把这些数据表达清楚，可能会涉及实时的动态的变化数据；数据的按维度分类展示；如何按数字大小或者属性进行区分，着重展示我们感兴趣的数据。以上涉及到的就是我们常说的数据可视化。数据可视化的目的就是对数据进行可视化处理，以使得明确有效地传递信息。<br>利用图表来对数据进行可视化是我们熟知的方式。产品经理对可视化需求进行分析，选择合适的图表来表达和传递信息。而我们作为前端开发人员，也需要理解需求及设计，选用能满足需求的图表组件或可视化方案来实现产品设计。<br>选择技术方案的时候，我们或许会发现，因为图表内容复杂，没有现成的图表组件能够利用；或者现有的图表组件不能满足我们的部分需求；或者因为大数据量的场景，造成图表渲染较慢。解决这些需求中的痛点，我们就得思考用何种技术方案，怎样解决遇到的问题。思考为什么选择这个方案，它能帮助我们解决什么问题，或者说它有什么优势。</p>\n<h3 id=\"怎么选择\"><a href=\"#怎么选择\" class=\"headerlink\" title=\"怎么选择\"></a>怎么选择</h3><p>现有的可视化库很多，像Echarts，Highcharts，D3这些我们多少都在项目中经常使用或者听说过大名。Echarts等可视化库封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。D3在这一点上取得了平衡。D3提供了极度灵活的Web标准化能力，例如CSS3, HTML5, SVG。<br>试想用原生的HTML、SVG、Canvas来实现数据绘图是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。那么方案怎么选择呢？我们应该熟悉各可视化库的优势，在满足需求的同时也要考虑开发成本。</p>\n<h3 id=\"关于D3-js\"><a href=\"#关于D3-js\" class=\"headerlink\" title=\"关于D3.js\"></a>关于D3.js</h3><h4 id=\"什么是D3-js\"><a href=\"#什么是D3-js\" class=\"headerlink\" title=\"什么是D3.js\"></a>什么是D3.js</h4><p>D3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。</p>\n<blockquote>\n<p>数据由用户或开发者提供<br>文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG、Canvas<br>由D3来驱动数据和文档。从某种意义上说，它将文档和数据联系起来。</p>\n</blockquote>\n<p><strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。</p>\n<p>用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\" target=\"_blank\" rel=\"noopener\">Mike Bostock</a></p>\n<p>其开源地址：<br><a href=\"https://github.com/d3/d3\" target=\"_blank\" rel=\"noopener\">https://github.com/d3/d3</a></p>\n<h4 id=\"历史及版本比较\"><a href=\"#历史及版本比较\" class=\"headerlink\" title=\"历史及版本比较\"></a>历史及版本比较</h4><ol>\n<li>2011年2月，Mike Bostock发布了v1.0.0版本。</li>\n<li>2012年12月，v3.0.0版本发布，网上3.x的资料比较多。</li>\n<li>2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">v3.x</th>\n<th style=\"text-align:center\">v4.x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">嵌套结构</td>\n<td style=\"text-align:center\">模块化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">稳定，资料多</td>\n<td style=\"text-align:center\">有优化，资料相对较少</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">只支持SVG渲染</td>\n<td style=\"text-align:center\">支持Canvas渲染</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：<strong style=\"color:red;\">两个版本的代码不兼容</strong></p>\n</blockquote>\n<h4 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h4><ul>\n<li>相对比较底层<br>数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。</li>\n<li>更像数学库<br>强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。</li>\n<li>即封装操作，也给予自由<br>计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。</li>\n</ul>\n<h4 id=\"D3部分模块\"><a href=\"#D3部分模块\" class=\"headerlink\" title=\"D3部分模块\"></a>D3部分模块</h4><table>\n<thead>\n<tr>\n<th>模块</th>\n<th>描述</th>\n<th>依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d3-axis</td>\n<td>坐标轴</td>\n<td>d3-scale, d3-selection, d3-transition</td>\n</tr>\n<tr>\n<td>d3-color</td>\n<td>颜色集操作和呈现</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-format</td>\n<td>数字格式化</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-interpolate</td>\n<td>插值函数</td>\n<td>d3-color</td>\n</tr>\n<tr>\n<td>d3-path</td>\n<td>路径生成</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-polygon</td>\n<td>二维多边形几何操作</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-request</td>\n<td>XMLHttpRequest封装</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-scale</td>\n<td>XMLHttpRequest封装</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-request</td>\n<td>从抽象到具体数据的映射</td>\n<td>d3-array, d3-collection, d3-color, d3-format, d3-interpolate, d3-time, d3-time-format</td>\n</tr>\n<tr>\n<td>d3-selection</td>\n<td>通过选择和加入数据进行DOM转换</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-transition</td>\n<td>D3.js选择集的动画过渡</td>\n<td>d3-ease, d3-timer, d3-interpolate, d3-selection</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D3基础\"><a href=\"#D3基础\" class=\"headerlink\" title=\"D3基础\"></a>D3基础</h3><h4 id=\"SVG基础\"><a href=\"#SVG基础\" class=\"headerlink\" title=\"SVG基础\"></a>SVG基础</h4><p>SVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。<br>位图与矢量图的区别：<br>位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。</p>\n<h5 id=\"SVG图形元素\"><a href=\"#SVG图形元素\" class=\"headerlink\" title=\"SVG图形元素\"></a>SVG图形元素</h5><p>SVG预定义七种形状元素：<br>矩形<code>&lt;rect&gt;</code>、圆形<code>&lt;circle&gt;</code>、椭圆形<code>&lt;ellipse&gt;</code>、线段<code>&lt;line&gt;</code>、折线<code>&lt;polyline&gt;</code>、多边形<code>&lt;polygon&gt;</code>、路径<code>&lt;path&gt;</code><br>路径指令：   </p>\n<ul>\n<li>M=moveto</li>\n<li>L=lineto</li>\n<li>H=horizontal lineto</li>\n<li>V=vertical lineto</li>\n<li>C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点</li>\n<li>S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称</li>\n<li>Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点</li>\n<li>T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线<br><a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\" target=\"_blank\" rel=\"noopener\">SVG 示例</a></li>\n</ul>\n<h5 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h5><p>在SVG中可以使用<code>&lt;text&gt;</code>标签绘制文字<br>dx: 相对当前位置在x方向上平移的距离，dy同理。<br><a href=\"https://segmentfault.com/a/1190000009293590\" target=\"_blank\" rel=\"noopener\">text-anchor属性</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-2\"</span> <span class=\"attr\">text-anchor</span>=<span class=\"string\">\"end\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\".35em\"</span> <span class=\"attr\">rank</span>=<span class=\"string\">\"B\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"0.35em\"</span>&gt;</span>(不知情定制B004)内容战<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"1.0499999999999998em\"</span>&gt;</span>略合作伙伴分类不合规<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"D3数据选择和属性设定\"><a href=\"#D3数据选择和属性设定\" class=\"headerlink\" title=\"D3数据选择和属性设定\"></a>D3数据选择和属性设定</h3><p>我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。<br>d3.select()是选中单个元素；d3.selectAll()是选中多个元素。<br>选择集是一个或多个页面元素的组合，能够与数据集相关联。<br>利用D3提供的方法设置元素属性和样式值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加或者移除命名的样式</span></span><br></pre></td></tr></table></figure></p>\n<p>有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>方法链，也叫链式调用。和JQuery写法类似。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .data(someColors)</span><br><span class=\"line\">  .enter()</span><br><span class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">  .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h3 id=\"D3数据处理\"><a href=\"#D3数据处理\" class=\"headerlink\" title=\"D3数据处理\"></a>D3数据处理</h3><ul>\n<li>数据映射<br>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsToicK4bbZXicsHTkMajMTP75ibRcXZlFSdKxXQczGXJ64CcSG51074fl1A/0?wx_fmt=png\" alt=\"线性比例尺示意\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。</p>\n<ul>\n<li>数据分类<br>将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTvC0bxjDkN7K9SW4BRglwcTu3DsK1yA6h5P7Pa9j0DGVuSaXTc8gn9Q/0?wx_fmt=png\" alt=\"定量数据分类\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。<br>下面的例子，将示例数据首先按year分组再按variety分组，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yields = [&#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, </span><br><span class=\"line\">               ...]</span><br><span class=\"line\"><span class=\"keyword\">var</span> nest = d3.nest()</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.year; &#125;)</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.variety; &#125;)</span><br><span class=\"line\">    .entries(yields);</span><br></pre></td></tr></table></figure></p>\n<p>返回的嵌套数组中,以键值对的形式对数据进行分组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"attr\">key</span>: <span class=\"number\">1931</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, ...]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">43.07</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">55.20</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;, ...]&#125;, ...]&#125;,</span><br><span class=\"line\"> &#123;<span class=\"attr\">key</span>: <span class=\"number\">1932</span>, <span class=\"attr\">values</span>: ...&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。</p>\n<ul>\n<li>数据测量<br>在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。<br>加入想从cities.csv获取城市人口的最小，最大，平均值：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">  d3.min(data, el =&gt; +el.population); </span><br><span class=\"line\">  d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">  d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); <span class=\"comment\">// 返回[500000, 1300000]</span></span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\" target=\"_blank\" rel=\"noopener\">简单数据可视化示例</a></p>\n<h3 id=\"D3数据绑定过程\"><a href=\"#D3数据绑定过程\" class=\"headerlink\" title=\"D3数据绑定过程\"></a>D3数据绑定过程</h3><p>一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      dataViz(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">  d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">      .data(incomingData) <span class=\"comment\">// 绑定数据到选择集</span></span><br><span class=\"line\">      .enter() <span class=\"comment\">// 定义当选择集中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">      .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择集中创建一个元素</span></span><br><span class=\"line\">      .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">      .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经常传入id没有匹配到任何元素，那么称其为空选择集。<br>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”</li>\n<li>如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”</li>\n<li>如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”</li>\n</ul>\n<p>大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTyUz4Pa5o4PUA4ia9iaU3VX4nRnbPx1SuEbndtj97bWiaov6yvIU1ImwTA/0?wx_fmt=png\" alt=\"进入退出更新示意图\"></p>\n<h3 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h3><h4 id=\"颜色插值\"><a href=\"#颜色插值\" class=\"headerlink\" title=\"颜色插值\"></a>颜色插值</h4><p>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>, maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：<code>d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c</code><br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。<br><a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\" target=\"_blank\" rel=\"noopener\">Color Scales</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><p>D3选择器可以通过on来为事件添加监听器：<code>selection.on(type[, listener[, capture]])</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selection.on(<span class=\"string\">\"click\"</span>,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d3.mouse(<span class=\"keyword\">this</span>)); <span class=\"comment\">// 输出相对坐标</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。</p>\n<p>如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click”, null)。</p>\n<h4 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h4><p>下面给出拖拽和缩放的例子：<br><a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\" target=\"_blank\" rel=\"noopener\">拖拽简单示例</a><br><a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\" target=\"_blank\" rel=\"noopener\">缩放简单示例</a></p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>D3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。<br>力导向图（Force-Directed Graph），是一种常用的绘图算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。</p>\n<blockquote>\n<p>力导向图的绘制</p>\n<ol>\n<li>生成数据</li>\n<li>设置力导向图</li>\n<li>添加绘制方法</li>\n<li>添加交互</li>\n</ol>\n</blockquote>\n<p><a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\" target=\"_blank\" rel=\"noopener\">力导向图示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Ben Fry提出的数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互。D3数据可视化也会经历这几个过程。首先D3读取源数据，进行解析得到需要处理的对象数组，然后将得到的数据进行过滤返回我们感兴趣的数据，然后对过滤得到的数据进行格式化，分类或分组，方便利用数据来驱动文档。<br>通常我们根据数据数值大小或时间远近等熟悉转换为图形上元素的大小或者位置。如果需要生成网络图谱等可视化图表，我们可以利用D3提供的布局来绘制。以力导向图为例，首先构建节点和连线的对象数据，然后将其设定给力导向图，力导向图为给节点连线生成初始的位置信息，然后根据节点和连线对象数据来自定义（绘制）节点和内容。同时我们利用tick机制绑定tick回调函数，在回调函数中定义机制对节点和连线的坐标进行更新，并更新图表。<br>D3.js是一种很强大的可视化利器，在GitHub数据可视化分类中关注度最高的。在AI+物联网时代，数据可视化或者说人机交互将会越来越重要。掌握常见的数据可视化技术，理解可视化中的图形图像算法对于想在可视化方向深耕的小伙伴来说是很有必要的。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"noopener\">D3 API 中文文档</a></li>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/4786\" target=\"_blank\" rel=\"noopener\">精通D3.js（第二版）</a></li>\n<li><a href=\"https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X\" target=\"_blank\" rel=\"noopener\">D3.js 4.x Data Visualization(Third Edition)</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/638\" target=\"_blank\" rel=\"noopener\">图说D3数据可视化利器从入门到进阶</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"D3数据可视化实践\"><a href=\"#D3数据可视化实践\" class=\"headerlink\" title=\"D3数据可视化实践\"></a>D3数据可视化实践</h2><blockquote>\n<p>方鹏 2018/07/05</p>\n</blockquote>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>在我们的APP上线后，经过数据分析，实时获取反映使用情况的活跃用户数；活跃数可分为总的日活或月活，分APP的日活或月活，分APP分省的日活或月活等等。想把这些数据表达清楚，可能会涉及实时的动态的变化数据；数据的按维度分类展示；如何按数字大小或者属性进行区分，着重展示我们感兴趣的数据。以上涉及到的就是我们常说的数据可视化。数据可视化的目的就是对数据进行可视化处理，以使得明确有效地传递信息。<br>利用图表来对数据进行可视化是我们熟知的方式。产品经理对可视化需求进行分析，选择合适的图表来表达和传递信息。而我们作为前端开发人员，也需要理解需求及设计，选用能满足需求的图表组件或可视化方案来实现产品设计。<br>选择技术方案的时候，我们或许会发现，因为图表内容复杂，没有现成的图表组件能够利用；或者现有的图表组件不能满足我们的部分需求；或者因为大数据量的场景，造成图表渲染较慢。解决这些需求中的痛点，我们就得思考用何种技术方案，怎样解决遇到的问题。思考为什么选择这个方案，它能帮助我们解决什么问题，或者说它有什么优势。</p>\n<h3 id=\"怎么选择\"><a href=\"#怎么选择\" class=\"headerlink\" title=\"怎么选择\"></a>怎么选择</h3><p>现有的可视化库很多，像Echarts，Highcharts，D3这些我们多少都在项目中经常使用或者听说过大名。Echarts等可视化库封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。D3在这一点上取得了平衡。D3提供了极度灵活的Web标准化能力，例如CSS3, HTML5, SVG。<br>试想用原生的HTML、SVG、Canvas来实现数据绘图是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。那么方案怎么选择呢？我们应该熟悉各可视化库的优势，在满足需求的同时也要考虑开发成本。</p>\n<h3 id=\"关于D3-js\"><a href=\"#关于D3-js\" class=\"headerlink\" title=\"关于D3.js\"></a>关于D3.js</h3><h4 id=\"什么是D3-js\"><a href=\"#什么是D3-js\" class=\"headerlink\" title=\"什么是D3.js\"></a>什么是D3.js</h4><p>D3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。</p>\n<blockquote>\n<p>数据由用户或开发者提供<br>文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG、Canvas<br>由D3来驱动数据和文档。从某种意义上说，它将文档和数据联系起来。</p>\n</blockquote>\n<p><strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。</p>\n<p>用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\" target=\"_blank\" rel=\"noopener\">Mike Bostock</a></p>\n<p>其开源地址：<br><a href=\"https://github.com/d3/d3\" target=\"_blank\" rel=\"noopener\">https://github.com/d3/d3</a></p>\n<h4 id=\"历史及版本比较\"><a href=\"#历史及版本比较\" class=\"headerlink\" title=\"历史及版本比较\"></a>历史及版本比较</h4><ol>\n<li>2011年2月，Mike Bostock发布了v1.0.0版本。</li>\n<li>2012年12月，v3.0.0版本发布，网上3.x的资料比较多。</li>\n<li>2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">v3.x</th>\n<th style=\"text-align:center\">v4.x</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">嵌套结构</td>\n<td style=\"text-align:center\">模块化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">稳定，资料多</td>\n<td style=\"text-align:center\">有优化，资料相对较少</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">只支持SVG渲染</td>\n<td style=\"text-align:center\">支持Canvas渲染</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>注意：<strong style=\"color:red;\">两个版本的代码不兼容</strong></p>\n</blockquote>\n<h4 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h4><ul>\n<li>相对比较底层<br>数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。</li>\n<li>更像数学库<br>强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。</li>\n<li>即封装操作，也给予自由<br>计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。</li>\n</ul>\n<h4 id=\"D3部分模块\"><a href=\"#D3部分模块\" class=\"headerlink\" title=\"D3部分模块\"></a>D3部分模块</h4><table>\n<thead>\n<tr>\n<th>模块</th>\n<th>描述</th>\n<th>依赖</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>d3-axis</td>\n<td>坐标轴</td>\n<td>d3-scale, d3-selection, d3-transition</td>\n</tr>\n<tr>\n<td>d3-color</td>\n<td>颜色集操作和呈现</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-format</td>\n<td>数字格式化</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-interpolate</td>\n<td>插值函数</td>\n<td>d3-color</td>\n</tr>\n<tr>\n<td>d3-path</td>\n<td>路径生成</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-polygon</td>\n<td>二维多边形几何操作</td>\n<td>None.</td>\n</tr>\n<tr>\n<td>d3-request</td>\n<td>XMLHttpRequest封装</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-scale</td>\n<td>XMLHttpRequest封装</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-request</td>\n<td>从抽象到具体数据的映射</td>\n<td>d3-array, d3-collection, d3-color, d3-format, d3-interpolate, d3-time, d3-time-format</td>\n</tr>\n<tr>\n<td>d3-selection</td>\n<td>通过选择和加入数据进行DOM转换</td>\n<td>d3-dsv, d3-dispatch</td>\n</tr>\n<tr>\n<td>d3-transition</td>\n<td>D3.js选择集的动画过渡</td>\n<td>d3-ease, d3-timer, d3-interpolate, d3-selection</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"D3基础\"><a href=\"#D3基础\" class=\"headerlink\" title=\"D3基础\"></a>D3基础</h3><h4 id=\"SVG基础\"><a href=\"#SVG基础\" class=\"headerlink\" title=\"SVG基础\"></a>SVG基础</h4><p>SVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。<br>位图与矢量图的区别：<br>位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。</p>\n<h5 id=\"SVG图形元素\"><a href=\"#SVG图形元素\" class=\"headerlink\" title=\"SVG图形元素\"></a>SVG图形元素</h5><p>SVG预定义七种形状元素：<br>矩形<code>&lt;rect&gt;</code>、圆形<code>&lt;circle&gt;</code>、椭圆形<code>&lt;ellipse&gt;</code>、线段<code>&lt;line&gt;</code>、折线<code>&lt;polyline&gt;</code>、多边形<code>&lt;polygon&gt;</code>、路径<code>&lt;path&gt;</code><br>路径指令：   </p>\n<ul>\n<li>M=moveto</li>\n<li>L=lineto</li>\n<li>H=horizontal lineto</li>\n<li>V=vertical lineto</li>\n<li>C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点</li>\n<li>S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称</li>\n<li>Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点</li>\n<li>T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线<br><a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\" target=\"_blank\" rel=\"noopener\">SVG 示例</a></li>\n</ul>\n<h5 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h5><p>在SVG中可以使用<code>&lt;text&gt;</code>标签绘制文字<br>dx: 相对当前位置在x方向上平移的距离，dy同理。<br><a href=\"https://segmentfault.com/a/1190000009293590\" target=\"_blank\" rel=\"noopener\">text-anchor属性</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-2\"</span> <span class=\"attr\">text-anchor</span>=<span class=\"string\">\"end\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\".35em\"</span> <span class=\"attr\">rank</span>=<span class=\"string\">\"B\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"0.35em\"</span>&gt;</span>(不知情定制B004)内容战<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"1.0499999999999998em\"</span>&gt;</span>略合作伙伴分类不合规<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"D3数据选择和属性设定\"><a href=\"#D3数据选择和属性设定\" class=\"headerlink\" title=\"D3数据选择和属性设定\"></a>D3数据选择和属性设定</h3><p>我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。<br>d3.select()是选中单个元素；d3.selectAll()是选中多个元素。<br>选择集是一个或多个页面元素的组合，能够与数据集相关联。<br>利用D3提供的方法设置元素属性和样式值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加或者移除命名的样式</span></span><br></pre></td></tr></table></figure></p>\n<p>有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>方法链，也叫链式调用。和JQuery写法类似。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .data(someColors)</span><br><span class=\"line\">  .enter()</span><br><span class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">  .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h3 id=\"D3数据处理\"><a href=\"#D3数据处理\" class=\"headerlink\" title=\"D3数据处理\"></a>D3数据处理</h3><ul>\n<li>数据映射<br>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsToicK4bbZXicsHTkMajMTP75ibRcXZlFSdKxXQczGXJ64CcSG51074fl1A/0?wx_fmt=png\" alt=\"线性比例尺示意\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。</p>\n<ul>\n<li>数据分类<br>将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTvC0bxjDkN7K9SW4BRglwcTu3DsK1yA6h5P7Pa9j0DGVuSaXTc8gn9Q/0?wx_fmt=png\" alt=\"定量数据分类\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。<br>下面的例子，将示例数据首先按year分组再按variety分组，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yields = [&#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, </span><br><span class=\"line\">               ...]</span><br><span class=\"line\"><span class=\"keyword\">var</span> nest = d3.nest()</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.year; &#125;)</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.variety; &#125;)</span><br><span class=\"line\">    .entries(yields);</span><br></pre></td></tr></table></figure></p>\n<p>返回的嵌套数组中,以键值对的形式对数据进行分组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"attr\">key</span>: <span class=\"number\">1931</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, ...]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">43.07</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">55.20</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;, ...]&#125;, ...]&#125;,</span><br><span class=\"line\"> &#123;<span class=\"attr\">key</span>: <span class=\"number\">1932</span>, <span class=\"attr\">values</span>: ...&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。</p>\n<ul>\n<li>数据测量<br>在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。<br>加入想从cities.csv获取城市人口的最小，最大，平均值：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">  d3.min(data, el =&gt; +el.population); </span><br><span class=\"line\">  d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">  d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); <span class=\"comment\">// 返回[500000, 1300000]</span></span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\" target=\"_blank\" rel=\"noopener\">简单数据可视化示例</a></p>\n<h3 id=\"D3数据绑定过程\"><a href=\"#D3数据绑定过程\" class=\"headerlink\" title=\"D3数据绑定过程\"></a>D3数据绑定过程</h3><p>一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      dataViz(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">  d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">      .data(incomingData) <span class=\"comment\">// 绑定数据到选择集</span></span><br><span class=\"line\">      .enter() <span class=\"comment\">// 定义当选择集中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">      .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择集中创建一个元素</span></span><br><span class=\"line\">      .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">      .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经常传入id没有匹配到任何元素，那么称其为空选择集。<br>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”</li>\n<li>如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”</li>\n<li>如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”</li>\n</ul>\n<p>大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。<br><img src=\"https://mmbiz.qpic.cn/mmbiz_png/GWicdfXT7twRA5heUgAGibFCfBW6IB2XsTyUz4Pa5o4PUA4ia9iaU3VX4nRnbPx1SuEbndtj97bWiaov6yvIU1ImwTA/0?wx_fmt=png\" alt=\"进入退出更新示意图\"></p>\n<h3 id=\"交互\"><a href=\"#交互\" class=\"headerlink\" title=\"交互\"></a>交互</h3><h4 id=\"颜色插值\"><a href=\"#颜色插值\" class=\"headerlink\" title=\"颜色插值\"></a>颜色插值</h4><p>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>, maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：<code>d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c</code><br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。<br><a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\" target=\"_blank\" rel=\"noopener\">Color Scales</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"事件监听\"><a href=\"#事件监听\" class=\"headerlink\" title=\"事件监听\"></a>事件监听</h4><p>D3选择器可以通过on来为事件添加监听器：<code>selection.on(type[, listener[, capture]])</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selection.on(<span class=\"string\">\"click\"</span>,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d3.mouse(<span class=\"keyword\">this</span>)); <span class=\"comment\">// 输出相对坐标</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。</p>\n<p>如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click”, null)。</p>\n<h4 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h4><p>下面给出拖拽和缩放的例子：<br><a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\" target=\"_blank\" rel=\"noopener\">拖拽简单示例</a><br><a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\" target=\"_blank\" rel=\"noopener\">缩放简单示例</a></p>\n<h4 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h4><p>D3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）。<br>力导向图（Force-Directed Graph），是一种常用的绘图算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。</p>\n<blockquote>\n<p>力导向图的绘制</p>\n<ol>\n<li>生成数据</li>\n<li>设置力导向图</li>\n<li>添加绘制方法</li>\n<li>添加交互</li>\n</ol>\n</blockquote>\n<p><a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\" target=\"_blank\" rel=\"noopener\">力导向图示例</a></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Ben Fry提出的数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互。D3数据可视化也会经历这几个过程。首先D3读取源数据，进行解析得到需要处理的对象数组，然后将得到的数据进行过滤返回我们感兴趣的数据，然后对过滤得到的数据进行格式化，分类或分组，方便利用数据来驱动文档。<br>通常我们根据数据数值大小或时间远近等熟悉转换为图形上元素的大小或者位置。如果需要生成网络图谱等可视化图表，我们可以利用D3提供的布局来绘制。以力导向图为例，首先构建节点和连线的对象数据，然后将其设定给力导向图，力导向图为给节点连线生成初始的位置信息，然后根据节点和连线对象数据来自定义（绘制）节点和内容。同时我们利用tick机制绑定tick回调函数，在回调函数中定义机制对节点和连线的坐标进行更新，并更新图表。<br>D3.js是一种很强大的可视化利器，在GitHub数据可视化分类中关注度最高的。在AI+物联网时代，数据可视化或者说人机交互将会越来越重要。掌握常见的数据可视化技术，理解可视化中的图形图像算法对于想在可视化方向深耕的小伙伴来说是很有必要的。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"noopener\">D3 API 中文文档</a></li>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/4786\" target=\"_blank\" rel=\"noopener\">精通D3.js（第二版）</a></li>\n<li><a href=\"https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X\" target=\"_blank\" rel=\"noopener\">D3.js 4.x Data Visualization(Third Edition)</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/638\" target=\"_blank\" rel=\"noopener\">图说D3数据可视化利器从入门到进阶</a></li>\n</ul>\n"},{"title":"D3.js数据可视化实践（讲义）","author":"Peng Fang","date":"2018-06-29T11:01:00.000Z","_content":"# D3数据可视化实践\n> 方鹏 2018/06/29\n\n- 目标  \n了解D3常用API和重要知识点，能阅读和编写简单的D3.js可视化程序。\n\n- 内容\n 1. D3简介\n 2. 基础知识点（SVG + D3）\n 3. 数据处理（涉及加载数据、处理数据）\n 4. 数据绑定\n 5. 交互\n 6. 布局\n\n### 什么是D3\nD3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。\n\n> 数据由用户或开发者提供  \n> 文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG   \n> 它们由D3来驱动。从某种意义上说，它将文档和数据联系起来。\n\n只要记住：<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。\n\n\n其开源地址：\n[https://github.com/d3/d3](https://github.com/d3/d3)\n\n用D3.js的创始人[Mike Bostock](https://bl.ocks.org/mbostock)的话说：D3提供了极度灵活，Web标准化的能力，例如CSS3, HTML5, SVG。\n试想用原生的HTML、SVG、Canvas来实现数据变成图形是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。\n\n### D3简史\n\n1. 2011年2月，Mike Bostock发布了v1.0.0版本。\n2. 2012年12月，v3.0.0版本发布，网上3.x的资料比较多。\n3. 2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。\n\n### D3的优势\nEcharts等封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。\nD3在这一点上取得了平衡。\n- 相对比较底层   \n数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。\n- 更像数学库   \n强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。\n- 即封装操作，也给予自由   \n计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。\n\n应用截图如下：  \n![Alt text](http://baapps.com/theme/images/cargo-analytics-apps-thumb.jpg \"cargo analytics\")\n![Alt text](http://baapps.com/theme/images/sct-app-thumb.jpg \"sct app\")\n![Alt text](http://baapps.com/theme/images/kpi-tracker-thumb.jpg \"kpi tracker\")\n![Alt text](http://baapps.com/theme/images/eval-app-thumb.jpg \"eval app\")\n\n### 适用范围\n数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互   \n<strong style=\"color:red;\">表现、改善、交互</strong>属于D3的适用范围\n\n### 它不能干什么\n  D3不能生成预定义的或者封装好的可视化效果，也就是不提供预先配置的图表类型。    \n  D3不支持老的浏览器。   \n  D3代码在客户端执行，因此不能隐藏源数据。如果担心数据泄露，最好不要可视化，可视化的目的是交流数据。\n\n\n### SVG\nSVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。   \n位图与矢量图的区别：   \n位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。\n\n#### SVG图形元素\nSVG预定义七种形状元素：   \n矩形`<rect>`、圆形`<circle>`、椭圆形`<ellipse>`、线段`<line>`、折线`<polyline>`、多边形`<polygon>`、路径`<path>`   \n路径指令：   \n- M=moveto\n- L=lineto\n- H=horizontal lineto\n- V=vertical lineto\n- C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点\n- S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称\n- Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点\n- T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线   \n[示例](http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106)\n\n#### 文字\n在SVG中可以使用`<text>`标签绘制文字   \ndx: 相对当前位置在x方向上平移的距离，dy同理。   \n[text-anchor属性](https://segmentfault.com/a/1190000009293590)\n``` html\n<text class=\"label-2\" text-anchor=\"end\" dy=\".35em\" rank=\"B\">\n  <tspan x=\"0\" dy=\"0.35em\">(不知情定制B004)内容战</tspan>\n  <tspan x=\"0\" dy=\"1.0499999999999998em\">略合作伙伴分类不合规</tspan>\n</text>\n```\n\n### D3数据选择和属性设定\n我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。\nd3.select()是选中单个元素；d3.selectAll()是选中多个元素。\n选择集是一个或多个页面元素的组合，能够与数据集相关联。\n利用D3提供的方法设置元素属性和样式值：\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\nd3.select(\"circle\").attr(\"class\", \"active\");\nd3.select(\"circle\").classed(\"active\", true); // 添加或者移除命名的样式\n\n```\n有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：\n\n``` javascript \nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\n方法链，也叫链式调用。和JQuery写法类似。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n  .data(someColors)\n  .enter()\n  .append(\"div\")\n  .style(\"background\", function(d) {return d})\n  .attr(\"cx\", function(d,i) {return i})\n  .html(function(d) {return d})\n```\n[Hello World 示例](http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31)\n\n### 使用数据\nD3数据处理流程：\n![数据处理流程](http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n\n#### 加载数据\nD3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。\n``` javascript \nd3.csv(\"cities.csv\", (error, data) => { console.log(error, data) });\nd3.json(\"tweets.json\", data => console.log(data));\n```\nerror变量是可选项\n\n#### 数据格式化\n- 数据映射  \n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。\n![线性比例尺示意](http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。\n- 数据分类  \n将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。\n![定量数据分类](http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。\n下面的例子，将示例数据首先按year分组再按variety分组，如下：\n``` javascript\nvar yields = [{yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n              {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n              {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, \n               ...]\nvar nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);\n```\n返回的嵌套数组中,以键值对的形式对数据进行分组:\n``` javascript \n[{key: 1931, values: [\n    {key: \"Manchuria\", values: [\n        {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n        {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n        {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n    {key: \"Glabron\", values: [\n        {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n        {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: 1932, values: ...}]\n```\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。\n\n#### 测量数据\n在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。\n加入想从cities.csv获取城市人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n  d3.min(data, el => +el.population); \n  d3.max(data, el => +el.population);\n  d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n``` Javascript\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n\n[简单数据可视化示例](http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac)\n\n### 数据可视化\n接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。\n\n#### data工作过程\n一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n  if (error) {\n      console.error(error)\n  } else {\n      dataViz(data)\n  }\n});\nfunction dataViz(incomingData) {\n  d3.select(\"body\").selectAll(\"div.cities\")\n      .data(incomingData) // 绑定数据到选择集\n      .enter() // 定义当选择集中的数据多于DOM元素时如何响应\n      .append(\"div\") // 在当前选择集中创建一个元素\n      .attr(\"class\", \"cities\") // 设置新创建元素class\n      .html(d => d.label); // 设置创建div的内容\n}\n```\n经常传入id没有匹配到任何元素，那么称其为空选择集。\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n- 如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”\n- 如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”\n- 如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”\n\n大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。\n![进入退出更新示意图](http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n### 文档驱动设计及交互\nD3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。\n``` javascript \nd3.select(\"g.overallG\").raise()\nd3.select(\"g.overallG\").lower()\n```\n禁用元素的鼠标事件：\n``` javascript\nteamG.select(\"text\").style(\"pointer-events\",\"none\");\n```\n\n#### 使用颜色\nd3.rbg()的使用如下：\n``` javascript\nteamColor = d3.rgb(\"red\");\nteamColor = d3.rgb(\"#ff0000\");\nteamColor = d3.rgb(\"rgb(255,0,0)\");\nteamColor = d3.rgb(255,0,0);\n```\n这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。\n``` javascript\nd3.selectAll(\"g.overallG\").select(\"circle\")\n  .style(\"fill\", p => p.region === d.region ?\n  teamColor.darker(.75) : teamColor.brighter(.5)) // rgb.brighter([k]),每个颜色通道值将乘以0.7 ^ -k\n```\n`d3.hsl, d3.lab, d3.cubehelix, d3.hcl`可以呈现不同的颜色空间\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0, maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：`d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c`\n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。   \n[Color Scales](https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9)\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n\n#### 监听器\nD3选择器可以通过on来为事件添加监听器：`selection.on(type[, listener[, capture]])`\n``` javascript\nselection.on(\"click\",  function () {\n    console.log(d3.mouse(this)); // 输出相对坐标\n})\n```\n在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。\n\n如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click\", null)。\n\n#### 行为\n下面给出拖拽和缩放的例子：\n[拖拽简单示例](http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc)\n[缩放简单示例](http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549)\n\n### 布局\nD3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）\n\n#### 力导向图\n力导向图（Force-Directed Graph），是绘图的一种算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。\n\n[力导向图示例](http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da)\n\n### 项目案例分析\n\n\n### 参考资料\n- [D3 API 中文文档](https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)\n- [精通D3.js（第二版）](http://www.broadview.com.cn/book/4786)\n- [D3.js 4.x Data Visualization(Third Edition)](https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X)\n- [图说D3数据可视化利器从入门到进阶](http://www.broadview.com.cn/book/638)","source":"_posts/D3-js数据可视化实践（讲义）.md","raw":"title: D3.js数据可视化实践（讲义）\nauthor: Peng Fang\ntags:\n  - D3.js\ncategories:\n  - 数据可视化\ndate: 2018-06-29 19:01:00\n---\n# D3数据可视化实践\n> 方鹏 2018/06/29\n\n- 目标  \n了解D3常用API和重要知识点，能阅读和编写简单的D3.js可视化程序。\n\n- 内容\n 1. D3简介\n 2. 基础知识点（SVG + D3）\n 3. 数据处理（涉及加载数据、处理数据）\n 4. 数据绑定\n 5. 交互\n 6. 布局\n\n### 什么是D3\nD3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。\n\n> 数据由用户或开发者提供  \n> 文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG   \n> 它们由D3来驱动。从某种意义上说，它将文档和数据联系起来。\n\n只要记住：<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。\n\n\n其开源地址：\n[https://github.com/d3/d3](https://github.com/d3/d3)\n\n用D3.js的创始人[Mike Bostock](https://bl.ocks.org/mbostock)的话说：D3提供了极度灵活，Web标准化的能力，例如CSS3, HTML5, SVG。\n试想用原生的HTML、SVG、Canvas来实现数据变成图形是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。\n\n### D3简史\n\n1. 2011年2月，Mike Bostock发布了v1.0.0版本。\n2. 2012年12月，v3.0.0版本发布，网上3.x的资料比较多。\n3. 2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。\n\n### D3的优势\nEcharts等封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。\nD3在这一点上取得了平衡。\n- 相对比较底层   \n数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。\n- 更像数学库   \n强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。\n- 即封装操作，也给予自由   \n计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。\n\n应用截图如下：  \n![Alt text](http://baapps.com/theme/images/cargo-analytics-apps-thumb.jpg \"cargo analytics\")\n![Alt text](http://baapps.com/theme/images/sct-app-thumb.jpg \"sct app\")\n![Alt text](http://baapps.com/theme/images/kpi-tracker-thumb.jpg \"kpi tracker\")\n![Alt text](http://baapps.com/theme/images/eval-app-thumb.jpg \"eval app\")\n\n### 适用范围\n数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互   \n<strong style=\"color:red;\">表现、改善、交互</strong>属于D3的适用范围\n\n### 它不能干什么\n  D3不能生成预定义的或者封装好的可视化效果，也就是不提供预先配置的图表类型。    \n  D3不支持老的浏览器。   \n  D3代码在客户端执行，因此不能隐藏源数据。如果担心数据泄露，最好不要可视化，可视化的目的是交流数据。\n\n\n### SVG\nSVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。   \n位图与矢量图的区别：   \n位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。\n\n#### SVG图形元素\nSVG预定义七种形状元素：   \n矩形`<rect>`、圆形`<circle>`、椭圆形`<ellipse>`、线段`<line>`、折线`<polyline>`、多边形`<polygon>`、路径`<path>`   \n路径指令：   \n- M=moveto\n- L=lineto\n- H=horizontal lineto\n- V=vertical lineto\n- C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点\n- S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称\n- Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点\n- T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线   \n[示例](http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106)\n\n#### 文字\n在SVG中可以使用`<text>`标签绘制文字   \ndx: 相对当前位置在x方向上平移的距离，dy同理。   \n[text-anchor属性](https://segmentfault.com/a/1190000009293590)\n``` html\n<text class=\"label-2\" text-anchor=\"end\" dy=\".35em\" rank=\"B\">\n  <tspan x=\"0\" dy=\"0.35em\">(不知情定制B004)内容战</tspan>\n  <tspan x=\"0\" dy=\"1.0499999999999998em\">略合作伙伴分类不合规</tspan>\n</text>\n```\n\n### D3数据选择和属性设定\n我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。\nd3.select()是选中单个元素；d3.selectAll()是选中多个元素。\n选择集是一个或多个页面元素的组合，能够与数据集相关联。\n利用D3提供的方法设置元素属性和样式值：\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\nd3.select(\"circle\").attr(\"class\", \"active\");\nd3.select(\"circle\").classed(\"active\", true); // 添加或者移除命名的样式\n\n```\n有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：\n\n``` javascript \nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\n方法链，也叫链式调用。和JQuery写法类似。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n  .data(someColors)\n  .enter()\n  .append(\"div\")\n  .style(\"background\", function(d) {return d})\n  .attr(\"cx\", function(d,i) {return i})\n  .html(function(d) {return d})\n```\n[Hello World 示例](http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31)\n\n### 使用数据\nD3数据处理流程：\n![数据处理流程](http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n\n#### 加载数据\nD3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。\n``` javascript \nd3.csv(\"cities.csv\", (error, data) => { console.log(error, data) });\nd3.json(\"tweets.json\", data => console.log(data));\n```\nerror变量是可选项\n\n#### 数据格式化\n- 数据映射  \n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。\n![线性比例尺示意](http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。\n- 数据分类  \n将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。\n![定量数据分类](http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。\n下面的例子，将示例数据首先按year分组再按variety分组，如下：\n``` javascript\nvar yields = [{yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n              {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n              {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, \n               ...]\nvar nest = d3.nest()\n    .key(function(d) { return d.year; })\n    .key(function(d) { return d.variety; })\n    .entries(yields);\n```\n返回的嵌套数组中,以键值对的形式对数据进行分组:\n``` javascript \n[{key: 1931, values: [\n    {key: \"Manchuria\", values: [\n        {yield: 27.00, variety: \"Manchuria\", year: 1931, site: \"University Farm\"},\n        {yield: 48.87, variety: \"Manchuria\", year: 1931, site: \"Waseca\"},\n        {yield: 27.43, variety: \"Manchuria\", year: 1931, site: \"Morris\"}, ...]},\n    {key: \"Glabron\", values: [\n        {yield: 43.07, variety: \"Glabron\", year: 1931, site: \"University Farm\"},\n        {yield: 55.20, variety: \"Glabron\", year: 1931, site: \"Waseca\"}, ...]}, ...]},\n {key: 1932, values: ...}]\n```\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。\n\n#### 测量数据\n在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。\n加入想从cities.csv获取城市人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n  d3.min(data, el => +el.population); \n  d3.max(data, el => +el.population);\n  d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n``` Javascript\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n\n[简单数据可视化示例](http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac)\n\n### 数据可视化\n接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。\n\n#### data工作过程\n一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n  if (error) {\n      console.error(error)\n  } else {\n      dataViz(data)\n  }\n});\nfunction dataViz(incomingData) {\n  d3.select(\"body\").selectAll(\"div.cities\")\n      .data(incomingData) // 绑定数据到选择集\n      .enter() // 定义当选择集中的数据多于DOM元素时如何响应\n      .append(\"div\") // 在当前选择集中创建一个元素\n      .attr(\"class\", \"cities\") // 设置新创建元素class\n      .html(d => d.label); // 设置创建div的内容\n}\n```\n经常传入id没有匹配到任何元素，那么称其为空选择集。\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n- 如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”\n- 如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”\n- 如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”\n\n大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。\n![进入退出更新示意图](http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n### 文档驱动设计及交互\nD3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。\n``` javascript \nd3.select(\"g.overallG\").raise()\nd3.select(\"g.overallG\").lower()\n```\n禁用元素的鼠标事件：\n``` javascript\nteamG.select(\"text\").style(\"pointer-events\",\"none\");\n```\n\n#### 使用颜色\nd3.rbg()的使用如下：\n``` javascript\nteamColor = d3.rgb(\"red\");\nteamColor = d3.rgb(\"#ff0000\");\nteamColor = d3.rgb(\"rgb(255,0,0)\");\nteamColor = d3.rgb(255,0,0);\n```\n这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。\n``` javascript\nd3.selectAll(\"g.overallG\").select(\"circle\")\n  .style(\"fill\", p => p.region === d.region ?\n  teamColor.darker(.75) : teamColor.brighter(.5)) // rgb.brighter([k]),每个颜色通道值将乘以0.7 ^ -k\n```\n`d3.hsl, d3.lab, d3.cubehelix, d3.hcl`可以呈现不同的颜色空间\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0, maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：`d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c`\n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。   \n[Color Scales](https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9)\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n\n#### 监听器\nD3选择器可以通过on来为事件添加监听器：`selection.on(type[, listener[, capture]])`\n``` javascript\nselection.on(\"click\",  function () {\n    console.log(d3.mouse(this)); // 输出相对坐标\n})\n```\n在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。\n\n如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click\", null)。\n\n#### 行为\n下面给出拖拽和缩放的例子：\n[拖拽简单示例](http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc)\n[缩放简单示例](http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549)\n\n### 布局\nD3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）\n\n#### 力导向图\n力导向图（Force-Directed Graph），是绘图的一种算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。\n\n[力导向图示例](http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da)\n\n### 项目案例分析\n\n\n### 参考资料\n- [D3 API 中文文档](https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C)\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)\n- [精通D3.js（第二版）](http://www.broadview.com.cn/book/4786)\n- [D3.js 4.x Data Visualization(Third Edition)](https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X)\n- [图说D3数据可视化利器从入门到进阶](http://www.broadview.com.cn/book/638)","slug":"D3-js数据可视化实践（讲义）","published":1,"updated":"2018-09-19T11:02:35.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0400052v2p4m21e824","content":"<h1 id=\"D3数据可视化实践\"><a href=\"#D3数据可视化实践\" class=\"headerlink\" title=\"D3数据可视化实践\"></a>D3数据可视化实践</h1><blockquote>\n<p>方鹏 2018/06/29</p>\n</blockquote>\n<ul>\n<li><p>目标<br>了解D3常用API和重要知识点，能阅读和编写简单的D3.js可视化程序。</p>\n</li>\n<li><p>内容</p>\n<ol>\n<li>D3简介</li>\n<li>基础知识点（SVG + D3）</li>\n<li>数据处理（涉及加载数据、处理数据）</li>\n<li>数据绑定</li>\n<li>交互</li>\n<li>布局</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h3><p>D3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。</p>\n<blockquote>\n<p>数据由用户或开发者提供<br>文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG<br>它们由D3来驱动。从某种意义上说，它将文档和数据联系起来。</p>\n</blockquote>\n<p>只要记住：<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。</p>\n<p>其开源地址：<br><a href=\"https://github.com/d3/d3\" target=\"_blank\" rel=\"noopener\">https://github.com/d3/d3</a></p>\n<p>用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\" target=\"_blank\" rel=\"noopener\">Mike Bostock</a>的话说：D3提供了极度灵活，Web标准化的能力，例如CSS3, HTML5, SVG。<br>试想用原生的HTML、SVG、Canvas来实现数据变成图形是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。</p>\n<h3 id=\"D3简史\"><a href=\"#D3简史\" class=\"headerlink\" title=\"D3简史\"></a>D3简史</h3><ol>\n<li>2011年2月，Mike Bostock发布了v1.0.0版本。</li>\n<li>2012年12月，v3.0.0版本发布，网上3.x的资料比较多。</li>\n<li>2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。</li>\n</ol>\n<h3 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h3><p>Echarts等封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。<br>D3在这一点上取得了平衡。</p>\n<ul>\n<li>相对比较底层<br>数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。</li>\n<li>更像数学库<br>强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。</li>\n<li>即封装操作，也给予自由<br>计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。</li>\n</ul>\n<p>应用截图如下：<br><img src=\"http://baapps.com/theme/images/cargo-analytics-apps-thumb.jpg\" alt=\"Alt text\" title=\"cargo analytics\"><br><img src=\"http://baapps.com/theme/images/sct-app-thumb.jpg\" alt=\"Alt text\" title=\"sct app\"><br><img src=\"http://baapps.com/theme/images/kpi-tracker-thumb.jpg\" alt=\"Alt text\" title=\"kpi tracker\"><br><img src=\"http://baapps.com/theme/images/eval-app-thumb.jpg\" alt=\"Alt text\" title=\"eval app\"></p>\n<h3 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h3><p>数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互<br><strong style=\"color:red;\">表现、改善、交互</strong>属于D3的适用范围</p>\n<h3 id=\"它不能干什么\"><a href=\"#它不能干什么\" class=\"headerlink\" title=\"它不能干什么\"></a>它不能干什么</h3><p>  D3不能生成预定义的或者封装好的可视化效果，也就是不提供预先配置的图表类型。<br>  D3不支持老的浏览器。<br>  D3代码在客户端执行，因此不能隐藏源数据。如果担心数据泄露，最好不要可视化，可视化的目的是交流数据。</p>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>SVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。<br>位图与矢量图的区别：<br>位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。</p>\n<h4 id=\"SVG图形元素\"><a href=\"#SVG图形元素\" class=\"headerlink\" title=\"SVG图形元素\"></a>SVG图形元素</h4><p>SVG预定义七种形状元素：<br>矩形<code>&lt;rect&gt;</code>、圆形<code>&lt;circle&gt;</code>、椭圆形<code>&lt;ellipse&gt;</code>、线段<code>&lt;line&gt;</code>、折线<code>&lt;polyline&gt;</code>、多边形<code>&lt;polygon&gt;</code>、路径<code>&lt;path&gt;</code><br>路径指令：   </p>\n<ul>\n<li>M=moveto</li>\n<li>L=lineto</li>\n<li>H=horizontal lineto</li>\n<li>V=vertical lineto</li>\n<li>C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点</li>\n<li>S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称</li>\n<li>Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点</li>\n<li>T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线<br><a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\" target=\"_blank\" rel=\"noopener\">示例</a></li>\n</ul>\n<h4 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h4><p>在SVG中可以使用<code>&lt;text&gt;</code>标签绘制文字<br>dx: 相对当前位置在x方向上平移的距离，dy同理。<br><a href=\"https://segmentfault.com/a/1190000009293590\" target=\"_blank\" rel=\"noopener\">text-anchor属性</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-2\"</span> <span class=\"attr\">text-anchor</span>=<span class=\"string\">\"end\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\".35em\"</span> <span class=\"attr\">rank</span>=<span class=\"string\">\"B\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"0.35em\"</span>&gt;</span>(不知情定制B004)内容战<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"1.0499999999999998em\"</span>&gt;</span>略合作伙伴分类不合规<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"D3数据选择和属性设定\"><a href=\"#D3数据选择和属性设定\" class=\"headerlink\" title=\"D3数据选择和属性设定\"></a>D3数据选择和属性设定</h3><p>我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。<br>d3.select()是选中单个元素；d3.selectAll()是选中多个元素。<br>选择集是一个或多个页面元素的组合，能够与数据集相关联。<br>利用D3提供的方法设置元素属性和样式值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加或者移除命名的样式</span></span><br></pre></td></tr></table></figure></p>\n<p>有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>方法链，也叫链式调用。和JQuery写法类似。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .data(someColors)</span><br><span class=\"line\">  .enter()</span><br><span class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">  .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\" target=\"_blank\" rel=\"noopener\">Hello World 示例</a></p>\n<h3 id=\"使用数据\"><a href=\"#使用数据\" class=\"headerlink\" title=\"使用数据\"></a>使用数据</h3><p>D3数据处理流程：<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"数据处理流程\"></p>\n<h4 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h4><p>D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error, data) =&gt; &#123; <span class=\"built_in\">console</span>.log(error, data) &#125;);</span><br><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; <span class=\"built_in\">console</span>.log(data));</span><br></pre></td></tr></table></figure></p>\n<p>error变量是可选项</p>\n<h4 id=\"数据格式化\"><a href=\"#数据格式化\" class=\"headerlink\" title=\"数据格式化\"></a>数据格式化</h4><ul>\n<li>数据映射<br>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png\" alt=\"线性比例尺示意\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。</p>\n<ul>\n<li>数据分类<br>将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png\" alt=\"定量数据分类\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。<br>下面的例子，将示例数据首先按year分组再按variety分组，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yields = [&#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, </span><br><span class=\"line\">               ...]</span><br><span class=\"line\"><span class=\"keyword\">var</span> nest = d3.nest()</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.year; &#125;)</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.variety; &#125;)</span><br><span class=\"line\">    .entries(yields);</span><br></pre></td></tr></table></figure></p>\n<p>返回的嵌套数组中,以键值对的形式对数据进行分组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"attr\">key</span>: <span class=\"number\">1931</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, ...]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">43.07</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">55.20</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;, ...]&#125;, ...]&#125;,</span><br><span class=\"line\"> &#123;<span class=\"attr\">key</span>: <span class=\"number\">1932</span>, <span class=\"attr\">values</span>: ...&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。</p>\n<h4 id=\"测量数据\"><a href=\"#测量数据\" class=\"headerlink\" title=\"测量数据\"></a>测量数据</h4><p>在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。<br>加入想从cities.csv获取城市人口的最小，最大，平均值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">  d3.min(data, el =&gt; +el.population); </span><br><span class=\"line\">  d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">  d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); <span class=\"comment\">// 返回[500000, 1300000]</span></span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\" target=\"_blank\" rel=\"noopener\">简单数据可视化示例</a></p>\n<h3 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h3><p>接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。</p>\n<h4 id=\"data工作过程\"><a href=\"#data工作过程\" class=\"headerlink\" title=\"data工作过程\"></a>data工作过程</h4><p>一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      dataViz(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">  d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">      .data(incomingData) <span class=\"comment\">// 绑定数据到选择集</span></span><br><span class=\"line\">      .enter() <span class=\"comment\">// 定义当选择集中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">      .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择集中创建一个元素</span></span><br><span class=\"line\">      .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">      .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经常传入id没有匹配到任何元素，那么称其为空选择集。<br>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”</li>\n<li>如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”</li>\n<li>如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”</li>\n</ul>\n<p>大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"进入退出更新示意图\"></p>\n<h3 id=\"文档驱动设计及交互\"><a href=\"#文档驱动设计及交互\" class=\"headerlink\" title=\"文档驱动设计及交互\"></a>文档驱动设计及交互</h3><p>D3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).raise()</span><br><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).lower()</span><br></pre></td></tr></table></figure></p>\n<p>禁用元素的鼠标事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamG.select(<span class=\"string\">\"text\"</span>).style(<span class=\"string\">\"pointer-events\"</span>,<span class=\"string\">\"none\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用颜色\"><a href=\"#使用颜色\" class=\"headerlink\" title=\"使用颜色\"></a>使用颜色</h4><p>d3.rbg()的使用如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"#ff0000\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"rgb(255,0,0)\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).select(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"fill\"</span>, p =&gt; p.region === d.region ?</span><br><span class=\"line\">  teamColor.darker(<span class=\"number\">.75</span>) : teamColor.brighter(<span class=\"number\">.5</span>)) <span class=\"comment\">// rgb.brighter([k]),每个颜色通道值将乘以0.7 ^ -k</span></span><br></pre></td></tr></table></figure></p>\n<p><code>d3.hsl, d3.lab, d3.cubehelix, d3.hcl</code>可以呈现不同的颜色空间<br>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>, maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：<code>d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c</code><br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。<br><a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\" target=\"_blank\" rel=\"noopener\">Color Scales</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><p>D3选择器可以通过on来为事件添加监听器：<code>selection.on(type[, listener[, capture]])</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selection.on(<span class=\"string\">\"click\"</span>,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d3.mouse(<span class=\"keyword\">this</span>)); <span class=\"comment\">// 输出相对坐标</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。</p>\n<p>如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click”, null)。</p>\n<h4 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h4><p>下面给出拖拽和缩放的例子：<br><a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\" target=\"_blank\" rel=\"noopener\">拖拽简单示例</a><br><a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\" target=\"_blank\" rel=\"noopener\">缩放简单示例</a></p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>D3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）</p>\n<h4 id=\"力导向图\"><a href=\"#力导向图\" class=\"headerlink\" title=\"力导向图\"></a>力导向图</h4><p>力导向图（Force-Directed Graph），是绘图的一种算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\" target=\"_blank\" rel=\"noopener\">力导向图示例</a></p>\n<h3 id=\"项目案例分析\"><a href=\"#项目案例分析\" class=\"headerlink\" title=\"项目案例分析\"></a>项目案例分析</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"noopener\">D3 API 中文文档</a></li>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/4786\" target=\"_blank\" rel=\"noopener\">精通D3.js（第二版）</a></li>\n<li><a href=\"https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X\" target=\"_blank\" rel=\"noopener\">D3.js 4.x Data Visualization(Third Edition)</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/638\" target=\"_blank\" rel=\"noopener\">图说D3数据可视化利器从入门到进阶</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"D3数据可视化实践\"><a href=\"#D3数据可视化实践\" class=\"headerlink\" title=\"D3数据可视化实践\"></a>D3数据可视化实践</h1><blockquote>\n<p>方鹏 2018/06/29</p>\n</blockquote>\n<ul>\n<li><p>目标<br>了解D3常用API和重要知识点，能阅读和编写简单的D3.js可视化程序。</p>\n</li>\n<li><p>内容</p>\n<ol>\n<li>D3简介</li>\n<li>基础知识点（SVG + D3）</li>\n<li>数据处理（涉及加载数据、处理数据）</li>\n<li>数据绑定</li>\n<li>交互</li>\n<li>布局</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h3><p>D3 全称是Data-Driven Document，直译为<strong style=\"color:red;\">数据驱动文档</strong>。</p>\n<blockquote>\n<p>数据由用户或开发者提供<br>文档指的是基于web的文档，即Web浏览器可以渲染的任何元素，例如HTML、SVG<br>它们由D3来驱动。从某种意义上说，它将文档和数据联系起来。</p>\n</blockquote>\n<p>只要记住：<strong style=\"color:red;\">D3是一个JavaScript函数库，是用来做数据可视化的</strong>。</p>\n<p>其开源地址：<br><a href=\"https://github.com/d3/d3\" target=\"_blank\" rel=\"noopener\">https://github.com/d3/d3</a></p>\n<p>用D3.js的创始人<a href=\"https://bl.ocks.org/mbostock\" target=\"_blank\" rel=\"noopener\">Mike Bostock</a>的话说：D3提供了极度灵活，Web标准化的能力，例如CSS3, HTML5, SVG。<br>试想用原生的HTML、SVG、Canvas来实现数据变成图形是困难和繁琐的。D3封装了这些能力，使开发者专注布局和逻辑。</p>\n<h3 id=\"D3简史\"><a href=\"#D3简史\" class=\"headerlink\" title=\"D3简史\"></a>D3简史</h3><ol>\n<li>2011年2月，Mike Bostock发布了v1.0.0版本。</li>\n<li>2012年12月，v3.0.0版本发布，网上3.x的资料比较多。</li>\n<li>2016年6月，v4.0.0版本发布，开始支持Canvas，采用模块化设计模式。</li>\n</ol>\n<h3 id=\"D3的优势\"><a href=\"#D3的优势\" class=\"headerlink\" title=\"D3的优势\"></a>D3的优势</h3><p>Echarts等封装层次很高，能够简单地制作图表，但是给予开发者控制和设计的空间较少。<br>D3在这一点上取得了平衡。</p>\n<ul>\n<li>相对比较底层<br>数据和元素捆绑。DOM里含有数据，数据更新时重绘。同时支持SVG和Canvas。</li>\n<li>更像数学库<br>强大的图形计算能力，D3的“布局”封装了提供力直方图、饼图、树图、力导向图等。D3的“比例尺”提供线性、指数、对数、序数等多种关于对应关系的计算。还提供“地图”功能。</li>\n<li>即封装操作，也给予自由<br>计算和绘图相互独立。计算是算出节点的位置、线段端点、弧线角度等；绘图是将计算所得的节点、线段绘制到网页上。</li>\n</ul>\n<p>应用截图如下：<br><img src=\"http://baapps.com/theme/images/cargo-analytics-apps-thumb.jpg\" alt=\"Alt text\" title=\"cargo analytics\"><br><img src=\"http://baapps.com/theme/images/sct-app-thumb.jpg\" alt=\"Alt text\" title=\"sct app\"><br><img src=\"http://baapps.com/theme/images/kpi-tracker-thumb.jpg\" alt=\"Alt text\" title=\"kpi tracker\"><br><img src=\"http://baapps.com/theme/images/eval-app-thumb.jpg\" alt=\"Alt text\" title=\"eval app\"></p>\n<h3 id=\"适用范围\"><a href=\"#适用范围\" class=\"headerlink\" title=\"适用范围\"></a>适用范围</h3><p>数据可视化七个步骤：获取、解析、过滤、挖掘、表现、改善、交互<br><strong style=\"color:red;\">表现、改善、交互</strong>属于D3的适用范围</p>\n<h3 id=\"它不能干什么\"><a href=\"#它不能干什么\" class=\"headerlink\" title=\"它不能干什么\"></a>它不能干什么</h3><p>  D3不能生成预定义的或者封装好的可视化效果，也就是不提供预先配置的图表类型。<br>  D3不支持老的浏览器。<br>  D3代码在客户端执行，因此不能隐藏源数据。如果担心数据泄露，最好不要可视化，可视化的目的是交流数据。</p>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>SVG（可缩放矢量图形），除了IE8之前的版本外，绝大部分浏览器支持SVG，可以直接嵌入HTML显示。<br>位图与矢量图的区别：<br>位图缩放后失真，矢量图缩放不失真；位图色彩表现力较丰富，矢量图图形色彩较简单；矢量图占用空间较小，位图较大；矢量图容易转化为位图，反之不容易。</p>\n<h4 id=\"SVG图形元素\"><a href=\"#SVG图形元素\" class=\"headerlink\" title=\"SVG图形元素\"></a>SVG图形元素</h4><p>SVG预定义七种形状元素：<br>矩形<code>&lt;rect&gt;</code>、圆形<code>&lt;circle&gt;</code>、椭圆形<code>&lt;ellipse&gt;</code>、线段<code>&lt;line&gt;</code>、折线<code>&lt;polyline&gt;</code>、多边形<code>&lt;polygon&gt;</code>、路径<code>&lt;path&gt;</code><br>路径指令：   </p>\n<ul>\n<li>M=moveto</li>\n<li>L=lineto</li>\n<li>H=horizontal lineto</li>\n<li>V=vertical lineto</li>\n<li>C=curveto 画三次贝塞尔曲线经<strong>两个</strong>指定控制点到达终点</li>\n<li>S=smooth curveto 与前一条三次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称</li>\n<li>Q=quadratic curveto 画二次贝塞尔曲线经<strong>一个</strong>指定控制点到达终点</li>\n<li>T=smooth quadratic Bezier curvto 与前一条二次贝塞尔曲线相连，第一个控制点与前一条曲线的第二个控制点对称，只需输入终点，即可绘制一条二次贝塞尔曲线<br><a href=\"http://blockbuilder.org/MGTfang/7bf8068b2ff08cf98c83a5a7e73a9106\" target=\"_blank\" rel=\"noopener\">示例</a></li>\n</ul>\n<h4 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h4><p>在SVG中可以使用<code>&lt;text&gt;</code>标签绘制文字<br>dx: 相对当前位置在x方向上平移的距离，dy同理。<br><a href=\"https://segmentfault.com/a/1190000009293590\" target=\"_blank\" rel=\"noopener\">text-anchor属性</a><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"label-2\"</span> <span class=\"attr\">text-anchor</span>=<span class=\"string\">\"end\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\".35em\"</span> <span class=\"attr\">rank</span>=<span class=\"string\">\"B\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"0.35em\"</span>&gt;</span>(不知情定制B004)内容战<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">tspan</span> <span class=\"attr\">x</span>=<span class=\"string\">\"0\"</span> <span class=\"attr\">dy</span>=<span class=\"string\">\"1.0499999999999998em\"</span>&gt;</span>略合作伙伴分类不合规<span class=\"tag\">&lt;/<span class=\"name\">tspan</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"D3数据选择和属性设定\"><a href=\"#D3数据选择和属性设定\" class=\"headerlink\" title=\"D3数据选择和属性设定\"></a>D3数据选择和属性设定</h3><p>我们要对DOM中的元素执行一个行为，例如移动位置，改变颜色,更新数据中的值，首先要选中它。<br>d3.select()是选中单个元素；d3.selectAll()是选中多个元素。<br>选择集是一个或多个页面元素的组合，能够与数据集相关联。<br>利用D3提供的方法设置元素属性和样式值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"active\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>); <span class=\"comment\">// 添加或者移除命名的样式</span></span><br></pre></td></tr></table></figure></p>\n<p>有部分属性不能用attr()设定和获取，最典型的就是文本框的value属性，这样情况可以用property()来设定，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p>方法链，也叫链式调用。和JQuery写法类似。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .data(someColors)</span><br><span class=\"line\">  .enter()</span><br><span class=\"line\">  .append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">  .html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://blockbuilder.org/MGTfang/ac3f1dee9143e3874398df498483ed31\" target=\"_blank\" rel=\"noopener\">Hello World 示例</a></p>\n<h3 id=\"使用数据\"><a href=\"#使用数据\" class=\"headerlink\" title=\"使用数据\"></a>使用数据</h3><p>D3数据处理流程：<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"数据处理流程\"></p>\n<h4 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h4><p>D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error, data) =&gt; &#123; <span class=\"built_in\">console</span>.log(error, data) &#125;);</span><br><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; <span class=\"built_in\">console</span>.log(data));</span><br></pre></td></tr></table></figure></p>\n<p>error变量是可选项</p>\n<h4 id=\"数据格式化\"><a href=\"#数据格式化\" class=\"headerlink\" title=\"数据格式化\"></a>数据格式化</h4><ul>\n<li>数据映射<br>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。Scales（比例尺）有一个定义域domain和一个值域range。我们使用d3.scale()函数来归一化数据。例如我们通过线性比例尺，将 500,000到13,000,000的城市人口相同的线性变化映射到0到500px宽的画布上。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png\" alt=\"线性比例尺示意\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(), d3.scaleOrdinal()等其他对数据集来说更加适合的比例尺来映射数据。</p>\n<ul>\n<li>数据分类<br>将定量数据分类，是将值按范围分或者组装到一起。一种分类方法是将数组均分几份。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png\" alt=\"定量数据分类\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>嵌套允许数组中的元素被组织为分层树型结构；类似SQL语句里面的GROUP BY方法。<br>下面的例子，将示例数据首先按year分组再按variety分组，如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yields = [&#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">              &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, </span><br><span class=\"line\">               ...]</span><br><span class=\"line\"><span class=\"keyword\">var</span> nest = d3.nest()</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.year; &#125;)</span><br><span class=\"line\">    .key(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123; <span class=\"keyword\">return</span> d.variety; &#125;)</span><br><span class=\"line\">    .entries(yields);</span><br></pre></td></tr></table></figure></p>\n<p>返回的嵌套数组中,以键值对的形式对数据进行分组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#123;<span class=\"attr\">key</span>: <span class=\"number\">1931</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.00</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">48.87</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">27.43</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Manchuria\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Morris\"</span>&#125;, ...]&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">values</span>: [</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">43.07</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"University Farm\"</span>&#125;,</span><br><span class=\"line\">        &#123;<span class=\"attr\">yield</span>: <span class=\"number\">55.20</span>, <span class=\"attr\">variety</span>: <span class=\"string\">\"Glabron\"</span>, <span class=\"attr\">year</span>: <span class=\"number\">1931</span>, <span class=\"attr\">site</span>: <span class=\"string\">\"Waseca\"</span>&#125;, ...]&#125;, ...]&#125;,</span><br><span class=\"line\"> &#123;<span class=\"attr\">key</span>: <span class=\"number\">1932</span>, <span class=\"attr\">values</span>: ...&#125;]</span><br></pre></td></tr></table></figure></p>\n<p>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean。</p>\n<h4 id=\"测量数据\"><a href=\"#测量数据\" class=\"headerlink\" title=\"测量数据\"></a>测量数据</h4><p>在加载你的数据以后，首要的事情之一是应该对数据进行测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助理解数据。<br>加入想从cities.csv获取城市人口的最小，最大，平均值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">  d3.min(data, el =&gt; +el.population); </span><br><span class=\"line\">  d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">  d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); <span class=\"comment\">// 返回[500000, 1300000]</span></span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/3d2d4fccbbc8023bd00f94451abf50ac\" target=\"_blank\" rel=\"noopener\">简单数据可视化示例</a></p>\n<h3 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h3><p>接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。</p>\n<h4 id=\"data工作过程\"><a href=\"#data工作过程\" class=\"headerlink\" title=\"data工作过程\"></a>data工作过程</h4><p>一个选择集是由DOM中一个或多个元素构成。能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      dataViz(data)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">  d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">      .data(incomingData) <span class=\"comment\">// 绑定数据到选择集</span></span><br><span class=\"line\">      .enter() <span class=\"comment\">// 定义当选择集中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">      .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择集中创建一个元素</span></span><br><span class=\"line\">      .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">      .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>经常传入id没有匹配到任何元素，那么称其为空选择集。<br>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市同选择集中的一个DOM元素相联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果数组长度大于元素数量，则部分还不存在的元素“即将进入可视化（enter）”</li>\n<li>如果数组长度小于元素数量，则多余的元素“即将退出可视化（exit）”</li>\n<li>如果数组长度等于元素数量，则绑定数据的元素“即将被更新（update）”</li>\n</ul>\n<p>大多数情况，.enter()函数触发，使用.append()来添加元素；.exit()函数触发，使用.remove()来移除元素。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"进入退出更新示意图\"></p>\n<h3 id=\"文档驱动设计及交互\"><a href=\"#文档驱动设计及交互\" class=\"headerlink\" title=\"文档驱动设计及交互\"></a>文档驱动设计及交互</h3><p>D3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).raise()</span><br><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).lower()</span><br></pre></td></tr></table></figure></p>\n<p>禁用元素的鼠标事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamG.select(<span class=\"string\">\"text\"</span>).style(<span class=\"string\">\"pointer-events\"</span>,<span class=\"string\">\"none\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"使用颜色\"><a href=\"#使用颜色\" class=\"headerlink\" title=\"使用颜色\"></a>使用颜色</h4><p>d3.rbg()的使用如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"#ff0000\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"rgb(255,0,0)\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).select(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"fill\"</span>, p =&gt; p.region === d.region ?</span><br><span class=\"line\">  teamColor.darker(<span class=\"number\">.75</span>) : teamColor.brighter(<span class=\"number\">.5</span>)) <span class=\"comment\">// rgb.brighter([k]),每个颜色通道值将乘以0.7 ^ -k</span></span><br></pre></td></tr></table></figure></p>\n<p><code>d3.hsl, d3.lab, d3.cubehelix, d3.hcl</code>可以呈现不同的颜色空间<br>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>, maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：<code>d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c</code><br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回设定值。<br><a href=\"https://bl.ocks.org/pstuffa/3393ff2711a53975040077b7453781a9\" target=\"_blank\" rel=\"noopener\">Color Scales</a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><p>D3选择器可以通过on来为事件添加监听器：<code>selection.on(type[, listener[, capture]])</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">selection.on(<span class=\"string\">\"click\"</span>,  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d3.mouse(<span class=\"keyword\">this</span>)); <span class=\"comment\">// 输出相对坐标</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>在当前选择的每个元素，为指定的类型type，添加或删除事件监听器listener 。type是一个字符串事件类型的名称，如“click”、“mouseover”、“keydown”、“touchstart”。基本上支持任何DOM事件，如鼠标、键盘、触屏事件。为了在侦听器内访问当前事件，使用全局函数d3.event。</p>\n<p>如果所选择的元素相同类型的一个事件监听已经注册了，新的侦听加入之前的现有侦听被除去。为注册相同事件类型的多个监听器，该类型可以跟一个可选的命名空间，如“click.first”和“click.second”。 要删除一个监听器，传递null给listener如：selection.on(click”, null)。</p>\n<h4 id=\"行为\"><a href=\"#行为\" class=\"headerlink\" title=\"行为\"></a>行为</h4><p>下面给出拖拽和缩放的例子：<br><a href=\"http://blockbuilder.org/MGTfang/8608aa25a5f44feefa2f1ee5c1c399dc\" target=\"_blank\" rel=\"noopener\">拖拽简单示例</a><br><a href=\"http://blockbuilder.org/MGTfang/8203f1fe95d2afd455729c4cf8384549\" target=\"_blank\" rel=\"noopener\">缩放简单示例</a></p>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><p>D3 3.x提供了12种布局：饼状图（Pie）、力导向图（Force）、弦图（Chord）、树图（Tree）、集群图（Cluster）、捆图（Bundle）、打包图（Pack）、直方图（Histogram）、分区图（Partition）、堆栈图（Stack）、矩阵树图（Treemap）、层级图（Hierarchy）</p>\n<h4 id=\"力导向图\"><a href=\"#力导向图\" class=\"headerlink\" title=\"力导向图\"></a>力导向图</h4><p>力导向图（Force-Directed Graph），是绘图的一种算法。d3-force, 力布局这个模块基于Verlet integration(韦尔莱积分法)实现了物理粒子之间的作用力的仿真。模拟的作用力有电荷之间的吸引排斥力，重力，链接吸引力。</p>\n<p><a href=\"http://blockbuilder.org/MGTfang/4080ee9dc10804fd7a362565e54c78da\" target=\"_blank\" rel=\"noopener\">力导向图示例</a></p>\n<h3 id=\"项目案例分析\"><a href=\"#项目案例分析\" class=\"headerlink\" title=\"项目案例分析\"></a>项目案例分析</h3><h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"noopener\">D3 API 中文文档</a></li>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/4786\" target=\"_blank\" rel=\"noopener\">精通D3.js（第二版）</a></li>\n<li><a href=\"https://www.amazon.com/D3-js-4-x-Data-Visualization-Third/dp/178712035X\" target=\"_blank\" rel=\"noopener\">D3.js 4.x Data Visualization(Third Edition)</a></li>\n<li><a href=\"http://www.broadview.com.cn/book/638\" target=\"_blank\" rel=\"noopener\">图说D3数据可视化利器从入门到进阶</a></li>\n</ul>\n"},{"title":"HTTPS证书及Nginx配置相关","author":"Peng Fang","date":"2018-06-08T10:11:00.000Z","_content":"本文档包括：  \nNginx支持HTTPS，自签名证书生成，配置Nginx支持HTTPS，客户端证书导入。   \n作者：方鹏\n## Nginx安装SSL模块\n1. 安装依赖包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n2. 执行编译\n解压安装包，进入目录，执行命令：\n``` shell\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module\nmake install\n```\n## 自签名证书生成  \n>     [root@vultr ~]# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout bcp.key -out bcp.crt\n>     Generating a 2048 bit RSA private key\n>     ...................................................>     ................................+++\n>     ....................+++\n>     writing new private key to 'bcp.key'\n>     ------\n>     You are about to be asked to enter information that will be incorporated into your certificate request.\n>     What you are about to enter is what is called a Distinguished Name or a DN.\n>     There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank.\n>     Country Name (2 letter code) [XX]:CN\n>     State or Province Name (full name) []:SICHUAN\n>     Locality Name (eg, city) [Default City]:CHENGDU\n>     Organization Name (eg, company) [Default Company Ltd]:MIGU\n>     Organizational Unit Name (eg, section) []:TSG \n>     Common Name (eg, your name or your server's hostname) []:10.146.50.22 #注意：这里填服务端的IP地址\n>     Email Address []:fangpeng@address.cn\n\n\n## 配置Nginx支持HTTPS\n``` shell\n# HTTPS server\n    server {\n        listen       443 ssl;\n        server_name  localhost;\n        ssl on;\n        ssl_certificate      /usr/local/nginx/key/bcp.crt; #证书文件存放路径\n        ssl_certificate_key  /usr/local/nginx/key/bcp.key;\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n            proxy_set_header X-NginX-Proxy true;\n            proxy_pass http://127.0.0.1:8080/; #后端服务地址\n            proxy_redirect off;\n        }\n    }\n```\n## 客户端证书导入\n如果在调用服务的客户端没有导入自签名证书，那么可能在接口调用时会出现如下错误：\n```\nsun.security.validator.ValidatorException: PKIX path building \nfailed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n```\n导入证书：\n```\nkeytool -import -alias ${alias} -keystore ${JAVA_HOME}/jre/lib/security/cacerts -file ${path-to-certificate-file}\n```\n```\ncd ${JAVA_HOME}/jre/lib/security/\nsudo keytool -import -alias 5022-cert -keystore cacerts -file ~/server.crt\n```\nserver.crt：服务端自签名的证书文件  \nkeystore密码：默认changit   \n如果导入过证书，alias相同，会出现错误提示：  \n`Certificate not imported, alias <xxx> already exists.`  \n从keystone删除证书：\n```\nsudo keytool -delete -keystore cacerts -alias 'bcp-cert'\n```\n导入后调用依然出现异常：\n```\njavax.net.ssl.SSLException: Certificate for XXX doesn't match common name of the certificate subject: XXX\n```\n原因：需要连接服务器的域名或IP和证书中的common name不一致。\n重新生成证书，Common Name 填服务器IP。\n\n> 证书文件也可以通过命令请求远端站点获取\n\n1. 获取远程网站（服务器）的根证书和中间证书\n```\nopenssl s_client -showcerts -connect 10.146.50.22:443\n```\n2. 保存证书文件  \n保存证书hash（上图中包含--BEGIN CERTIFICATE--到--END CERTIFICATE--部分）\n为文件，例如server.crt\n3. 证书导入keystore  \n使用keytool import 命令导入根证书和中间证书到JAVA信任的根证书中（通常叫cacerts)\n```\nsudo keytool -importcert -keystore ${JAVA_HOME}/jre/lib/security/cacerts -storepass changeit -file ~/server.crt -alias \"5022-cert\"\n```\n证书添加到keystore   \n[参考文章](https://docs.oracle.com/cd/E19830-01/819-4712/ablqw/index.html)\n","source":"_posts/HTTPS证书及Nginx配置相关.md","raw":"title: HTTPS证书及Nginx配置相关\nauthor: Peng Fang\ntags:\n  - HTTPS\ncategories:\n  - Nginx\ndate: 2018-06-08 18:11:00\n---\n本文档包括：  \nNginx支持HTTPS，自签名证书生成，配置Nginx支持HTTPS，客户端证书导入。   \n作者：方鹏\n## Nginx安装SSL模块\n1. 安装依赖包\n``` shell\nyum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel\n```\n2. 执行编译\n解压安装包，进入目录，执行命令：\n``` shell\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module\nmake install\n```\n## 自签名证书生成  \n>     [root@vultr ~]# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout bcp.key -out bcp.crt\n>     Generating a 2048 bit RSA private key\n>     ...................................................>     ................................+++\n>     ....................+++\n>     writing new private key to 'bcp.key'\n>     ------\n>     You are about to be asked to enter information that will be incorporated into your certificate request.\n>     What you are about to enter is what is called a Distinguished Name or a DN.\n>     There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank.\n>     Country Name (2 letter code) [XX]:CN\n>     State or Province Name (full name) []:SICHUAN\n>     Locality Name (eg, city) [Default City]:CHENGDU\n>     Organization Name (eg, company) [Default Company Ltd]:MIGU\n>     Organizational Unit Name (eg, section) []:TSG \n>     Common Name (eg, your name or your server's hostname) []:10.146.50.22 #注意：这里填服务端的IP地址\n>     Email Address []:fangpeng@address.cn\n\n\n## 配置Nginx支持HTTPS\n``` shell\n# HTTPS server\n    server {\n        listen       443 ssl;\n        server_name  localhost;\n        ssl on;\n        ssl_certificate      /usr/local/nginx/key/bcp.crt; #证书文件存放路径\n        ssl_certificate_key  /usr/local/nginx/key/bcp.key;\n        ssl_session_cache    shared:SSL:1m;\n        ssl_session_timeout  5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n        ssl_prefer_server_ciphers  on;\n\n        location / {\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header Host $http_host;\n            proxy_set_header X-NginX-Proxy true;\n            proxy_pass http://127.0.0.1:8080/; #后端服务地址\n            proxy_redirect off;\n        }\n    }\n```\n## 客户端证书导入\n如果在调用服务的客户端没有导入自签名证书，那么可能在接口调用时会出现如下错误：\n```\nsun.security.validator.ValidatorException: PKIX path building \nfailed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target\n```\n导入证书：\n```\nkeytool -import -alias ${alias} -keystore ${JAVA_HOME}/jre/lib/security/cacerts -file ${path-to-certificate-file}\n```\n```\ncd ${JAVA_HOME}/jre/lib/security/\nsudo keytool -import -alias 5022-cert -keystore cacerts -file ~/server.crt\n```\nserver.crt：服务端自签名的证书文件  \nkeystore密码：默认changit   \n如果导入过证书，alias相同，会出现错误提示：  \n`Certificate not imported, alias <xxx> already exists.`  \n从keystone删除证书：\n```\nsudo keytool -delete -keystore cacerts -alias 'bcp-cert'\n```\n导入后调用依然出现异常：\n```\njavax.net.ssl.SSLException: Certificate for XXX doesn't match common name of the certificate subject: XXX\n```\n原因：需要连接服务器的域名或IP和证书中的common name不一致。\n重新生成证书，Common Name 填服务器IP。\n\n> 证书文件也可以通过命令请求远端站点获取\n\n1. 获取远程网站（服务器）的根证书和中间证书\n```\nopenssl s_client -showcerts -connect 10.146.50.22:443\n```\n2. 保存证书文件  \n保存证书hash（上图中包含--BEGIN CERTIFICATE--到--END CERTIFICATE--部分）\n为文件，例如server.crt\n3. 证书导入keystore  \n使用keytool import 命令导入根证书和中间证书到JAVA信任的根证书中（通常叫cacerts)\n```\nsudo keytool -importcert -keystore ${JAVA_HOME}/jre/lib/security/cacerts -storepass changeit -file ~/server.crt -alias \"5022-cert\"\n```\n证书添加到keystore   \n[参考文章](https://docs.oracle.com/cd/E19830-01/819-4712/ablqw/index.html)\n","slug":"HTTPS证书及Nginx配置相关","published":1,"updated":"2018-09-19T10:58:28.454Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0500062v2p2129wzae","content":"<p>本文档包括：<br>Nginx支持HTTPS，自签名证书生成，配置Nginx支持HTTPS，客户端证书导入。<br>作者：方鹏</p>\n<h2 id=\"Nginx安装SSL模块\"><a href=\"#Nginx安装SSL模块\" class=\"headerlink\" title=\"Nginx安装SSL模块\"></a>Nginx安装SSL模块</h2><ol>\n<li><p>安装依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行编译<br>解压安装包，进入目录，执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"自签名证书生成\"><a href=\"#自签名证书生成\" class=\"headerlink\" title=\"自签名证书生成\"></a>自签名证书生成</h2><blockquote>\n<pre><code>[root@vultr ~]# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout bcp.key -out bcp.crt\nGenerating a 2048 bit RSA private key\n...................................................&gt;     ................................+++\n....................+++\nwriting new private key to &apos;bcp.key&apos;\n------\nYou are about to be asked to enter information that will be incorporated into your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &apos;.&apos;, the field will be left blank.\nCountry Name (2 letter code) [XX]:CN\nState or Province Name (full name) []:SICHUAN\nLocality Name (eg, city) [Default City]:CHENGDU\nOrganization Name (eg, company) [Default Company Ltd]:MIGU\nOrganizational Unit Name (eg, section) []:TSG \nCommon Name (eg, your name or your server&apos;s hostname) []:10.146.50.22 #注意：这里填服务端的IP地址\nEmail Address []:fangpeng@address.cn\n</code></pre></blockquote>\n<h2 id=\"配置Nginx支持HTTPS\"><a href=\"#配置Nginx支持HTTPS\" class=\"headerlink\" title=\"配置Nginx支持HTTPS\"></a>配置Nginx支持HTTPS</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> HTTPS server</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate      /usr/local/nginx/key/bcp.crt; #证书文件存放路径</span><br><span class=\"line\">        ssl_certificate_key  /usr/local/nginx/key/bcp.key;</span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  5m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header Host $http_host;</span><br><span class=\"line\">            proxy_set_header X-NginX-Proxy true;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080/; #后端服务地址</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端证书导入\"><a href=\"#客户端证书导入\" class=\"headerlink\" title=\"客户端证书导入\"></a>客户端证书导入</h2><p>如果在调用服务的客户端没有导入自签名证书，那么可能在接口调用时会出现如下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sun.security.validator.ValidatorException: PKIX path building </span><br><span class=\"line\">failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure></p>\n<p>导入证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -import -alias $&#123;alias&#125; -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -file $&#123;path-to-certificate-file&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $&#123;JAVA_HOME&#125;/jre/lib/security/</span><br><span class=\"line\">sudo keytool -import -alias 5022-cert -keystore cacerts -file ~/server.crt</span><br></pre></td></tr></table></figure>\n<p>server.crt：服务端自签名的证书文件<br>keystore密码：默认changit<br>如果导入过证书，alias相同，会出现错误提示：<br><code>Certificate not imported, alias &lt;xxx&gt; already exists.</code><br>从keystone删除证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo keytool -delete -keystore cacerts -alias &apos;bcp-cert&apos;</span><br></pre></td></tr></table></figure></p>\n<p>导入后调用依然出现异常：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javax.net.ssl.SSLException: Certificate for XXX doesn&apos;t match common name of the certificate subject: XXX</span><br></pre></td></tr></table></figure></p>\n<p>原因：需要连接服务器的域名或IP和证书中的common name不一致。<br>重新生成证书，Common Name 填服务器IP。</p>\n<blockquote>\n<p>证书文件也可以通过命令请求远端站点获取</p>\n</blockquote>\n<ol>\n<li><p>获取远程网站（服务器）的根证书和中间证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -showcerts -connect 10.146.50.22:443</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存证书文件<br>保存证书hash（上图中包含–BEGIN CERTIFICATE–到–END CERTIFICATE–部分）<br>为文件，例如server.crt</p>\n</li>\n<li>证书导入keystore<br>使用keytool import 命令导入根证书和中间证书到JAVA信任的根证书中（通常叫cacerts)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo keytool -importcert -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -storepass changeit -file ~/server.crt -alias &quot;5022-cert&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>证书添加到keystore<br><a href=\"https://docs.oracle.com/cd/E19830-01/819-4712/ablqw/index.html\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>本文档包括：<br>Nginx支持HTTPS，自签名证书生成，配置Nginx支持HTTPS，客户端证书导入。<br>作者：方鹏</p>\n<h2 id=\"Nginx安装SSL模块\"><a href=\"#Nginx安装SSL模块\" class=\"headerlink\" title=\"Nginx安装SSL模块\"></a>Nginx安装SSL模块</h2><ol>\n<li><p>安装依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc gcc-c++ make libtool zlib zlib-devel openssl openssl-devel pcre pcre-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行编译<br>解压安装包，进入目录，执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module --with-file-aio --with-http_realip_module</span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"自签名证书生成\"><a href=\"#自签名证书生成\" class=\"headerlink\" title=\"自签名证书生成\"></a>自签名证书生成</h2><blockquote>\n<pre><code>[root@vultr ~]# openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout bcp.key -out bcp.crt\nGenerating a 2048 bit RSA private key\n...................................................&gt;     ................................+++\n....................+++\nwriting new private key to &apos;bcp.key&apos;\n------\nYou are about to be asked to enter information that will be incorporated into your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter &apos;.&apos;, the field will be left blank.\nCountry Name (2 letter code) [XX]:CN\nState or Province Name (full name) []:SICHUAN\nLocality Name (eg, city) [Default City]:CHENGDU\nOrganization Name (eg, company) [Default Company Ltd]:MIGU\nOrganizational Unit Name (eg, section) []:TSG \nCommon Name (eg, your name or your server&apos;s hostname) []:10.146.50.22 #注意：这里填服务端的IP地址\nEmail Address []:fangpeng@address.cn\n</code></pre></blockquote>\n<h2 id=\"配置Nginx支持HTTPS\"><a href=\"#配置Nginx支持HTTPS\" class=\"headerlink\" title=\"配置Nginx支持HTTPS\"></a>配置Nginx支持HTTPS</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> HTTPS server</span></span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       443 ssl;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        ssl on;</span><br><span class=\"line\">        ssl_certificate      /usr/local/nginx/key/bcp.crt; #证书文件存放路径</span><br><span class=\"line\">        ssl_certificate_key  /usr/local/nginx/key/bcp.key;</span><br><span class=\"line\">        ssl_session_cache    shared:SSL:1m;</span><br><span class=\"line\">        ssl_session_timeout  5m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class=\"line\">        ssl_prefer_server_ciphers  on;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">            proxy_set_header Host $http_host;</span><br><span class=\"line\">            proxy_set_header X-NginX-Proxy true;</span><br><span class=\"line\">            proxy_pass http://127.0.0.1:8080/; #后端服务地址</span><br><span class=\"line\">            proxy_redirect off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端证书导入\"><a href=\"#客户端证书导入\" class=\"headerlink\" title=\"客户端证书导入\"></a>客户端证书导入</h2><p>如果在调用服务的客户端没有导入自签名证书，那么可能在接口调用时会出现如下错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sun.security.validator.ValidatorException: PKIX path building </span><br><span class=\"line\">failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure></p>\n<p>导入证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -import -alias $&#123;alias&#125; -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -file $&#123;path-to-certificate-file&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd $&#123;JAVA_HOME&#125;/jre/lib/security/</span><br><span class=\"line\">sudo keytool -import -alias 5022-cert -keystore cacerts -file ~/server.crt</span><br></pre></td></tr></table></figure>\n<p>server.crt：服务端自签名的证书文件<br>keystore密码：默认changit<br>如果导入过证书，alias相同，会出现错误提示：<br><code>Certificate not imported, alias &lt;xxx&gt; already exists.</code><br>从keystone删除证书：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo keytool -delete -keystore cacerts -alias &apos;bcp-cert&apos;</span><br></pre></td></tr></table></figure></p>\n<p>导入后调用依然出现异常：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javax.net.ssl.SSLException: Certificate for XXX doesn&apos;t match common name of the certificate subject: XXX</span><br></pre></td></tr></table></figure></p>\n<p>原因：需要连接服务器的域名或IP和证书中的common name不一致。<br>重新生成证书，Common Name 填服务器IP。</p>\n<blockquote>\n<p>证书文件也可以通过命令请求远端站点获取</p>\n</blockquote>\n<ol>\n<li><p>获取远程网站（服务器）的根证书和中间证书</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl s_client -showcerts -connect 10.146.50.22:443</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存证书文件<br>保存证书hash（上图中包含–BEGIN CERTIFICATE–到–END CERTIFICATE–部分）<br>为文件，例如server.crt</p>\n</li>\n<li>证书导入keystore<br>使用keytool import 命令导入根证书和中间证书到JAVA信任的根证书中（通常叫cacerts)<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo keytool -importcert -keystore $&#123;JAVA_HOME&#125;/jre/lib/security/cacerts -storepass changeit -file ~/server.crt -alias &quot;5022-cert&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>证书添加到keystore<br><a href=\"https://docs.oracle.com/cd/E19830-01/819-4712/ablqw/index.html\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n"},{"title":"Hbase基础知识点梳理","author":"Peng Fang","date":"2018-09-10T12:09:00.000Z","_content":"### 整体架构\n从HBase部署架构来说，HBase有两种服务器：Master服务器和RegionServer服务器。   \n一般一个HBase集群有一个Master服务器和几个RegionServer服务器。   \nMaster服务器负责维护表结构信息，Master挂到后还能查询数据，只是不能新建表或修改表。   \n实际的数据存储在RegionServer服务器上，RegionServer保存的表数据是直接存储在Hadoop的HDFS上。客户端获取数据是由客户端直接连接RegionServer服务器。   \nRegionServer非常依赖ZooKeeper服务。ZooKeeper在HBase中扮演管家角色，管理了HBase所有RegionServer的信息，包括具体的数据段存放在哪个RegionServer上。   \n客户端每次与HBase连接，先与ZooKeeper通信，查询出需要与哪个RegionServer连接，然后再连接RegionServer。   \n整体架构图如下：   \n![整体架构图](http://207.148.69.56/pub/imgs/arch/full_arch.png)\n\n#### Region是什么\nRegion就是一段数据的集合。HBase中的表一般拥有一个到多个Region。Region有几个特性：\n- Region不能跨服务器\n- 当数据量大的时候，HBase会拆分region\n- HBase负载均衡的时候，可能会把Region从一个RegionServer移动到另一个上\n- Region是基于HDFS的，所有数据存取操作都是调用了HDFS的客户端接口来实现的\n\n#### RegionServer是什么\nRegionServer是存放Region的容器，直观来说就是服务器上的一个服务。一般来说，一个服务器只会安装一个RegionServer服务。\n当客户端从ZooKeeper获取RegionServer的地址后，它会直接从RegionServer获取数据，插入、删除等数据操作也是经过它。\n\n#### Master是什么\nHBase中Master角色不像领导，更像是打杂的。Master负责各种协调工作，比如建表、删表、移动Region、合并等操作。它们的共性就是需要跨RegionServer，由哪个RegionServer\n来执行都不合适，所以HBase将这些操作放到Master上。这种结构大大降低了集群对Master的依赖，即使Master宕机了，也不影响数据操作。\n\n### 存储架构\nHBase最基本的存储单位是列。行跟行的列可以完全不一样，行与行的数据，甚至同一行的列可以存储在不同的机器上。若干个列被归类为一个列族。   \n存储架构图如下：\n![存储架构图](http://207.148.69.56/pub/imgs/arch/storage_arch.png)\n\n#### 行键是什么\nrowkey是由用户指定的一串不重复字符串。rowkey是决定row存储顺序的唯一凭证。HBase是根据字典排序的。比如：row-1, row-11, row-2。\n\n#### 列族是什么\n建表的时候不需要指定列，但需要确定列族，这就是说一个表有几个列族是一开始确定好的。此外，表的很多属性，比如过期时间、数据块缓存以及是否压缩等都是定义在列族上，而不是定义在表上或者列上。   \n同一个表里的不同列族可以有完全不同的属性配置，但是同一个列族内的所有列都会有相同属性。\n列名称规范是列族：列名，如brother:age。   \n列族的意义是：HBase会把相同的列族尽量放在同一台机器上，所以说，如果想让某一个列被放在一起，就给他们定义相同的列族。   \n一个表设置多少个列族合适？官方的建议是：越少越好，因为Hbase虽然是分布式数据库，但是数据在同一台机器上仍然会加速数据的查询过程。所以请根据实际需要制定列族，列族太多会极大降低数据库性能。\n\n#### 单元格是什么\n一个列上可以存储多个版本的值，多个版本的值被存储在多个单元格里面，多个版本之间用版本号（Version）来区分。所以唯一确定一条结果的表达式应该是行键：列族：列：版本号(rowkey:column family:column:version)。不过版本号是可以省略的，如果不写版本号，HBase默认获取最后一个版本的数据并返回。每个列或者单元格的值都被赋予一个时间戳，这个时间戳默认是由系统指定的，也可以由用户显示指定。\n\n#### Region跟行的关系\n一个Region就是多个行的集合。在Region中行的排序按照行键（rowkey）字典排序。   \n表结构图如下：\n![表结构示意图](http://207.148.69.56/pub/imgs/arch/table_struct.png)\n\n传统数据库insert语句可以把整行的数据一次性写在行语句里面，而在HBase里面如果一行有10列，那么存储一行的数据得写10行的语句。存储语句必须精确写出数据被存储到哪个单元格，根据表：列族：行：列来定义。行的概念被弱化到只有一个抽象的存在，rowkey是其唯一的体现。\n\n### 讲讲ZooKeeper\nZooKeeper不知Hadoop的HA模式（HA的作用是保证一个namenode挂掉的时候，另外一个namenode能立即启动将其代替，这样就不会发生单点故障的问题）用到，HBase也会用到。ZooKeeper是Apache旗下的一个开源项目，它是一个开源的分布式应用程序协调服务，它可以为分布式应用提供一致性服务，提供的功能包括：配置服务、域名服务、分布式同步、组服务等。ZooKeeper负责维护HBase的所有节点，如果ZooKeeper宕掉了，集群的一个节点都连不上。   \nZooKeeper最大的功能之一就是知道某个节点是否宕机了，那么ZooKeeper是如何知道某个节点宕机的呢？   \n答案是，每一个机器在ZooKeeper中都有一个会话（Session），如果某个机器宕机了，这个会话（Session）就会过期，与此同时，ZooKeeper就知道该节点已宕机。   \n多少个节点最好？节点越多容灾能力就越强，不过节点数最好是奇数个，这样有利于仲裁。   \nZooKeeper的容灾机制：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。如果有5个节点，有2个集群宕掉，集群依然可以运行。这是我们称该集群容灾能力是2。目前节点数是6，只要有3个机器宕掉那么集群就宕掉了，此时的容灾能力仍是2。   \nZooKeeper应该存储在一个独立的磁盘上，避免当磁盘出现IO问题的时候ZooKeeper被波及。\n\n### HBase常用命令\n- list   \n查看数据库中有哪些表\n\n- describe   \n查看表属性\n\n- create & alter   \ncreate 'test', 'cf' # 建立一个叫test的表，这个表有一个列族叫cf\nalter 'test', 'cf2' # 新增一个列族\n在生产环境更改表之前，最好先停用（disable）这个表。因为对列族的所有操作都会同步到所有拥有这个表的RegionServer上。当有很多客户端都在连着的时候，直接新增一个列族对性能的影响较大。\n\n- put  \nput 'test', 'row1', 'cf:name', 'jack'\n意思是往test表插入一个单元格，这个单元格的rowkey为row1，也就是说它是属于row1这个行中的一个列。该单元格的列族是cf，单元格的列名是name，数据值是jack。   \n    - 关于时间戳\n    每一个单元格可以存储多个版本的值。它用timestamp来存储该条记录的时间戳，这个时间戳就用来当版本号使用。timestamp虽然是时间的标定，其实可以输入任意的数字，比如1，2，3等。当用scan命令的时候HBase会显示拥有最大（最新）的timestamp的数据版本。   \n    创建表时默认版本是1，也就是说在一个单元格插入多个版本的数据的时候，HBase只会保留最后一个版本。能够在scan操作的结果集看到多个版本的前提是建表时设定的VERSIONS参数要大于1，这样表才能保存设定VERSIONS数个历史记录。修改版本数的命令：   \n    alter 'test', {NAME=>'cf',VERSION=>5} # NAME为要修改的列族的名称，后面跟要修改的属性，我们修改VERSION为5   \n    put 'test','row2','cf:name','ted'   \n    put 'test','row2','cf:name','billy',2222222222222 #自定义时间戳晚于当前时间   \n    scan 'test' # 只能看到时间戳最大的那条结果   \n    get 'test','row2',{COLUMN=>'cf:name', VERSIONS=>3} #查询所有版本的数据   \n\n- scan   \nscan '表名'，这样输入的话，会从第一条数据开始把所有数据全部显示一遍。   \n在HBase中我们用起始行（STARTROW）和结束行（ENDROW）来限制记录的条数。   \nscan 'test',{STARTROW=>'row3'} # 显示所有rowkey大于等于row3的记录   \nscan 'test',{ENDROW=>'row4'} # 小于row4(不包括)的记录   \n两个参数一起用就是显示 >= STARTROW 并且 <ENDROW中的那段数据   \nscan '表名',{COLUMNS=>['列1','列2',...]} # 只遍历指定列   \nscan '表名',{STARTROW=>'起始行键',ENDROW=>'结束行键'} # 指定行键范围   \nscan '表名',{LIMIT=>行数量} # 指定最大返回行数量   \nscan '表名',{TIMERANGE=>[最小时间戳,最大时间戳]} # 找出单元格的历史版本数据   \nscan ’表名',{VERSION=>'版本数'} # 指定版本数，显示单元格多个版本值  \nscan '表名',{FILTER=>'过滤器'} # scan 'table1' { FILTER=> \"PrefixFilter('row1')\" }   \n- get   \nscan可以查询表的多条数据，get只能查询一个单元格的记录。在数据量大的时候，get的查询熟读远远高于scan。   \nget 'test','row7','cf:name' # 查询某个单元格的记录   \nget 'test','row7',{COLUMN=>'cf:name',VERSION=>5} # 把查询版本数设定为5   \nscan 'test',{VERSION=>5} # scan跟上VERSIONS参数也可以查询出多个版本的数据   \n- count   \n计算表的行数  \n- delete   \ndelete '表名','行键','列名'   \ndelete '表名','行键','列名',时间戳   \n- split   \n拆分(split)指定的Region，除了可以等到Region大小达到阈值后触发自动拆分机制来拆分Region，还可以手动拆分指定的Region，如 split 'region名'。   \n- merge_region   \n合并（merge）两个Region和一个Region   \n- compact   \n调用指定表的所有Region或者指定列族的所有Region的合并（compact）机制。通过compact机制可以合并该Region或者Region的列族下的所有HFile（StoreFile），以此来提高读取性能。   \ncompact跟合并（merge）并不一样。merge操作是合并2个Region为1个，而compact操作更新的单元StoreFile，一个Region可以含有一个或多个StoreFile，compact操作的目的在于减少StoreFile的数量以增加读取性能。\n- 快照   \n快照就是表在某个时刻的结构和数据。可以使用快照来将表恢复到某个时刻的结构和数据，恢复过程很快，往往只有数秒。HBase是怎么做到的呢？其实快照并不直接复制数据，而是保持一份文件列表，通过修改表所链接的文件夹来改变表的数据，好处是：速度极快；不额外占用磁盘空间。   \nHBase要求在恢复快照之前必须要先停用（disable）需要恢复的表，才能恢复快照，避免不必要的麻烦。先停用，然后恢复快照，再启用（enable）。   \n通过snapshot命令可以创建指定表的快照。   \n disable 'mgdmcredit:userblack_temp'   \n snapshot 'mgdmcredit:userblack_temp', 'userblack_temp_snapshot'   \n disable 'mgdmcredit:userblack'  \n drop 'mgdmcredit:userblack'   \n clone_snapshot 'userblack_temp_snapshot' 'mgdmcredit:userblack'   \n enable 'mgdmcredit:userblack_temp'   \n truncate 'mgdmcredit:userblack_temp'   \n delete_snapshot 'userblack_temp_snapshot'   \n clone_snapshot使用快照的数据创建一张新表，创建的过程很快，因为使用的方式不是复制数据，并且修改新表的数据不会影响旧表的数据。   \n\n ### 客户端API\n 在HBase中有一个理念：所有数据皆为bytes。在HBase中数据最终都会被序列化为bytes[]保存。\n - put方法\n ``` java\ntry(Connection connection = ConnectionFactory.createConnection(config)) {\n    Table table = connection.getTable(TableName.valueOf(\"myTable\"));\n    Put put = new Put(Bytes.toBytes(\"row1\"));\n    put.addColumn(Bytes.toBytes(\"mycf\"), Bytes.toBytes(\"name\"), Bytes.toBytes(\"ted\"));\n    table.put(put);\n}\n ```\n 新增和修改类型，修改就是往同一个rowkey再执行一次put操作，将之前的数据覆盖掉。\n JDK的try-with-resources，上面例子中看到try(...){....}，{....}中的代码执行完毕会自动释放资源，不需要手动写finally语句块了。\n\n- get方法\nget不像scan，并不能用多种条件去查找，只能用行键去查找。不过HBase一行有可能很大，我们可以通过设置参数让get只获取其中一部分的数据，以提高查询性能。   \n``` java\nGet get = new Get(Bytes.toBytes(\"row1\"));\nget.setMaxVersions(10);\nResult result = table.get(get);\nList<Cell> cells = result.getColumnCells(Bytes.toBytes(\"mycf\"), Bytes.toBytes(\"name\"));\nfor(Cell c: cells) {\n    // 用CellUtil.cloneValue来获取数据而不是getValue\n    bytes[] cValue = CellUtil.cloneValue(c);\n    System.out.println(Bytes.toString(cValue));\n}\n```\n用CellUtil.cloneValue来获取数据而不用getValue的原因：根据目前getValue的实现代码，每次调用它都会获取整个Cell的数组备份，比较消耗性能。所以当需要获取Cell中的值时，请使用CellUtil.cloneValue方法。   \n\n- Scan扫描   \n查询多条数据我们会想到用scan。默认的scan是从表头一直遍历到表尾，非常耗时好性能，实际工作中，我们至少要定义一下遍历的起始rowkey，如果知道遍历的结束rowkey就好了。   \n举个栗子：\n``` java\nScan scan = new Scan(Bytes.toBytes(\"row1\"));\nResultScanner rs = table.getScanner(scan);\n...\nrs.close(); // 使用完了关闭\n```\n这里为什么是getScanner()而不是scan()？因为Table通过传入scan之后返回的结果扫描器（ResultScanner）并不是实际的查询结果。获取结果扫描器（ResultScanner）的时候并没有实际去查询数据。真正要获取数据的时候要打开扫描器，然后遍历它，这个时候才真正地查询了数据。\n这个ResultScanner就像关系型数据库中的ResultSet一样是需要持续占用资源的，所以用完后务必记得关闭它。\n\n- 缓存   \nHBase在扫描的时候已经默认开启了缓存。具体来讲，每一次的next()操作都会产生一次完整的RPC请求，而这次RPC请求可以获取多少数据是通过hbase-site.xml中的hbase.client.scanner.caching参数配置的。比如配置为1，遍历了10个结果就会发送10次请求。\n可以在表的层面修改缓存条数，也可以在扫描层面去修改。表的层面修改时通过hbase-site.xml中的配置:   \n``` xml\n<property>\n<name>hbase.client.scanner.caching</name>\n<value>1000</value>\n</property>\n```\nhbase.client.scanner.caching的默认配置是100.   \n在扫描层面修改缓存可以使用Scan.setCaching(int caching)方法设置一次next获取的数据条数，这个配置的优先级比配置文件内的hbase.client.scanner.caching高。   \n\n### HBase二层查询架构\n从0.96版本之后三层查询架构被改成了二层查询架构。直接把.META.表所在的RegionServer信息存储到zk中的/hbase/meta-region-server去了。   \n![二级查询架构图](http://207.148.69.56/pub/imgs/arch/query_arch.png)\n上图可以总结成以下流程：   \n1. 客户端先通过ZooKeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase:meta表。  \n2. 客户端连接含有hbase:meta表的RegionServer。hbase:meta表存储了所有Region的行键范围信息，通过这个表可以查询出你要存放的rowkey属于哪个Region的范围里面，以及这个Region又属于哪个RegionServer。\n3. 获取这些信息后，客户端就可以直连其中一台用于你要存取的rowkey的RegionServer，并直接对其操作。\n4. 客户端会把meta信息缓存起来，下次操作就不需要进行以上加载habse:meta的步骤了。\n\n### 过滤器\n过滤器就是在Get或Scan的时候过滤结果用的，可以把他看成SQL中的where语句。HBase中过滤器被用户创建出来以后会被序列化我可以网络传输的格式，然后被分发到各个RegionServer。在RegionServer中Filter被还原出来。这样在Scan的遍历过程中，不满足过滤条件的结果将不会被返回客户端。\n\n#### 前缀过滤器\n这种过滤器可以根据行键的前缀匹配同样是这个前缀的行。运用它能提高查询性能，因为前缀过滤器在遇到扫描的行键的前缀大于所指定的前缀时，立即停止扫描。\n就算用了前缀过滤器也依然要结合上STARTROW使用，否则scan还是会从第一条记录开始扫描，浪费了大量的性能。\n当我们用Scan扫描数据的时候，如果使用STOPROW来指定终止行，结果集中并不会包含终止行。如果想在结果中包含终止行可以有两种方式：\n（1）在终止行的rowkey上增加一个字节的数据，然后把增加一个字节的rowkey作为STOPROW\n（2）使用包含结尾过滤器（InclusiveStopFilter）\n\n### Region的拆分\n通过查询hbase:meta我们可以形象地看到，一个Region就是一个表的一段rowkey的数据集合。\n当Region太大的时候HBase会拆分它。   \n为什么要拆分Region？因为当某个Region太大的时候读取效率太低了。   \n我们可以想想为什么从MySQL、Oracle转移到NoSQL来？最根本的原因就是这些关系型数据库把数据放到一个地方，而当数据量增大到上亿的时候同一个磁盘已经无法应付这些数据的读取了，因为遍历一遍数据的时间实在太长了。用NoSQL的理由就是其能把大数据分拆到不同的机器上，然后像查询一个完整的数据一样查询他们。当Region太大的时候，一样会遇到跟传统数据库一样的问题，所以要拆分Region。   \n\n#### IncreasingToUpperBounRegionSplitPolicy策略（默认）\n计算公式：  \nMath.min(tableRegionsCount^3 * initialSize, defaultRegionMaxFileSzie)   \n- tableRegionsCount：表在所有RegionServer上拥有的Region数量总和\n- initialSize：如果定义了hbase.increasing.policy.initial.size，则使用这个数值，否则，就使用memstore的刷写大小的2倍，即hbase.hregion.memstore.flush.size *2\n- defaultRegionMaxFileSzie：ConstantSizeRegionSplitPolicy所用到的hbase.hregion.max(一般是10G)\n\n一开始可以先定义拆分点，但是当书记开始工作起来后会出现热点不均的情况，所以推荐的方法是：\n1. 用预拆分导入初始数据\n2. 然后用自动拆分来让HBase自动管理Region\nRegion的拆分对性能的影响还是很大的，默认的策略已经适用于大多数情况。可以尝试哪种策略最好。\n\n### Region的合并\nRegion的合并（merge）并不是为了性能考虑，更多地出于维护的目的。   \n啥时候才会用到合并呢？比如删了大量的数据，每个Region都变小了，这个时候分成这么多个Region就有点浪费，可以把Region合并起来。   \n通过Merge类来合并叫冷合并，就是要把HMaster和所有的HRegionServer全部停掉，再执行才可以；   \n通过online_merge命令叫做热合并   \n\n### HFile的合并\n除了Region会合并和拆分，在Region中的单个Store中也会发生合并（compaction）。   \nHFile为什么要合并？但凡存储在磁盘上的东西都涉及到一个操作：寻址。传统硬盘是磁头的移动寻址，是一个很慢的动作。当HFile一多，每次读取数据的时候寻址动作就多了，效率就降低了。所以我们要适当减少碎片文件，进而需要合并操作。HFile的合并操作就是在一个store里面找到需要合并的HFile，把他们合并起来，再把之前的碎文件移除。   \n\n#### 0.96版本之后的合并算法\n\n##### 待合并文件挑选条件\n该文件 < （所有文件大小总和 - 该文件大小）* 比例因子   \n如果该文件大小小于最小合并大小(minCompactSize)，直接进入待合并列表。最小合并大小配置项：hbase.hstore.compaction.min.size，如果没有设定该项，则使用hbase.hregion.memstore.flush.size.\n\n##### 以组合作为计算单元\n新的算法不再按文件为单元进行比较了，而是挑出多个文件组合。   \n挑选组合的条件：\n被挑选的文件必须能通过以上提到的筛选条件，并且组合内含有的文件数必须大于hbase.hstore.compaction.min，小于hbase.hstore.compaction.max.   \n挑选完组合后，比较哪个文件组合包含的文件更多，则合并哪个组合。如果出现平局，就挑选哪个文件尺寸总和更少的组合。\n\n调整HFile合并策略，让HFile的数量尽量减小，以减少每次Scan的跨HFile的次数，但同时又要保证该合并策略适用于场景，并且不用太频繁。   \n\n### 读取性能优化\n性能有两方面的提高空间：\n- 调整对于API的用法   \n- 调整系统配置   \n\n#### 参考\n《Mysql不睡觉书》\n","source":"_posts/Hbase基础知识点梳理.md","raw":"title: Hbase基础知识点梳理\nauthor: Peng Fang\ntags:\n  - Hbase\ncategories:\n  - 大数据\ndate: 2018-09-10 20:09:00\n---\n### 整体架构\n从HBase部署架构来说，HBase有两种服务器：Master服务器和RegionServer服务器。   \n一般一个HBase集群有一个Master服务器和几个RegionServer服务器。   \nMaster服务器负责维护表结构信息，Master挂到后还能查询数据，只是不能新建表或修改表。   \n实际的数据存储在RegionServer服务器上，RegionServer保存的表数据是直接存储在Hadoop的HDFS上。客户端获取数据是由客户端直接连接RegionServer服务器。   \nRegionServer非常依赖ZooKeeper服务。ZooKeeper在HBase中扮演管家角色，管理了HBase所有RegionServer的信息，包括具体的数据段存放在哪个RegionServer上。   \n客户端每次与HBase连接，先与ZooKeeper通信，查询出需要与哪个RegionServer连接，然后再连接RegionServer。   \n整体架构图如下：   \n![整体架构图](http://207.148.69.56/pub/imgs/arch/full_arch.png)\n\n#### Region是什么\nRegion就是一段数据的集合。HBase中的表一般拥有一个到多个Region。Region有几个特性：\n- Region不能跨服务器\n- 当数据量大的时候，HBase会拆分region\n- HBase负载均衡的时候，可能会把Region从一个RegionServer移动到另一个上\n- Region是基于HDFS的，所有数据存取操作都是调用了HDFS的客户端接口来实现的\n\n#### RegionServer是什么\nRegionServer是存放Region的容器，直观来说就是服务器上的一个服务。一般来说，一个服务器只会安装一个RegionServer服务。\n当客户端从ZooKeeper获取RegionServer的地址后，它会直接从RegionServer获取数据，插入、删除等数据操作也是经过它。\n\n#### Master是什么\nHBase中Master角色不像领导，更像是打杂的。Master负责各种协调工作，比如建表、删表、移动Region、合并等操作。它们的共性就是需要跨RegionServer，由哪个RegionServer\n来执行都不合适，所以HBase将这些操作放到Master上。这种结构大大降低了集群对Master的依赖，即使Master宕机了，也不影响数据操作。\n\n### 存储架构\nHBase最基本的存储单位是列。行跟行的列可以完全不一样，行与行的数据，甚至同一行的列可以存储在不同的机器上。若干个列被归类为一个列族。   \n存储架构图如下：\n![存储架构图](http://207.148.69.56/pub/imgs/arch/storage_arch.png)\n\n#### 行键是什么\nrowkey是由用户指定的一串不重复字符串。rowkey是决定row存储顺序的唯一凭证。HBase是根据字典排序的。比如：row-1, row-11, row-2。\n\n#### 列族是什么\n建表的时候不需要指定列，但需要确定列族，这就是说一个表有几个列族是一开始确定好的。此外，表的很多属性，比如过期时间、数据块缓存以及是否压缩等都是定义在列族上，而不是定义在表上或者列上。   \n同一个表里的不同列族可以有完全不同的属性配置，但是同一个列族内的所有列都会有相同属性。\n列名称规范是列族：列名，如brother:age。   \n列族的意义是：HBase会把相同的列族尽量放在同一台机器上，所以说，如果想让某一个列被放在一起，就给他们定义相同的列族。   \n一个表设置多少个列族合适？官方的建议是：越少越好，因为Hbase虽然是分布式数据库，但是数据在同一台机器上仍然会加速数据的查询过程。所以请根据实际需要制定列族，列族太多会极大降低数据库性能。\n\n#### 单元格是什么\n一个列上可以存储多个版本的值，多个版本的值被存储在多个单元格里面，多个版本之间用版本号（Version）来区分。所以唯一确定一条结果的表达式应该是行键：列族：列：版本号(rowkey:column family:column:version)。不过版本号是可以省略的，如果不写版本号，HBase默认获取最后一个版本的数据并返回。每个列或者单元格的值都被赋予一个时间戳，这个时间戳默认是由系统指定的，也可以由用户显示指定。\n\n#### Region跟行的关系\n一个Region就是多个行的集合。在Region中行的排序按照行键（rowkey）字典排序。   \n表结构图如下：\n![表结构示意图](http://207.148.69.56/pub/imgs/arch/table_struct.png)\n\n传统数据库insert语句可以把整行的数据一次性写在行语句里面，而在HBase里面如果一行有10列，那么存储一行的数据得写10行的语句。存储语句必须精确写出数据被存储到哪个单元格，根据表：列族：行：列来定义。行的概念被弱化到只有一个抽象的存在，rowkey是其唯一的体现。\n\n### 讲讲ZooKeeper\nZooKeeper不知Hadoop的HA模式（HA的作用是保证一个namenode挂掉的时候，另外一个namenode能立即启动将其代替，这样就不会发生单点故障的问题）用到，HBase也会用到。ZooKeeper是Apache旗下的一个开源项目，它是一个开源的分布式应用程序协调服务，它可以为分布式应用提供一致性服务，提供的功能包括：配置服务、域名服务、分布式同步、组服务等。ZooKeeper负责维护HBase的所有节点，如果ZooKeeper宕掉了，集群的一个节点都连不上。   \nZooKeeper最大的功能之一就是知道某个节点是否宕机了，那么ZooKeeper是如何知道某个节点宕机的呢？   \n答案是，每一个机器在ZooKeeper中都有一个会话（Session），如果某个机器宕机了，这个会话（Session）就会过期，与此同时，ZooKeeper就知道该节点已宕机。   \n多少个节点最好？节点越多容灾能力就越强，不过节点数最好是奇数个，这样有利于仲裁。   \nZooKeeper的容灾机制：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。如果有5个节点，有2个集群宕掉，集群依然可以运行。这是我们称该集群容灾能力是2。目前节点数是6，只要有3个机器宕掉那么集群就宕掉了，此时的容灾能力仍是2。   \nZooKeeper应该存储在一个独立的磁盘上，避免当磁盘出现IO问题的时候ZooKeeper被波及。\n\n### HBase常用命令\n- list   \n查看数据库中有哪些表\n\n- describe   \n查看表属性\n\n- create & alter   \ncreate 'test', 'cf' # 建立一个叫test的表，这个表有一个列族叫cf\nalter 'test', 'cf2' # 新增一个列族\n在生产环境更改表之前，最好先停用（disable）这个表。因为对列族的所有操作都会同步到所有拥有这个表的RegionServer上。当有很多客户端都在连着的时候，直接新增一个列族对性能的影响较大。\n\n- put  \nput 'test', 'row1', 'cf:name', 'jack'\n意思是往test表插入一个单元格，这个单元格的rowkey为row1，也就是说它是属于row1这个行中的一个列。该单元格的列族是cf，单元格的列名是name，数据值是jack。   \n    - 关于时间戳\n    每一个单元格可以存储多个版本的值。它用timestamp来存储该条记录的时间戳，这个时间戳就用来当版本号使用。timestamp虽然是时间的标定，其实可以输入任意的数字，比如1，2，3等。当用scan命令的时候HBase会显示拥有最大（最新）的timestamp的数据版本。   \n    创建表时默认版本是1，也就是说在一个单元格插入多个版本的数据的时候，HBase只会保留最后一个版本。能够在scan操作的结果集看到多个版本的前提是建表时设定的VERSIONS参数要大于1，这样表才能保存设定VERSIONS数个历史记录。修改版本数的命令：   \n    alter 'test', {NAME=>'cf',VERSION=>5} # NAME为要修改的列族的名称，后面跟要修改的属性，我们修改VERSION为5   \n    put 'test','row2','cf:name','ted'   \n    put 'test','row2','cf:name','billy',2222222222222 #自定义时间戳晚于当前时间   \n    scan 'test' # 只能看到时间戳最大的那条结果   \n    get 'test','row2',{COLUMN=>'cf:name', VERSIONS=>3} #查询所有版本的数据   \n\n- scan   \nscan '表名'，这样输入的话，会从第一条数据开始把所有数据全部显示一遍。   \n在HBase中我们用起始行（STARTROW）和结束行（ENDROW）来限制记录的条数。   \nscan 'test',{STARTROW=>'row3'} # 显示所有rowkey大于等于row3的记录   \nscan 'test',{ENDROW=>'row4'} # 小于row4(不包括)的记录   \n两个参数一起用就是显示 >= STARTROW 并且 <ENDROW中的那段数据   \nscan '表名',{COLUMNS=>['列1','列2',...]} # 只遍历指定列   \nscan '表名',{STARTROW=>'起始行键',ENDROW=>'结束行键'} # 指定行键范围   \nscan '表名',{LIMIT=>行数量} # 指定最大返回行数量   \nscan '表名',{TIMERANGE=>[最小时间戳,最大时间戳]} # 找出单元格的历史版本数据   \nscan ’表名',{VERSION=>'版本数'} # 指定版本数，显示单元格多个版本值  \nscan '表名',{FILTER=>'过滤器'} # scan 'table1' { FILTER=> \"PrefixFilter('row1')\" }   \n- get   \nscan可以查询表的多条数据，get只能查询一个单元格的记录。在数据量大的时候，get的查询熟读远远高于scan。   \nget 'test','row7','cf:name' # 查询某个单元格的记录   \nget 'test','row7',{COLUMN=>'cf:name',VERSION=>5} # 把查询版本数设定为5   \nscan 'test',{VERSION=>5} # scan跟上VERSIONS参数也可以查询出多个版本的数据   \n- count   \n计算表的行数  \n- delete   \ndelete '表名','行键','列名'   \ndelete '表名','行键','列名',时间戳   \n- split   \n拆分(split)指定的Region，除了可以等到Region大小达到阈值后触发自动拆分机制来拆分Region，还可以手动拆分指定的Region，如 split 'region名'。   \n- merge_region   \n合并（merge）两个Region和一个Region   \n- compact   \n调用指定表的所有Region或者指定列族的所有Region的合并（compact）机制。通过compact机制可以合并该Region或者Region的列族下的所有HFile（StoreFile），以此来提高读取性能。   \ncompact跟合并（merge）并不一样。merge操作是合并2个Region为1个，而compact操作更新的单元StoreFile，一个Region可以含有一个或多个StoreFile，compact操作的目的在于减少StoreFile的数量以增加读取性能。\n- 快照   \n快照就是表在某个时刻的结构和数据。可以使用快照来将表恢复到某个时刻的结构和数据，恢复过程很快，往往只有数秒。HBase是怎么做到的呢？其实快照并不直接复制数据，而是保持一份文件列表，通过修改表所链接的文件夹来改变表的数据，好处是：速度极快；不额外占用磁盘空间。   \nHBase要求在恢复快照之前必须要先停用（disable）需要恢复的表，才能恢复快照，避免不必要的麻烦。先停用，然后恢复快照，再启用（enable）。   \n通过snapshot命令可以创建指定表的快照。   \n disable 'mgdmcredit:userblack_temp'   \n snapshot 'mgdmcredit:userblack_temp', 'userblack_temp_snapshot'   \n disable 'mgdmcredit:userblack'  \n drop 'mgdmcredit:userblack'   \n clone_snapshot 'userblack_temp_snapshot' 'mgdmcredit:userblack'   \n enable 'mgdmcredit:userblack_temp'   \n truncate 'mgdmcredit:userblack_temp'   \n delete_snapshot 'userblack_temp_snapshot'   \n clone_snapshot使用快照的数据创建一张新表，创建的过程很快，因为使用的方式不是复制数据，并且修改新表的数据不会影响旧表的数据。   \n\n ### 客户端API\n 在HBase中有一个理念：所有数据皆为bytes。在HBase中数据最终都会被序列化为bytes[]保存。\n - put方法\n ``` java\ntry(Connection connection = ConnectionFactory.createConnection(config)) {\n    Table table = connection.getTable(TableName.valueOf(\"myTable\"));\n    Put put = new Put(Bytes.toBytes(\"row1\"));\n    put.addColumn(Bytes.toBytes(\"mycf\"), Bytes.toBytes(\"name\"), Bytes.toBytes(\"ted\"));\n    table.put(put);\n}\n ```\n 新增和修改类型，修改就是往同一个rowkey再执行一次put操作，将之前的数据覆盖掉。\n JDK的try-with-resources，上面例子中看到try(...){....}，{....}中的代码执行完毕会自动释放资源，不需要手动写finally语句块了。\n\n- get方法\nget不像scan，并不能用多种条件去查找，只能用行键去查找。不过HBase一行有可能很大，我们可以通过设置参数让get只获取其中一部分的数据，以提高查询性能。   \n``` java\nGet get = new Get(Bytes.toBytes(\"row1\"));\nget.setMaxVersions(10);\nResult result = table.get(get);\nList<Cell> cells = result.getColumnCells(Bytes.toBytes(\"mycf\"), Bytes.toBytes(\"name\"));\nfor(Cell c: cells) {\n    // 用CellUtil.cloneValue来获取数据而不是getValue\n    bytes[] cValue = CellUtil.cloneValue(c);\n    System.out.println(Bytes.toString(cValue));\n}\n```\n用CellUtil.cloneValue来获取数据而不用getValue的原因：根据目前getValue的实现代码，每次调用它都会获取整个Cell的数组备份，比较消耗性能。所以当需要获取Cell中的值时，请使用CellUtil.cloneValue方法。   \n\n- Scan扫描   \n查询多条数据我们会想到用scan。默认的scan是从表头一直遍历到表尾，非常耗时好性能，实际工作中，我们至少要定义一下遍历的起始rowkey，如果知道遍历的结束rowkey就好了。   \n举个栗子：\n``` java\nScan scan = new Scan(Bytes.toBytes(\"row1\"));\nResultScanner rs = table.getScanner(scan);\n...\nrs.close(); // 使用完了关闭\n```\n这里为什么是getScanner()而不是scan()？因为Table通过传入scan之后返回的结果扫描器（ResultScanner）并不是实际的查询结果。获取结果扫描器（ResultScanner）的时候并没有实际去查询数据。真正要获取数据的时候要打开扫描器，然后遍历它，这个时候才真正地查询了数据。\n这个ResultScanner就像关系型数据库中的ResultSet一样是需要持续占用资源的，所以用完后务必记得关闭它。\n\n- 缓存   \nHBase在扫描的时候已经默认开启了缓存。具体来讲，每一次的next()操作都会产生一次完整的RPC请求，而这次RPC请求可以获取多少数据是通过hbase-site.xml中的hbase.client.scanner.caching参数配置的。比如配置为1，遍历了10个结果就会发送10次请求。\n可以在表的层面修改缓存条数，也可以在扫描层面去修改。表的层面修改时通过hbase-site.xml中的配置:   \n``` xml\n<property>\n<name>hbase.client.scanner.caching</name>\n<value>1000</value>\n</property>\n```\nhbase.client.scanner.caching的默认配置是100.   \n在扫描层面修改缓存可以使用Scan.setCaching(int caching)方法设置一次next获取的数据条数，这个配置的优先级比配置文件内的hbase.client.scanner.caching高。   \n\n### HBase二层查询架构\n从0.96版本之后三层查询架构被改成了二层查询架构。直接把.META.表所在的RegionServer信息存储到zk中的/hbase/meta-region-server去了。   \n![二级查询架构图](http://207.148.69.56/pub/imgs/arch/query_arch.png)\n上图可以总结成以下流程：   \n1. 客户端先通过ZooKeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase:meta表。  \n2. 客户端连接含有hbase:meta表的RegionServer。hbase:meta表存储了所有Region的行键范围信息，通过这个表可以查询出你要存放的rowkey属于哪个Region的范围里面，以及这个Region又属于哪个RegionServer。\n3. 获取这些信息后，客户端就可以直连其中一台用于你要存取的rowkey的RegionServer，并直接对其操作。\n4. 客户端会把meta信息缓存起来，下次操作就不需要进行以上加载habse:meta的步骤了。\n\n### 过滤器\n过滤器就是在Get或Scan的时候过滤结果用的，可以把他看成SQL中的where语句。HBase中过滤器被用户创建出来以后会被序列化我可以网络传输的格式，然后被分发到各个RegionServer。在RegionServer中Filter被还原出来。这样在Scan的遍历过程中，不满足过滤条件的结果将不会被返回客户端。\n\n#### 前缀过滤器\n这种过滤器可以根据行键的前缀匹配同样是这个前缀的行。运用它能提高查询性能，因为前缀过滤器在遇到扫描的行键的前缀大于所指定的前缀时，立即停止扫描。\n就算用了前缀过滤器也依然要结合上STARTROW使用，否则scan还是会从第一条记录开始扫描，浪费了大量的性能。\n当我们用Scan扫描数据的时候，如果使用STOPROW来指定终止行，结果集中并不会包含终止行。如果想在结果中包含终止行可以有两种方式：\n（1）在终止行的rowkey上增加一个字节的数据，然后把增加一个字节的rowkey作为STOPROW\n（2）使用包含结尾过滤器（InclusiveStopFilter）\n\n### Region的拆分\n通过查询hbase:meta我们可以形象地看到，一个Region就是一个表的一段rowkey的数据集合。\n当Region太大的时候HBase会拆分它。   \n为什么要拆分Region？因为当某个Region太大的时候读取效率太低了。   \n我们可以想想为什么从MySQL、Oracle转移到NoSQL来？最根本的原因就是这些关系型数据库把数据放到一个地方，而当数据量增大到上亿的时候同一个磁盘已经无法应付这些数据的读取了，因为遍历一遍数据的时间实在太长了。用NoSQL的理由就是其能把大数据分拆到不同的机器上，然后像查询一个完整的数据一样查询他们。当Region太大的时候，一样会遇到跟传统数据库一样的问题，所以要拆分Region。   \n\n#### IncreasingToUpperBounRegionSplitPolicy策略（默认）\n计算公式：  \nMath.min(tableRegionsCount^3 * initialSize, defaultRegionMaxFileSzie)   \n- tableRegionsCount：表在所有RegionServer上拥有的Region数量总和\n- initialSize：如果定义了hbase.increasing.policy.initial.size，则使用这个数值，否则，就使用memstore的刷写大小的2倍，即hbase.hregion.memstore.flush.size *2\n- defaultRegionMaxFileSzie：ConstantSizeRegionSplitPolicy所用到的hbase.hregion.max(一般是10G)\n\n一开始可以先定义拆分点，但是当书记开始工作起来后会出现热点不均的情况，所以推荐的方法是：\n1. 用预拆分导入初始数据\n2. 然后用自动拆分来让HBase自动管理Region\nRegion的拆分对性能的影响还是很大的，默认的策略已经适用于大多数情况。可以尝试哪种策略最好。\n\n### Region的合并\nRegion的合并（merge）并不是为了性能考虑，更多地出于维护的目的。   \n啥时候才会用到合并呢？比如删了大量的数据，每个Region都变小了，这个时候分成这么多个Region就有点浪费，可以把Region合并起来。   \n通过Merge类来合并叫冷合并，就是要把HMaster和所有的HRegionServer全部停掉，再执行才可以；   \n通过online_merge命令叫做热合并   \n\n### HFile的合并\n除了Region会合并和拆分，在Region中的单个Store中也会发生合并（compaction）。   \nHFile为什么要合并？但凡存储在磁盘上的东西都涉及到一个操作：寻址。传统硬盘是磁头的移动寻址，是一个很慢的动作。当HFile一多，每次读取数据的时候寻址动作就多了，效率就降低了。所以我们要适当减少碎片文件，进而需要合并操作。HFile的合并操作就是在一个store里面找到需要合并的HFile，把他们合并起来，再把之前的碎文件移除。   \n\n#### 0.96版本之后的合并算法\n\n##### 待合并文件挑选条件\n该文件 < （所有文件大小总和 - 该文件大小）* 比例因子   \n如果该文件大小小于最小合并大小(minCompactSize)，直接进入待合并列表。最小合并大小配置项：hbase.hstore.compaction.min.size，如果没有设定该项，则使用hbase.hregion.memstore.flush.size.\n\n##### 以组合作为计算单元\n新的算法不再按文件为单元进行比较了，而是挑出多个文件组合。   \n挑选组合的条件：\n被挑选的文件必须能通过以上提到的筛选条件，并且组合内含有的文件数必须大于hbase.hstore.compaction.min，小于hbase.hstore.compaction.max.   \n挑选完组合后，比较哪个文件组合包含的文件更多，则合并哪个组合。如果出现平局，就挑选哪个文件尺寸总和更少的组合。\n\n调整HFile合并策略，让HFile的数量尽量减小，以减少每次Scan的跨HFile的次数，但同时又要保证该合并策略适用于场景，并且不用太频繁。   \n\n### 读取性能优化\n性能有两方面的提高空间：\n- 调整对于API的用法   \n- 调整系统配置   \n\n#### 参考\n《Mysql不睡觉书》\n","slug":"Hbase基础知识点梳理","published":1,"updated":"2018-09-19T12:18:09.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0700072v2pvk4beymb","content":"<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p>从HBase部署架构来说，HBase有两种服务器：Master服务器和RegionServer服务器。<br>一般一个HBase集群有一个Master服务器和几个RegionServer服务器。<br>Master服务器负责维护表结构信息，Master挂到后还能查询数据，只是不能新建表或修改表。<br>实际的数据存储在RegionServer服务器上，RegionServer保存的表数据是直接存储在Hadoop的HDFS上。客户端获取数据是由客户端直接连接RegionServer服务器。<br>RegionServer非常依赖ZooKeeper服务。ZooKeeper在HBase中扮演管家角色，管理了HBase所有RegionServer的信息，包括具体的数据段存放在哪个RegionServer上。<br>客户端每次与HBase连接，先与ZooKeeper通信，查询出需要与哪个RegionServer连接，然后再连接RegionServer。<br>整体架构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/full_arch.png\" alt=\"整体架构图\"></p>\n<h4 id=\"Region是什么\"><a href=\"#Region是什么\" class=\"headerlink\" title=\"Region是什么\"></a>Region是什么</h4><p>Region就是一段数据的集合。HBase中的表一般拥有一个到多个Region。Region有几个特性：</p>\n<ul>\n<li>Region不能跨服务器</li>\n<li>当数据量大的时候，HBase会拆分region</li>\n<li>HBase负载均衡的时候，可能会把Region从一个RegionServer移动到另一个上</li>\n<li>Region是基于HDFS的，所有数据存取操作都是调用了HDFS的客户端接口来实现的</li>\n</ul>\n<h4 id=\"RegionServer是什么\"><a href=\"#RegionServer是什么\" class=\"headerlink\" title=\"RegionServer是什么\"></a>RegionServer是什么</h4><p>RegionServer是存放Region的容器，直观来说就是服务器上的一个服务。一般来说，一个服务器只会安装一个RegionServer服务。<br>当客户端从ZooKeeper获取RegionServer的地址后，它会直接从RegionServer获取数据，插入、删除等数据操作也是经过它。</p>\n<h4 id=\"Master是什么\"><a href=\"#Master是什么\" class=\"headerlink\" title=\"Master是什么\"></a>Master是什么</h4><p>HBase中Master角色不像领导，更像是打杂的。Master负责各种协调工作，比如建表、删表、移动Region、合并等操作。它们的共性就是需要跨RegionServer，由哪个RegionServer<br>来执行都不合适，所以HBase将这些操作放到Master上。这种结构大大降低了集群对Master的依赖，即使Master宕机了，也不影响数据操作。</p>\n<h3 id=\"存储架构\"><a href=\"#存储架构\" class=\"headerlink\" title=\"存储架构\"></a>存储架构</h3><p>HBase最基本的存储单位是列。行跟行的列可以完全不一样，行与行的数据，甚至同一行的列可以存储在不同的机器上。若干个列被归类为一个列族。<br>存储架构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/storage_arch.png\" alt=\"存储架构图\"></p>\n<h4 id=\"行键是什么\"><a href=\"#行键是什么\" class=\"headerlink\" title=\"行键是什么\"></a>行键是什么</h4><p>rowkey是由用户指定的一串不重复字符串。rowkey是决定row存储顺序的唯一凭证。HBase是根据字典排序的。比如：row-1, row-11, row-2。</p>\n<h4 id=\"列族是什么\"><a href=\"#列族是什么\" class=\"headerlink\" title=\"列族是什么\"></a>列族是什么</h4><p>建表的时候不需要指定列，但需要确定列族，这就是说一个表有几个列族是一开始确定好的。此外，表的很多属性，比如过期时间、数据块缓存以及是否压缩等都是定义在列族上，而不是定义在表上或者列上。<br>同一个表里的不同列族可以有完全不同的属性配置，但是同一个列族内的所有列都会有相同属性。<br>列名称规范是列族：列名，如brother:age。<br>列族的意义是：HBase会把相同的列族尽量放在同一台机器上，所以说，如果想让某一个列被放在一起，就给他们定义相同的列族。<br>一个表设置多少个列族合适？官方的建议是：越少越好，因为Hbase虽然是分布式数据库，但是数据在同一台机器上仍然会加速数据的查询过程。所以请根据实际需要制定列族，列族太多会极大降低数据库性能。</p>\n<h4 id=\"单元格是什么\"><a href=\"#单元格是什么\" class=\"headerlink\" title=\"单元格是什么\"></a>单元格是什么</h4><p>一个列上可以存储多个版本的值，多个版本的值被存储在多个单元格里面，多个版本之间用版本号（Version）来区分。所以唯一确定一条结果的表达式应该是行键：列族：列：版本号(rowkey:column family:column:version)。不过版本号是可以省略的，如果不写版本号，HBase默认获取最后一个版本的数据并返回。每个列或者单元格的值都被赋予一个时间戳，这个时间戳默认是由系统指定的，也可以由用户显示指定。</p>\n<h4 id=\"Region跟行的关系\"><a href=\"#Region跟行的关系\" class=\"headerlink\" title=\"Region跟行的关系\"></a>Region跟行的关系</h4><p>一个Region就是多个行的集合。在Region中行的排序按照行键（rowkey）字典排序。<br>表结构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/table_struct.png\" alt=\"表结构示意图\"></p>\n<p>传统数据库insert语句可以把整行的数据一次性写在行语句里面，而在HBase里面如果一行有10列，那么存储一行的数据得写10行的语句。存储语句必须精确写出数据被存储到哪个单元格，根据表：列族：行：列来定义。行的概念被弱化到只有一个抽象的存在，rowkey是其唯一的体现。</p>\n<h3 id=\"讲讲ZooKeeper\"><a href=\"#讲讲ZooKeeper\" class=\"headerlink\" title=\"讲讲ZooKeeper\"></a>讲讲ZooKeeper</h3><p>ZooKeeper不知Hadoop的HA模式（HA的作用是保证一个namenode挂掉的时候，另外一个namenode能立即启动将其代替，这样就不会发生单点故障的问题）用到，HBase也会用到。ZooKeeper是Apache旗下的一个开源项目，它是一个开源的分布式应用程序协调服务，它可以为分布式应用提供一致性服务，提供的功能包括：配置服务、域名服务、分布式同步、组服务等。ZooKeeper负责维护HBase的所有节点，如果ZooKeeper宕掉了，集群的一个节点都连不上。<br>ZooKeeper最大的功能之一就是知道某个节点是否宕机了，那么ZooKeeper是如何知道某个节点宕机的呢？<br>答案是，每一个机器在ZooKeeper中都有一个会话（Session），如果某个机器宕机了，这个会话（Session）就会过期，与此同时，ZooKeeper就知道该节点已宕机。<br>多少个节点最好？节点越多容灾能力就越强，不过节点数最好是奇数个，这样有利于仲裁。<br>ZooKeeper的容灾机制：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。如果有5个节点，有2个集群宕掉，集群依然可以运行。这是我们称该集群容灾能力是2。目前节点数是6，只要有3个机器宕掉那么集群就宕掉了，此时的容灾能力仍是2。<br>ZooKeeper应该存储在一个独立的磁盘上，避免当磁盘出现IO问题的时候ZooKeeper被波及。</p>\n<h3 id=\"HBase常用命令\"><a href=\"#HBase常用命令\" class=\"headerlink\" title=\"HBase常用命令\"></a>HBase常用命令</h3><ul>\n<li><p>list<br>查看数据库中有哪些表</p>\n</li>\n<li><p>describe<br>查看表属性</p>\n</li>\n<li><p>create &amp; alter<br>create ‘test’, ‘cf’ # 建立一个叫test的表，这个表有一个列族叫cf<br>alter ‘test’, ‘cf2’ # 新增一个列族<br>在生产环境更改表之前，最好先停用（disable）这个表。因为对列族的所有操作都会同步到所有拥有这个表的RegionServer上。当有很多客户端都在连着的时候，直接新增一个列族对性能的影响较大。</p>\n</li>\n<li><p>put<br>put ‘test’, ‘row1’, ‘cf:name’, ‘jack’<br>意思是往test表插入一个单元格，这个单元格的rowkey为row1，也就是说它是属于row1这个行中的一个列。该单元格的列族是cf，单元格的列名是name，数据值是jack。   </p>\n<ul>\n<li>关于时间戳<br>每一个单元格可以存储多个版本的值。它用timestamp来存储该条记录的时间戳，这个时间戳就用来当版本号使用。timestamp虽然是时间的标定，其实可以输入任意的数字，比如1，2，3等。当用scan命令的时候HBase会显示拥有最大（最新）的timestamp的数据版本。<br>创建表时默认版本是1，也就是说在一个单元格插入多个版本的数据的时候，HBase只会保留最后一个版本。能够在scan操作的结果集看到多个版本的前提是建表时设定的VERSIONS参数要大于1，这样表才能保存设定VERSIONS数个历史记录。修改版本数的命令：<br>alter ‘test’, {NAME=&gt;’cf’,VERSION=&gt;5} # NAME为要修改的列族的名称，后面跟要修改的属性，我们修改VERSION为5<br>put ‘test’,’row2’,’cf:name’,’ted’<br>put ‘test’,’row2’,’cf:name’,’billy’,2222222222222 #自定义时间戳晚于当前时间<br>scan ‘test’ # 只能看到时间戳最大的那条结果<br>get ‘test’,’row2’,{COLUMN=&gt;’cf:name’, VERSIONS=&gt;3} #查询所有版本的数据   </li>\n</ul>\n</li>\n<li><p>scan<br>scan ‘表名’，这样输入的话，会从第一条数据开始把所有数据全部显示一遍。<br>在HBase中我们用起始行（STARTROW）和结束行（ENDROW）来限制记录的条数。<br>scan ‘test’,{STARTROW=&gt;’row3’} # 显示所有rowkey大于等于row3的记录<br>scan ‘test’,{ENDROW=&gt;’row4’} # 小于row4(不包括)的记录<br>两个参数一起用就是显示 &gt;= STARTROW 并且 &lt;ENDROW中的那段数据<br>scan ‘表名’,{COLUMNS=&gt;[‘列1’,’列2’,…]} # 只遍历指定列<br>scan ‘表名’,{STARTROW=&gt;’起始行键’,ENDROW=&gt;’结束行键’} # 指定行键范围<br>scan ‘表名’,{LIMIT=&gt;行数量} # 指定最大返回行数量<br>scan ‘表名’,{TIMERANGE=&gt;[最小时间戳,最大时间戳]} # 找出单元格的历史版本数据<br>scan ’表名’,{VERSION=&gt;’版本数’} # 指定版本数，显示单元格多个版本值<br>scan ‘表名’,{FILTER=&gt;’过滤器’} # scan ‘table1’ { FILTER=&gt; “PrefixFilter(‘row1’)” }   </p>\n</li>\n<li>get<br>scan可以查询表的多条数据，get只能查询一个单元格的记录。在数据量大的时候，get的查询熟读远远高于scan。<br>get ‘test’,’row7’,’cf:name’ # 查询某个单元格的记录<br>get ‘test’,’row7’,{COLUMN=&gt;’cf:name’,VERSION=&gt;5} # 把查询版本数设定为5<br>scan ‘test’,{VERSION=&gt;5} # scan跟上VERSIONS参数也可以查询出多个版本的数据   </li>\n<li>count<br>计算表的行数  </li>\n<li>delete<br>delete ‘表名’,’行键’,’列名’<br>delete ‘表名’,’行键’,’列名’,时间戳   </li>\n<li>split<br>拆分(split)指定的Region，除了可以等到Region大小达到阈值后触发自动拆分机制来拆分Region，还可以手动拆分指定的Region，如 split ‘region名’。   </li>\n<li>merge_region<br>合并（merge）两个Region和一个Region   </li>\n<li>compact<br>调用指定表的所有Region或者指定列族的所有Region的合并（compact）机制。通过compact机制可以合并该Region或者Region的列族下的所有HFile（StoreFile），以此来提高读取性能。<br>compact跟合并（merge）并不一样。merge操作是合并2个Region为1个，而compact操作更新的单元StoreFile，一个Region可以含有一个或多个StoreFile，compact操作的目的在于减少StoreFile的数量以增加读取性能。</li>\n<li><p>快照<br>快照就是表在某个时刻的结构和数据。可以使用快照来将表恢复到某个时刻的结构和数据，恢复过程很快，往往只有数秒。HBase是怎么做到的呢？其实快照并不直接复制数据，而是保持一份文件列表，通过修改表所链接的文件夹来改变表的数据，好处是：速度极快；不额外占用磁盘空间。<br>HBase要求在恢复快照之前必须要先停用（disable）需要恢复的表，才能恢复快照，避免不必要的麻烦。先停用，然后恢复快照，再启用（enable）。<br>通过snapshot命令可以创建指定表的快照。<br>disable ‘mgdmcredit:userblack_temp’<br>snapshot ‘mgdmcredit:userblack_temp’, ‘userblack_temp_snapshot’<br>disable ‘mgdmcredit:userblack’<br>drop ‘mgdmcredit:userblack’<br>clone_snapshot ‘userblack_temp_snapshot’ ‘mgdmcredit:userblack’<br>enable ‘mgdmcredit:userblack_temp’<br>truncate ‘mgdmcredit:userblack_temp’<br>delete_snapshot ‘userblack_temp_snapshot’<br>clone_snapshot使用快照的数据创建一张新表，创建的过程很快，因为使用的方式不是复制数据，并且修改新表的数据不会影响旧表的数据。   </p>\n<h3 id=\"客户端API\"><a href=\"#客户端API\" class=\"headerlink\" title=\"客户端API\"></a>客户端API</h3><p>在HBase中有一个理念：所有数据皆为bytes。在HBase中数据最终都会被序列化为bytes[]保存。</p>\n<ul>\n<li>put方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Connection connection = ConnectionFactory.createConnection(config)) &#123;</span><br><span class=\"line\">    Table table = connection.getTable(TableName.valueOf(<span class=\"string\">\"myTable\"</span>));</span><br><span class=\"line\">    Put put = <span class=\"keyword\">new</span> Put(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">    put.addColumn(Bytes.toBytes(<span class=\"string\">\"mycf\"</span>), Bytes.toBytes(<span class=\"string\">\"name\"</span>), Bytes.toBytes(<span class=\"string\">\"ted\"</span>));</span><br><span class=\"line\">    table.put(put);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>新增和修改类型，修改就是往同一个rowkey再执行一次put操作，将之前的数据覆盖掉。<br>JDK的try-with-resources，上面例子中看到try(…){….}，{….}中的代码执行完毕会自动释放资源，不需要手动写finally语句块了。</p>\n</li>\n<li><p>get方法<br>get不像scan，并不能用多种条件去查找，只能用行键去查找。不过HBase一行有可能很大，我们可以通过设置参数让get只获取其中一部分的数据，以提高查询性能。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get get = <span class=\"keyword\">new</span> Get(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">get.setMaxVersions(<span class=\"number\">10</span>);</span><br><span class=\"line\">Result result = table.get(get);</span><br><span class=\"line\">List&lt;Cell&gt; cells = result.getColumnCells(Bytes.toBytes(<span class=\"string\">\"mycf\"</span>), Bytes.toBytes(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Cell c: cells) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用CellUtil.cloneValue来获取数据而不是getValue</span></span><br><span class=\"line\">    bytes[] cValue = CellUtil.cloneValue(c);</span><br><span class=\"line\">    System.out.println(Bytes.toString(cValue));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用CellUtil.cloneValue来获取数据而不用getValue的原因：根据目前getValue的实现代码，每次调用它都会获取整个Cell的数组备份，比较消耗性能。所以当需要获取Cell中的值时，请使用CellUtil.cloneValue方法。   </p>\n<ul>\n<li>Scan扫描<br>查询多条数据我们会想到用scan。默认的scan是从表头一直遍历到表尾，非常耗时好性能，实际工作中，我们至少要定义一下遍历的起始rowkey，如果知道遍历的结束rowkey就好了。<br>举个栗子：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">ResultScanner rs = table.getScanner(scan);</span><br><span class=\"line\">...</span><br><span class=\"line\">rs.close(); <span class=\"comment\">// 使用完了关闭</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里为什么是getScanner()而不是scan()？因为Table通过传入scan之后返回的结果扫描器（ResultScanner）并不是实际的查询结果。获取结果扫描器（ResultScanner）的时候并没有实际去查询数据。真正要获取数据的时候要打开扫描器，然后遍历它，这个时候才真正地查询了数据。<br>这个ResultScanner就像关系型数据库中的ResultSet一样是需要持续占用资源的，所以用完后务必记得关闭它。</p>\n<ul>\n<li>缓存<br>HBase在扫描的时候已经默认开启了缓存。具体来讲，每一次的next()操作都会产生一次完整的RPC请求，而这次RPC请求可以获取多少数据是通过hbase-site.xml中的hbase.client.scanner.caching参数配置的。比如配置为1，遍历了10个结果就会发送10次请求。<br>可以在表的层面修改缓存条数，也可以在扫描层面去修改。表的层面修改时通过hbase-site.xml中的配置:   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.client.scanner.caching<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>hbase.client.scanner.caching的默认配置是100.<br>在扫描层面修改缓存可以使用Scan.setCaching(int caching)方法设置一次next获取的数据条数，这个配置的优先级比配置文件内的hbase.client.scanner.caching高。   </p>\n<h3 id=\"HBase二层查询架构\"><a href=\"#HBase二层查询架构\" class=\"headerlink\" title=\"HBase二层查询架构\"></a>HBase二层查询架构</h3><p>从0.96版本之后三层查询架构被改成了二层查询架构。直接把.META.表所在的RegionServer信息存储到zk中的/hbase/meta-region-server去了。<br><img src=\"http://207.148.69.56/pub/imgs/arch/query_arch.png\" alt=\"二级查询架构图\"><br>上图可以总结成以下流程：   </p>\n<ol>\n<li>客户端先通过ZooKeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase:meta表。  </li>\n<li>客户端连接含有hbase:meta表的RegionServer。hbase:meta表存储了所有Region的行键范围信息，通过这个表可以查询出你要存放的rowkey属于哪个Region的范围里面，以及这个Region又属于哪个RegionServer。</li>\n<li>获取这些信息后，客户端就可以直连其中一台用于你要存取的rowkey的RegionServer，并直接对其操作。</li>\n<li>客户端会把meta信息缓存起来，下次操作就不需要进行以上加载habse:meta的步骤了。</li>\n</ol>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>过滤器就是在Get或Scan的时候过滤结果用的，可以把他看成SQL中的where语句。HBase中过滤器被用户创建出来以后会被序列化我可以网络传输的格式，然后被分发到各个RegionServer。在RegionServer中Filter被还原出来。这样在Scan的遍历过程中，不满足过滤条件的结果将不会被返回客户端。</p>\n<h4 id=\"前缀过滤器\"><a href=\"#前缀过滤器\" class=\"headerlink\" title=\"前缀过滤器\"></a>前缀过滤器</h4><p>这种过滤器可以根据行键的前缀匹配同样是这个前缀的行。运用它能提高查询性能，因为前缀过滤器在遇到扫描的行键的前缀大于所指定的前缀时，立即停止扫描。<br>就算用了前缀过滤器也依然要结合上STARTROW使用，否则scan还是会从第一条记录开始扫描，浪费了大量的性能。<br>当我们用Scan扫描数据的时候，如果使用STOPROW来指定终止行，结果集中并不会包含终止行。如果想在结果中包含终止行可以有两种方式：<br>（1）在终止行的rowkey上增加一个字节的数据，然后把增加一个字节的rowkey作为STOPROW<br>（2）使用包含结尾过滤器（InclusiveStopFilter）</p>\n<h3 id=\"Region的拆分\"><a href=\"#Region的拆分\" class=\"headerlink\" title=\"Region的拆分\"></a>Region的拆分</h3><p>通过查询hbase:meta我们可以形象地看到，一个Region就是一个表的一段rowkey的数据集合。<br>当Region太大的时候HBase会拆分它。<br>为什么要拆分Region？因为当某个Region太大的时候读取效率太低了。<br>我们可以想想为什么从MySQL、Oracle转移到NoSQL来？最根本的原因就是这些关系型数据库把数据放到一个地方，而当数据量增大到上亿的时候同一个磁盘已经无法应付这些数据的读取了，因为遍历一遍数据的时间实在太长了。用NoSQL的理由就是其能把大数据分拆到不同的机器上，然后像查询一个完整的数据一样查询他们。当Region太大的时候，一样会遇到跟传统数据库一样的问题，所以要拆分Region。   </p>\n<h4 id=\"IncreasingToUpperBounRegionSplitPolicy策略（默认）\"><a href=\"#IncreasingToUpperBounRegionSplitPolicy策略（默认）\" class=\"headerlink\" title=\"IncreasingToUpperBounRegionSplitPolicy策略（默认）\"></a>IncreasingToUpperBounRegionSplitPolicy策略（默认）</h4><p>计算公式：<br>Math.min(tableRegionsCount^3 * initialSize, defaultRegionMaxFileSzie)   </p>\n<ul>\n<li>tableRegionsCount：表在所有RegionServer上拥有的Region数量总和</li>\n<li>initialSize：如果定义了hbase.increasing.policy.initial.size，则使用这个数值，否则，就使用memstore的刷写大小的2倍，即hbase.hregion.memstore.flush.size *2</li>\n<li>defaultRegionMaxFileSzie：ConstantSizeRegionSplitPolicy所用到的hbase.hregion.max(一般是10G)</li>\n</ul>\n<p>一开始可以先定义拆分点，但是当书记开始工作起来后会出现热点不均的情况，所以推荐的方法是：</p>\n<ol>\n<li>用预拆分导入初始数据</li>\n<li>然后用自动拆分来让HBase自动管理Region<br>Region的拆分对性能的影响还是很大的，默认的策略已经适用于大多数情况。可以尝试哪种策略最好。</li>\n</ol>\n<h3 id=\"Region的合并\"><a href=\"#Region的合并\" class=\"headerlink\" title=\"Region的合并\"></a>Region的合并</h3><p>Region的合并（merge）并不是为了性能考虑，更多地出于维护的目的。<br>啥时候才会用到合并呢？比如删了大量的数据，每个Region都变小了，这个时候分成这么多个Region就有点浪费，可以把Region合并起来。<br>通过Merge类来合并叫冷合并，就是要把HMaster和所有的HRegionServer全部停掉，再执行才可以；<br>通过online_merge命令叫做热合并   </p>\n<h3 id=\"HFile的合并\"><a href=\"#HFile的合并\" class=\"headerlink\" title=\"HFile的合并\"></a>HFile的合并</h3><p>除了Region会合并和拆分，在Region中的单个Store中也会发生合并（compaction）。<br>HFile为什么要合并？但凡存储在磁盘上的东西都涉及到一个操作：寻址。传统硬盘是磁头的移动寻址，是一个很慢的动作。当HFile一多，每次读取数据的时候寻址动作就多了，效率就降低了。所以我们要适当减少碎片文件，进而需要合并操作。HFile的合并操作就是在一个store里面找到需要合并的HFile，把他们合并起来，再把之前的碎文件移除。   </p>\n<h4 id=\"0-96版本之后的合并算法\"><a href=\"#0-96版本之后的合并算法\" class=\"headerlink\" title=\"0.96版本之后的合并算法\"></a>0.96版本之后的合并算法</h4><h5 id=\"待合并文件挑选条件\"><a href=\"#待合并文件挑选条件\" class=\"headerlink\" title=\"待合并文件挑选条件\"></a>待合并文件挑选条件</h5><p>该文件 &lt; （所有文件大小总和 - 该文件大小）* 比例因子<br>如果该文件大小小于最小合并大小(minCompactSize)，直接进入待合并列表。最小合并大小配置项：hbase.hstore.compaction.min.size，如果没有设定该项，则使用hbase.hregion.memstore.flush.size.</p>\n<h5 id=\"以组合作为计算单元\"><a href=\"#以组合作为计算单元\" class=\"headerlink\" title=\"以组合作为计算单元\"></a>以组合作为计算单元</h5><p>新的算法不再按文件为单元进行比较了，而是挑出多个文件组合。<br>挑选组合的条件：<br>被挑选的文件必须能通过以上提到的筛选条件，并且组合内含有的文件数必须大于hbase.hstore.compaction.min，小于hbase.hstore.compaction.max.<br>挑选完组合后，比较哪个文件组合包含的文件更多，则合并哪个组合。如果出现平局，就挑选哪个文件尺寸总和更少的组合。</p>\n<p>调整HFile合并策略，让HFile的数量尽量减小，以减少每次Scan的跨HFile的次数，但同时又要保证该合并策略适用于场景，并且不用太频繁。   </p>\n<h3 id=\"读取性能优化\"><a href=\"#读取性能优化\" class=\"headerlink\" title=\"读取性能优化\"></a>读取性能优化</h3><p>性能有两方面的提高空间：</p>\n<ul>\n<li>调整对于API的用法   </li>\n<li>调整系统配置   </li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>《Mysql不睡觉书》</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h3><p>从HBase部署架构来说，HBase有两种服务器：Master服务器和RegionServer服务器。<br>一般一个HBase集群有一个Master服务器和几个RegionServer服务器。<br>Master服务器负责维护表结构信息，Master挂到后还能查询数据，只是不能新建表或修改表。<br>实际的数据存储在RegionServer服务器上，RegionServer保存的表数据是直接存储在Hadoop的HDFS上。客户端获取数据是由客户端直接连接RegionServer服务器。<br>RegionServer非常依赖ZooKeeper服务。ZooKeeper在HBase中扮演管家角色，管理了HBase所有RegionServer的信息，包括具体的数据段存放在哪个RegionServer上。<br>客户端每次与HBase连接，先与ZooKeeper通信，查询出需要与哪个RegionServer连接，然后再连接RegionServer。<br>整体架构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/full_arch.png\" alt=\"整体架构图\"></p>\n<h4 id=\"Region是什么\"><a href=\"#Region是什么\" class=\"headerlink\" title=\"Region是什么\"></a>Region是什么</h4><p>Region就是一段数据的集合。HBase中的表一般拥有一个到多个Region。Region有几个特性：</p>\n<ul>\n<li>Region不能跨服务器</li>\n<li>当数据量大的时候，HBase会拆分region</li>\n<li>HBase负载均衡的时候，可能会把Region从一个RegionServer移动到另一个上</li>\n<li>Region是基于HDFS的，所有数据存取操作都是调用了HDFS的客户端接口来实现的</li>\n</ul>\n<h4 id=\"RegionServer是什么\"><a href=\"#RegionServer是什么\" class=\"headerlink\" title=\"RegionServer是什么\"></a>RegionServer是什么</h4><p>RegionServer是存放Region的容器，直观来说就是服务器上的一个服务。一般来说，一个服务器只会安装一个RegionServer服务。<br>当客户端从ZooKeeper获取RegionServer的地址后，它会直接从RegionServer获取数据，插入、删除等数据操作也是经过它。</p>\n<h4 id=\"Master是什么\"><a href=\"#Master是什么\" class=\"headerlink\" title=\"Master是什么\"></a>Master是什么</h4><p>HBase中Master角色不像领导，更像是打杂的。Master负责各种协调工作，比如建表、删表、移动Region、合并等操作。它们的共性就是需要跨RegionServer，由哪个RegionServer<br>来执行都不合适，所以HBase将这些操作放到Master上。这种结构大大降低了集群对Master的依赖，即使Master宕机了，也不影响数据操作。</p>\n<h3 id=\"存储架构\"><a href=\"#存储架构\" class=\"headerlink\" title=\"存储架构\"></a>存储架构</h3><p>HBase最基本的存储单位是列。行跟行的列可以完全不一样，行与行的数据，甚至同一行的列可以存储在不同的机器上。若干个列被归类为一个列族。<br>存储架构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/storage_arch.png\" alt=\"存储架构图\"></p>\n<h4 id=\"行键是什么\"><a href=\"#行键是什么\" class=\"headerlink\" title=\"行键是什么\"></a>行键是什么</h4><p>rowkey是由用户指定的一串不重复字符串。rowkey是决定row存储顺序的唯一凭证。HBase是根据字典排序的。比如：row-1, row-11, row-2。</p>\n<h4 id=\"列族是什么\"><a href=\"#列族是什么\" class=\"headerlink\" title=\"列族是什么\"></a>列族是什么</h4><p>建表的时候不需要指定列，但需要确定列族，这就是说一个表有几个列族是一开始确定好的。此外，表的很多属性，比如过期时间、数据块缓存以及是否压缩等都是定义在列族上，而不是定义在表上或者列上。<br>同一个表里的不同列族可以有完全不同的属性配置，但是同一个列族内的所有列都会有相同属性。<br>列名称规范是列族：列名，如brother:age。<br>列族的意义是：HBase会把相同的列族尽量放在同一台机器上，所以说，如果想让某一个列被放在一起，就给他们定义相同的列族。<br>一个表设置多少个列族合适？官方的建议是：越少越好，因为Hbase虽然是分布式数据库，但是数据在同一台机器上仍然会加速数据的查询过程。所以请根据实际需要制定列族，列族太多会极大降低数据库性能。</p>\n<h4 id=\"单元格是什么\"><a href=\"#单元格是什么\" class=\"headerlink\" title=\"单元格是什么\"></a>单元格是什么</h4><p>一个列上可以存储多个版本的值，多个版本的值被存储在多个单元格里面，多个版本之间用版本号（Version）来区分。所以唯一确定一条结果的表达式应该是行键：列族：列：版本号(rowkey:column family:column:version)。不过版本号是可以省略的，如果不写版本号，HBase默认获取最后一个版本的数据并返回。每个列或者单元格的值都被赋予一个时间戳，这个时间戳默认是由系统指定的，也可以由用户显示指定。</p>\n<h4 id=\"Region跟行的关系\"><a href=\"#Region跟行的关系\" class=\"headerlink\" title=\"Region跟行的关系\"></a>Region跟行的关系</h4><p>一个Region就是多个行的集合。在Region中行的排序按照行键（rowkey）字典排序。<br>表结构图如下：<br><img src=\"http://207.148.69.56/pub/imgs/arch/table_struct.png\" alt=\"表结构示意图\"></p>\n<p>传统数据库insert语句可以把整行的数据一次性写在行语句里面，而在HBase里面如果一行有10列，那么存储一行的数据得写10行的语句。存储语句必须精确写出数据被存储到哪个单元格，根据表：列族：行：列来定义。行的概念被弱化到只有一个抽象的存在，rowkey是其唯一的体现。</p>\n<h3 id=\"讲讲ZooKeeper\"><a href=\"#讲讲ZooKeeper\" class=\"headerlink\" title=\"讲讲ZooKeeper\"></a>讲讲ZooKeeper</h3><p>ZooKeeper不知Hadoop的HA模式（HA的作用是保证一个namenode挂掉的时候，另外一个namenode能立即启动将其代替，这样就不会发生单点故障的问题）用到，HBase也会用到。ZooKeeper是Apache旗下的一个开源项目，它是一个开源的分布式应用程序协调服务，它可以为分布式应用提供一致性服务，提供的功能包括：配置服务、域名服务、分布式同步、组服务等。ZooKeeper负责维护HBase的所有节点，如果ZooKeeper宕掉了，集群的一个节点都连不上。<br>ZooKeeper最大的功能之一就是知道某个节点是否宕机了，那么ZooKeeper是如何知道某个节点宕机的呢？<br>答案是，每一个机器在ZooKeeper中都有一个会话（Session），如果某个机器宕机了，这个会话（Session）就会过期，与此同时，ZooKeeper就知道该节点已宕机。<br>多少个节点最好？节点越多容灾能力就越强，不过节点数最好是奇数个，这样有利于仲裁。<br>ZooKeeper的容灾机制：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。如果有5个节点，有2个集群宕掉，集群依然可以运行。这是我们称该集群容灾能力是2。目前节点数是6，只要有3个机器宕掉那么集群就宕掉了，此时的容灾能力仍是2。<br>ZooKeeper应该存储在一个独立的磁盘上，避免当磁盘出现IO问题的时候ZooKeeper被波及。</p>\n<h3 id=\"HBase常用命令\"><a href=\"#HBase常用命令\" class=\"headerlink\" title=\"HBase常用命令\"></a>HBase常用命令</h3><ul>\n<li><p>list<br>查看数据库中有哪些表</p>\n</li>\n<li><p>describe<br>查看表属性</p>\n</li>\n<li><p>create &amp; alter<br>create ‘test’, ‘cf’ # 建立一个叫test的表，这个表有一个列族叫cf<br>alter ‘test’, ‘cf2’ # 新增一个列族<br>在生产环境更改表之前，最好先停用（disable）这个表。因为对列族的所有操作都会同步到所有拥有这个表的RegionServer上。当有很多客户端都在连着的时候，直接新增一个列族对性能的影响较大。</p>\n</li>\n<li><p>put<br>put ‘test’, ‘row1’, ‘cf:name’, ‘jack’<br>意思是往test表插入一个单元格，这个单元格的rowkey为row1，也就是说它是属于row1这个行中的一个列。该单元格的列族是cf，单元格的列名是name，数据值是jack。   </p>\n<ul>\n<li>关于时间戳<br>每一个单元格可以存储多个版本的值。它用timestamp来存储该条记录的时间戳，这个时间戳就用来当版本号使用。timestamp虽然是时间的标定，其实可以输入任意的数字，比如1，2，3等。当用scan命令的时候HBase会显示拥有最大（最新）的timestamp的数据版本。<br>创建表时默认版本是1，也就是说在一个单元格插入多个版本的数据的时候，HBase只会保留最后一个版本。能够在scan操作的结果集看到多个版本的前提是建表时设定的VERSIONS参数要大于1，这样表才能保存设定VERSIONS数个历史记录。修改版本数的命令：<br>alter ‘test’, {NAME=&gt;’cf’,VERSION=&gt;5} # NAME为要修改的列族的名称，后面跟要修改的属性，我们修改VERSION为5<br>put ‘test’,’row2’,’cf:name’,’ted’<br>put ‘test’,’row2’,’cf:name’,’billy’,2222222222222 #自定义时间戳晚于当前时间<br>scan ‘test’ # 只能看到时间戳最大的那条结果<br>get ‘test’,’row2’,{COLUMN=&gt;’cf:name’, VERSIONS=&gt;3} #查询所有版本的数据   </li>\n</ul>\n</li>\n<li><p>scan<br>scan ‘表名’，这样输入的话，会从第一条数据开始把所有数据全部显示一遍。<br>在HBase中我们用起始行（STARTROW）和结束行（ENDROW）来限制记录的条数。<br>scan ‘test’,{STARTROW=&gt;’row3’} # 显示所有rowkey大于等于row3的记录<br>scan ‘test’,{ENDROW=&gt;’row4’} # 小于row4(不包括)的记录<br>两个参数一起用就是显示 &gt;= STARTROW 并且 &lt;ENDROW中的那段数据<br>scan ‘表名’,{COLUMNS=&gt;[‘列1’,’列2’,…]} # 只遍历指定列<br>scan ‘表名’,{STARTROW=&gt;’起始行键’,ENDROW=&gt;’结束行键’} # 指定行键范围<br>scan ‘表名’,{LIMIT=&gt;行数量} # 指定最大返回行数量<br>scan ‘表名’,{TIMERANGE=&gt;[最小时间戳,最大时间戳]} # 找出单元格的历史版本数据<br>scan ’表名’,{VERSION=&gt;’版本数’} # 指定版本数，显示单元格多个版本值<br>scan ‘表名’,{FILTER=&gt;’过滤器’} # scan ‘table1’ { FILTER=&gt; “PrefixFilter(‘row1’)” }   </p>\n</li>\n<li>get<br>scan可以查询表的多条数据，get只能查询一个单元格的记录。在数据量大的时候，get的查询熟读远远高于scan。<br>get ‘test’,’row7’,’cf:name’ # 查询某个单元格的记录<br>get ‘test’,’row7’,{COLUMN=&gt;’cf:name’,VERSION=&gt;5} # 把查询版本数设定为5<br>scan ‘test’,{VERSION=&gt;5} # scan跟上VERSIONS参数也可以查询出多个版本的数据   </li>\n<li>count<br>计算表的行数  </li>\n<li>delete<br>delete ‘表名’,’行键’,’列名’<br>delete ‘表名’,’行键’,’列名’,时间戳   </li>\n<li>split<br>拆分(split)指定的Region，除了可以等到Region大小达到阈值后触发自动拆分机制来拆分Region，还可以手动拆分指定的Region，如 split ‘region名’。   </li>\n<li>merge_region<br>合并（merge）两个Region和一个Region   </li>\n<li>compact<br>调用指定表的所有Region或者指定列族的所有Region的合并（compact）机制。通过compact机制可以合并该Region或者Region的列族下的所有HFile（StoreFile），以此来提高读取性能。<br>compact跟合并（merge）并不一样。merge操作是合并2个Region为1个，而compact操作更新的单元StoreFile，一个Region可以含有一个或多个StoreFile，compact操作的目的在于减少StoreFile的数量以增加读取性能。</li>\n<li><p>快照<br>快照就是表在某个时刻的结构和数据。可以使用快照来将表恢复到某个时刻的结构和数据，恢复过程很快，往往只有数秒。HBase是怎么做到的呢？其实快照并不直接复制数据，而是保持一份文件列表，通过修改表所链接的文件夹来改变表的数据，好处是：速度极快；不额外占用磁盘空间。<br>HBase要求在恢复快照之前必须要先停用（disable）需要恢复的表，才能恢复快照，避免不必要的麻烦。先停用，然后恢复快照，再启用（enable）。<br>通过snapshot命令可以创建指定表的快照。<br>disable ‘mgdmcredit:userblack_temp’<br>snapshot ‘mgdmcredit:userblack_temp’, ‘userblack_temp_snapshot’<br>disable ‘mgdmcredit:userblack’<br>drop ‘mgdmcredit:userblack’<br>clone_snapshot ‘userblack_temp_snapshot’ ‘mgdmcredit:userblack’<br>enable ‘mgdmcredit:userblack_temp’<br>truncate ‘mgdmcredit:userblack_temp’<br>delete_snapshot ‘userblack_temp_snapshot’<br>clone_snapshot使用快照的数据创建一张新表，创建的过程很快，因为使用的方式不是复制数据，并且修改新表的数据不会影响旧表的数据。   </p>\n<h3 id=\"客户端API\"><a href=\"#客户端API\" class=\"headerlink\" title=\"客户端API\"></a>客户端API</h3><p>在HBase中有一个理念：所有数据皆为bytes。在HBase中数据最终都会被序列化为bytes[]保存。</p>\n<ul>\n<li>put方法<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>(Connection connection = ConnectionFactory.createConnection(config)) &#123;</span><br><span class=\"line\">    Table table = connection.getTable(TableName.valueOf(<span class=\"string\">\"myTable\"</span>));</span><br><span class=\"line\">    Put put = <span class=\"keyword\">new</span> Put(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">    put.addColumn(Bytes.toBytes(<span class=\"string\">\"mycf\"</span>), Bytes.toBytes(<span class=\"string\">\"name\"</span>), Bytes.toBytes(<span class=\"string\">\"ted\"</span>));</span><br><span class=\"line\">    table.put(put);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>新增和修改类型，修改就是往同一个rowkey再执行一次put操作，将之前的数据覆盖掉。<br>JDK的try-with-resources，上面例子中看到try(…){….}，{….}中的代码执行完毕会自动释放资源，不需要手动写finally语句块了。</p>\n</li>\n<li><p>get方法<br>get不像scan，并不能用多种条件去查找，只能用行键去查找。不过HBase一行有可能很大，我们可以通过设置参数让get只获取其中一部分的数据，以提高查询性能。   </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Get get = <span class=\"keyword\">new</span> Get(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">get.setMaxVersions(<span class=\"number\">10</span>);</span><br><span class=\"line\">Result result = table.get(get);</span><br><span class=\"line\">List&lt;Cell&gt; cells = result.getColumnCells(Bytes.toBytes(<span class=\"string\">\"mycf\"</span>), Bytes.toBytes(<span class=\"string\">\"name\"</span>));</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Cell c: cells) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 用CellUtil.cloneValue来获取数据而不是getValue</span></span><br><span class=\"line\">    bytes[] cValue = CellUtil.cloneValue(c);</span><br><span class=\"line\">    System.out.println(Bytes.toString(cValue));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>用CellUtil.cloneValue来获取数据而不用getValue的原因：根据目前getValue的实现代码，每次调用它都会获取整个Cell的数组备份，比较消耗性能。所以当需要获取Cell中的值时，请使用CellUtil.cloneValue方法。   </p>\n<ul>\n<li>Scan扫描<br>查询多条数据我们会想到用scan。默认的scan是从表头一直遍历到表尾，非常耗时好性能，实际工作中，我们至少要定义一下遍历的起始rowkey，如果知道遍历的结束rowkey就好了。<br>举个栗子：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Scan scan = <span class=\"keyword\">new</span> Scan(Bytes.toBytes(<span class=\"string\">\"row1\"</span>));</span><br><span class=\"line\">ResultScanner rs = table.getScanner(scan);</span><br><span class=\"line\">...</span><br><span class=\"line\">rs.close(); <span class=\"comment\">// 使用完了关闭</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里为什么是getScanner()而不是scan()？因为Table通过传入scan之后返回的结果扫描器（ResultScanner）并不是实际的查询结果。获取结果扫描器（ResultScanner）的时候并没有实际去查询数据。真正要获取数据的时候要打开扫描器，然后遍历它，这个时候才真正地查询了数据。<br>这个ResultScanner就像关系型数据库中的ResultSet一样是需要持续占用资源的，所以用完后务必记得关闭它。</p>\n<ul>\n<li>缓存<br>HBase在扫描的时候已经默认开启了缓存。具体来讲，每一次的next()操作都会产生一次完整的RPC请求，而这次RPC请求可以获取多少数据是通过hbase-site.xml中的hbase.client.scanner.caching参数配置的。比如配置为1，遍历了10个结果就会发送10次请求。<br>可以在表的层面修改缓存条数，也可以在扫描层面去修改。表的层面修改时通过hbase-site.xml中的配置:   <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hbase.client.scanner.caching<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>hbase.client.scanner.caching的默认配置是100.<br>在扫描层面修改缓存可以使用Scan.setCaching(int caching)方法设置一次next获取的数据条数，这个配置的优先级比配置文件内的hbase.client.scanner.caching高。   </p>\n<h3 id=\"HBase二层查询架构\"><a href=\"#HBase二层查询架构\" class=\"headerlink\" title=\"HBase二层查询架构\"></a>HBase二层查询架构</h3><p>从0.96版本之后三层查询架构被改成了二层查询架构。直接把.META.表所在的RegionServer信息存储到zk中的/hbase/meta-region-server去了。<br><img src=\"http://207.148.69.56/pub/imgs/arch/query_arch.png\" alt=\"二级查询架构图\"><br>上图可以总结成以下流程：   </p>\n<ol>\n<li>客户端先通过ZooKeeper的/hbase/meta-region-server节点查询到哪台RegionServer上有hbase:meta表。  </li>\n<li>客户端连接含有hbase:meta表的RegionServer。hbase:meta表存储了所有Region的行键范围信息，通过这个表可以查询出你要存放的rowkey属于哪个Region的范围里面，以及这个Region又属于哪个RegionServer。</li>\n<li>获取这些信息后，客户端就可以直连其中一台用于你要存取的rowkey的RegionServer，并直接对其操作。</li>\n<li>客户端会把meta信息缓存起来，下次操作就不需要进行以上加载habse:meta的步骤了。</li>\n</ol>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><p>过滤器就是在Get或Scan的时候过滤结果用的，可以把他看成SQL中的where语句。HBase中过滤器被用户创建出来以后会被序列化我可以网络传输的格式，然后被分发到各个RegionServer。在RegionServer中Filter被还原出来。这样在Scan的遍历过程中，不满足过滤条件的结果将不会被返回客户端。</p>\n<h4 id=\"前缀过滤器\"><a href=\"#前缀过滤器\" class=\"headerlink\" title=\"前缀过滤器\"></a>前缀过滤器</h4><p>这种过滤器可以根据行键的前缀匹配同样是这个前缀的行。运用它能提高查询性能，因为前缀过滤器在遇到扫描的行键的前缀大于所指定的前缀时，立即停止扫描。<br>就算用了前缀过滤器也依然要结合上STARTROW使用，否则scan还是会从第一条记录开始扫描，浪费了大量的性能。<br>当我们用Scan扫描数据的时候，如果使用STOPROW来指定终止行，结果集中并不会包含终止行。如果想在结果中包含终止行可以有两种方式：<br>（1）在终止行的rowkey上增加一个字节的数据，然后把增加一个字节的rowkey作为STOPROW<br>（2）使用包含结尾过滤器（InclusiveStopFilter）</p>\n<h3 id=\"Region的拆分\"><a href=\"#Region的拆分\" class=\"headerlink\" title=\"Region的拆分\"></a>Region的拆分</h3><p>通过查询hbase:meta我们可以形象地看到，一个Region就是一个表的一段rowkey的数据集合。<br>当Region太大的时候HBase会拆分它。<br>为什么要拆分Region？因为当某个Region太大的时候读取效率太低了。<br>我们可以想想为什么从MySQL、Oracle转移到NoSQL来？最根本的原因就是这些关系型数据库把数据放到一个地方，而当数据量增大到上亿的时候同一个磁盘已经无法应付这些数据的读取了，因为遍历一遍数据的时间实在太长了。用NoSQL的理由就是其能把大数据分拆到不同的机器上，然后像查询一个完整的数据一样查询他们。当Region太大的时候，一样会遇到跟传统数据库一样的问题，所以要拆分Region。   </p>\n<h4 id=\"IncreasingToUpperBounRegionSplitPolicy策略（默认）\"><a href=\"#IncreasingToUpperBounRegionSplitPolicy策略（默认）\" class=\"headerlink\" title=\"IncreasingToUpperBounRegionSplitPolicy策略（默认）\"></a>IncreasingToUpperBounRegionSplitPolicy策略（默认）</h4><p>计算公式：<br>Math.min(tableRegionsCount^3 * initialSize, defaultRegionMaxFileSzie)   </p>\n<ul>\n<li>tableRegionsCount：表在所有RegionServer上拥有的Region数量总和</li>\n<li>initialSize：如果定义了hbase.increasing.policy.initial.size，则使用这个数值，否则，就使用memstore的刷写大小的2倍，即hbase.hregion.memstore.flush.size *2</li>\n<li>defaultRegionMaxFileSzie：ConstantSizeRegionSplitPolicy所用到的hbase.hregion.max(一般是10G)</li>\n</ul>\n<p>一开始可以先定义拆分点，但是当书记开始工作起来后会出现热点不均的情况，所以推荐的方法是：</p>\n<ol>\n<li>用预拆分导入初始数据</li>\n<li>然后用自动拆分来让HBase自动管理Region<br>Region的拆分对性能的影响还是很大的，默认的策略已经适用于大多数情况。可以尝试哪种策略最好。</li>\n</ol>\n<h3 id=\"Region的合并\"><a href=\"#Region的合并\" class=\"headerlink\" title=\"Region的合并\"></a>Region的合并</h3><p>Region的合并（merge）并不是为了性能考虑，更多地出于维护的目的。<br>啥时候才会用到合并呢？比如删了大量的数据，每个Region都变小了，这个时候分成这么多个Region就有点浪费，可以把Region合并起来。<br>通过Merge类来合并叫冷合并，就是要把HMaster和所有的HRegionServer全部停掉，再执行才可以；<br>通过online_merge命令叫做热合并   </p>\n<h3 id=\"HFile的合并\"><a href=\"#HFile的合并\" class=\"headerlink\" title=\"HFile的合并\"></a>HFile的合并</h3><p>除了Region会合并和拆分，在Region中的单个Store中也会发生合并（compaction）。<br>HFile为什么要合并？但凡存储在磁盘上的东西都涉及到一个操作：寻址。传统硬盘是磁头的移动寻址，是一个很慢的动作。当HFile一多，每次读取数据的时候寻址动作就多了，效率就降低了。所以我们要适当减少碎片文件，进而需要合并操作。HFile的合并操作就是在一个store里面找到需要合并的HFile，把他们合并起来，再把之前的碎文件移除。   </p>\n<h4 id=\"0-96版本之后的合并算法\"><a href=\"#0-96版本之后的合并算法\" class=\"headerlink\" title=\"0.96版本之后的合并算法\"></a>0.96版本之后的合并算法</h4><h5 id=\"待合并文件挑选条件\"><a href=\"#待合并文件挑选条件\" class=\"headerlink\" title=\"待合并文件挑选条件\"></a>待合并文件挑选条件</h5><p>该文件 &lt; （所有文件大小总和 - 该文件大小）* 比例因子<br>如果该文件大小小于最小合并大小(minCompactSize)，直接进入待合并列表。最小合并大小配置项：hbase.hstore.compaction.min.size，如果没有设定该项，则使用hbase.hregion.memstore.flush.size.</p>\n<h5 id=\"以组合作为计算单元\"><a href=\"#以组合作为计算单元\" class=\"headerlink\" title=\"以组合作为计算单元\"></a>以组合作为计算单元</h5><p>新的算法不再按文件为单元进行比较了，而是挑出多个文件组合。<br>挑选组合的条件：<br>被挑选的文件必须能通过以上提到的筛选条件，并且组合内含有的文件数必须大于hbase.hstore.compaction.min，小于hbase.hstore.compaction.max.<br>挑选完组合后，比较哪个文件组合包含的文件更多，则合并哪个组合。如果出现平局，就挑选哪个文件尺寸总和更少的组合。</p>\n<p>调整HFile合并策略，让HFile的数量尽量减小，以减少每次Scan的跨HFile的次数，但同时又要保证该合并策略适用于场景，并且不用太频繁。   </p>\n<h3 id=\"读取性能优化\"><a href=\"#读取性能优化\" class=\"headerlink\" title=\"读取性能优化\"></a>读取性能优化</h3><p>性能有两方面的提高空间：</p>\n<ul>\n<li>调整对于API的用法   </li>\n<li>调整系统配置   </li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p>《Mysql不睡觉书》</p>\n"},{"title":"Linux下离线安装node和npm","author":"Peng Fang","date":"2017-08-10T09:56:00.000Z","_content":"\n本文记录在Linux环境下怎样离线安装node和npm环境。\n\n## 上传安装包到服务器\n>从[Download Node.js and npm](https://nodejs.org/en/download/)下载Linux Binaries \n>可运行`uname -a`查看系统的位数，如x86_64为64为系统。\n>先上传安装包到FTP，用root账号登录服务器后从FTP下载安装包\n\n## 执行安装命令\n1. 解压安装包到想要安装node的目录\n``` sh\nsudo mkdir /usr/lib/nodejs\nsudo tar -xJvf node-v8.2.1-linux-x64.tar.xz -C /usr/lib/nodejs\ncd /usr/lib/nodejs\nsudo mv node-v8.2.1-linux-x64/ node-v8.2.1\n```\n2. 设置环境变量\n设置环境变量`vi ~/.profile`，在最后添加下面的shell命令\n```sh\n# Nodejs\nexport NODEJS_HOME=/usr/lib/nodejs/node-v8.2.1\nexport PATH=$NODEJS_HOME/bin:$PATH\n```\n执行`source ~/.profile`使环境变量生效\n\n3. 创建软链接\n配置了环境变量，有可能出现npm命令找不到的情况。我的办法是添加软链接：\n```sh\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/bin/node\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/lib/node\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/npm /usr/bin/npm\n```\n> 注意在Windows下运行过npm install安装了node组件的，到Linux下面删除node_components目录重新运行npm install。\n\n4. 测试安装\n执行下面的命令测试安装是否成功\n```sh\nnode -v\n```\n这里输出：\n> v8.2.1\n\n```sh\nnpm version\n```\n这里输出：\n>     { \n>      'vue-riskaudit': '1.0.5',\n>       npm: '5.3.0',\n>       ares: '1.10.1-DEV',\n>       cldr: '31.0.1',\n>       http_parser: '2.7.0',\n>       icu: '59.1',\n>       modules: '57',\n>       node: '8.2.1',\n>       openssl: '1.0.2l',\n>       tz: '2017b',\n>       unicode: '9.0',\n>       uv: '1.13.1',\n>       v8: '5.8.283.41',\n>       zlib: '1.2.11' \n>     }","source":"_posts/Linux下离线安装node和npm.md","raw":"title: Linux下离线安装node和npm\nauthor: Peng Fang\ntags:\n  - 前端环境\ncategories:\n  - 环境安装\ndate: 2017-08-10 17:56:00\n---\n\n本文记录在Linux环境下怎样离线安装node和npm环境。\n\n## 上传安装包到服务器\n>从[Download Node.js and npm](https://nodejs.org/en/download/)下载Linux Binaries \n>可运行`uname -a`查看系统的位数，如x86_64为64为系统。\n>先上传安装包到FTP，用root账号登录服务器后从FTP下载安装包\n\n## 执行安装命令\n1. 解压安装包到想要安装node的目录\n``` sh\nsudo mkdir /usr/lib/nodejs\nsudo tar -xJvf node-v8.2.1-linux-x64.tar.xz -C /usr/lib/nodejs\ncd /usr/lib/nodejs\nsudo mv node-v8.2.1-linux-x64/ node-v8.2.1\n```\n2. 设置环境变量\n设置环境变量`vi ~/.profile`，在最后添加下面的shell命令\n```sh\n# Nodejs\nexport NODEJS_HOME=/usr/lib/nodejs/node-v8.2.1\nexport PATH=$NODEJS_HOME/bin:$PATH\n```\n执行`source ~/.profile`使环境变量生效\n\n3. 创建软链接\n配置了环境变量，有可能出现npm命令找不到的情况。我的办法是添加软链接：\n```sh\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/bin/node\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/lib/node\nsudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/npm /usr/bin/npm\n```\n> 注意在Windows下运行过npm install安装了node组件的，到Linux下面删除node_components目录重新运行npm install。\n\n4. 测试安装\n执行下面的命令测试安装是否成功\n```sh\nnode -v\n```\n这里输出：\n> v8.2.1\n\n```sh\nnpm version\n```\n这里输出：\n>     { \n>      'vue-riskaudit': '1.0.5',\n>       npm: '5.3.0',\n>       ares: '1.10.1-DEV',\n>       cldr: '31.0.1',\n>       http_parser: '2.7.0',\n>       icu: '59.1',\n>       modules: '57',\n>       node: '8.2.1',\n>       openssl: '1.0.2l',\n>       tz: '2017b',\n>       unicode: '9.0',\n>       uv: '1.13.1',\n>       v8: '5.8.283.41',\n>       zlib: '1.2.11' \n>     }","slug":"Linux下离线安装node和npm","published":1,"updated":"2018-09-19T10:00:42.447Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz09000b2v2per3m8ftz","content":"<p>本文记录在Linux环境下怎样离线安装node和npm环境。</p>\n<h2 id=\"上传安装包到服务器\"><a href=\"#上传安装包到服务器\" class=\"headerlink\" title=\"上传安装包到服务器\"></a>上传安装包到服务器</h2><blockquote>\n<p>从<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Download Node.js and npm</a>下载Linux Binaries<br>可运行<code>uname -a</code>查看系统的位数，如x86_64为64为系统。<br>先上传安装包到FTP，用root账号登录服务器后从FTP下载安装包</p>\n</blockquote>\n<h2 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h2><ol>\n<li><p>解压安装包到想要安装node的目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/lib/nodejs</span><br><span class=\"line\">sudo tar -xJvf node-v8.2.1-linux-x64.tar.xz -C /usr/lib/nodejs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/nodejs</span><br><span class=\"line\">sudo mv node-v8.2.1-linux-x64/ node-v8.2.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量<br>设置环境变量<code>vi ~/.profile</code>，在最后添加下面的shell命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Nodejs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODEJS_HOME=/usr/lib/nodejs/node-v8.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODEJS_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行<code>source ~/.profile</code>使环境变量生效</p>\n<ol start=\"3\">\n<li>创建软链接<br>配置了环境变量，有可能出现npm命令找不到的情况。我的办法是添加软链接：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/bin/node</span><br><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/lib/node</span><br><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注意在Windows下运行过npm install安装了node组件的，到Linux下面删除node_components目录重新运行npm install。</p>\n</blockquote>\n<ol start=\"4\">\n<li>测试安装<br>执行下面的命令测试安装是否成功<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里输出：</p>\n<blockquote>\n<p>v8.2.1</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version</span><br></pre></td></tr></table></figure>\n<p>这里输出：</p>\n<blockquote>\n<pre><code>{ \n &apos;vue-riskaudit&apos;: &apos;1.0.5&apos;,\n  npm: &apos;5.3.0&apos;,\n  ares: &apos;1.10.1-DEV&apos;,\n  cldr: &apos;31.0.1&apos;,\n  http_parser: &apos;2.7.0&apos;,\n  icu: &apos;59.1&apos;,\n  modules: &apos;57&apos;,\n  node: &apos;8.2.1&apos;,\n  openssl: &apos;1.0.2l&apos;,\n  tz: &apos;2017b&apos;,\n  unicode: &apos;9.0&apos;,\n  uv: &apos;1.13.1&apos;,\n  v8: &apos;5.8.283.41&apos;,\n  zlib: &apos;1.2.11&apos; \n}\n</code></pre></blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>本文记录在Linux环境下怎样离线安装node和npm环境。</p>\n<h2 id=\"上传安装包到服务器\"><a href=\"#上传安装包到服务器\" class=\"headerlink\" title=\"上传安装包到服务器\"></a>上传安装包到服务器</h2><blockquote>\n<p>从<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">Download Node.js and npm</a>下载Linux Binaries<br>可运行<code>uname -a</code>查看系统的位数，如x86_64为64为系统。<br>先上传安装包到FTP，用root账号登录服务器后从FTP下载安装包</p>\n</blockquote>\n<h2 id=\"执行安装命令\"><a href=\"#执行安装命令\" class=\"headerlink\" title=\"执行安装命令\"></a>执行安装命令</h2><ol>\n<li><p>解压安装包到想要安装node的目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /usr/lib/nodejs</span><br><span class=\"line\">sudo tar -xJvf node-v8.2.1-linux-x64.tar.xz -C /usr/lib/nodejs</span><br><span class=\"line\"><span class=\"built_in\">cd</span> /usr/lib/nodejs</span><br><span class=\"line\">sudo mv node-v8.2.1-linux-x64/ node-v8.2.1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置环境变量<br>设置环境变量<code>vi ~/.profile</code>，在最后添加下面的shell命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Nodejs</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> NODEJS_HOME=/usr/lib/nodejs/node-v8.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$NODEJS_HOME</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>执行<code>source ~/.profile</code>使环境变量生效</p>\n<ol start=\"3\">\n<li>创建软链接<br>配置了环境变量，有可能出现npm命令找不到的情况。我的办法是添加软链接：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/bin/node</span><br><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/node /usr/lib/node</span><br><span class=\"line\">sudo ln -s /usr/lib/nodejs/node-v8.2.1/bin/npm /usr/bin/npm</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>注意在Windows下运行过npm install安装了node组件的，到Linux下面删除node_components目录重新运行npm install。</p>\n</blockquote>\n<ol start=\"4\">\n<li>测试安装<br>执行下面的命令测试安装是否成功<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这里输出：</p>\n<blockquote>\n<p>v8.2.1</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm version</span><br></pre></td></tr></table></figure>\n<p>这里输出：</p>\n<blockquote>\n<pre><code>{ \n &apos;vue-riskaudit&apos;: &apos;1.0.5&apos;,\n  npm: &apos;5.3.0&apos;,\n  ares: &apos;1.10.1-DEV&apos;,\n  cldr: &apos;31.0.1&apos;,\n  http_parser: &apos;2.7.0&apos;,\n  icu: &apos;59.1&apos;,\n  modules: &apos;57&apos;,\n  node: &apos;8.2.1&apos;,\n  openssl: &apos;1.0.2l&apos;,\n  tz: &apos;2017b&apos;,\n  unicode: &apos;9.0&apos;,\n  uv: &apos;1.13.1&apos;,\n  v8: &apos;5.8.283.41&apos;,\n  zlib: &apos;1.2.11&apos; \n}\n</code></pre></blockquote>\n"},{"title":"Hive2Hbase入库逻辑","author":"Peng Fang","date":"2018-09-19T12:21:00.000Z","_content":"### Parquet格式hdfs文件根据规则生成HFile\n1. 创建和设置habse参数\n2. 清楚输出目录下HFile文件\n3. 创建mapreduce job\n4. 设置mapper：job.setJarByClass, job.setMapperClass, job.setMapOutputKeyClass, job.setMapOutputValueClass；\n5. 设置Parquet格式的解析器；\n6. 设置合并方法：job.setCombinerClass(Combiner.class)，Combiner继承自Reducer，reduce方法用于数据去重；\n7. 设置写HFile的reduce：HFileOutputFormat2.configureIncrementalLoad, HFileOutputFormat2.setOutputPath; job.setReducerClass(KeyValueSortReducer.class)：设置reducer class, 如KeyValue、Put、Text，以正确地对输入值进行排序。configureIncrementalLoad中会根据前面设置的MapOutputKeyClass来设置ReducerClass，见下面的源代码。\n8. 提交job，轮询等到其完成，退出程序执行。   \n第7步configureIncrementalLoad源代码：   \n``` java\nstatic void configureIncrementalLoad(Job job, HTableDescriptor tableDescriptor,\n                                     RegionLocator regionLocator, Class<? extends OutputFormat<?, ?>> cls) throws IOException,\n        UnsupportedEncodingException {\n    Configuration conf = job.getConfiguration();\n    job.setOutputKeyClass(ImmutableBytesWritable.class);\n    job.setOutputValueClass(KeyValue.class);\n    job.setOutputFormatClass(cls);\n\n    // Based on the configured map output class, set the correct reducer to properly\n    // sort the incoming values.\n    // TODO it would be nice to pick one or the other of these formats.\n    if (KeyValue.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(KeyValueSortReducer.class);\n    } else if (Put.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(PutSortReducer.class);\n    } else if (Text.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(TextSortReducer.class);\n    } else {\n        LOG.warn(\"Unknown map output value type:\" + job.getMapOutputValueClass());\n    }\n\n    conf.setStrings(\"io.serializations\", conf.get(\"io.serializations\"),\n            MutationSerialization.class.getName(), ResultSerialization.class.getName(),\n            KeyValueSerialization.class.getName());\n\n    // Use table's region boundaries for TOP split points.\n    LOG.info(\"Looking up current regions for table \" + tableDescriptor.getTableName());\n    List<ImmutableBytesWritable> startKeys = getRegionStartKeys(regionLocator);\n    LOG.info(\"Configuring \" + startKeys.size() + \" reduce partitions \" +\n            \"to match current region count\");\n    job.setNumReduceTasks(startKeys.size());\n\n    configurePartitioner(job, startKeys);\n    // Set compression algorithms based on column families\n    configureCompression(conf, tableDescriptor);\n    configureBloomType(tableDescriptor, conf);\n    configureBlockSize(tableDescriptor, conf);\n    configureDataBlockEncoding(tableDescriptor, conf);\n\n    TableMapReduceUtil.addDependencyJars(job);\n    TableMapReduceUtil.initCredentials(job);\n    LOG.info(\"Incremental table \" + regionLocator.getName() + \" output configured.\");\n}\n```\n\n### 加载HFile到HBase表\n1. 加载配置文件hbase-site.xml\n2. 读取hdfs配置文件hbase-hdfs-site.xml，然后配置hbase-site.xml的一些参数：   \n  ● 配置dfs.ha.namenodes.[nameservice ID]，让DataNode知道每个集群的所有NameNode   \n  ● 配置dfs.client.failover.proxy.provider.[nameservice    ID]，该参数定义HDFS客户端用来和活动的namenode节目联系的java类。配置的java类是用来给HDFS客户端判断哪个namenode节点是活动的，当前是哪个namenode处理客户端的请求。\n  ● 配置dfs.namenode.rpc-address.[nameservice ID].[name node ID] ， 即配置每个namenode监听的RPC地址。   \n  ● 配置dfs.nameservices--自定义的HDFS服务名，在NameNode节点的集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口。所以需要指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务。用户不必关心当前具体是哪台服务器在提供服务（Active状态），只要访问这个服务就可以了。   \n  ● 配置mapreduce.job.hdfs-servers.token-renewal.exclude为名字服务id的数组，ResourceManager为应用程序更新委托令牌。只有当令牌的更新者是非空字符串时，此行为才被更新为令牌。MapReduce作业可以指示ResourceManager通过指定具有配置mapreduce.job.hdfs-servers.token-renewal.exclude = <host1>，<host2>，..，<hostN>的主机来跳过从某些主机获取的令牌的更新。   \n3. 向HBASE表加载数据\n``` java\nHTable table = new HTable(conf, tableB);\nLoadIncrementalHFile loader = new LoadIncrementalHFile(conf);\nloader.doBulkLoad(new Path(outputPathOnHbase), table);  // outputPathOnHbase是HBASE的hdfs上HFile的路径\n```\nAPI解释如下：\n``` java\nClass LoadIncrementalHFiles：Tool to load the output of HFileOutputFormat into an existing table.\npublic void doBulkLoad(org.apache.hadoop.fs.Path hfofDir,\n              Admin admin,\n              Table table,\n              RegionLocator regionLocator)\n                throws TableNotFoundException,\n                       IOException\nPerform a bulk load of the given directory into the given pre-existing table. This method is not threadsafe.\nParameters:\nhfofDir - the directory that was provided as the output path of a job using HFileOutputFormat\ntable - the table to load into\nThrows:\nTableNotFoundException - if table does not yet exist\nIOException\n```\n\n#### 参考：\nhttps://blog.csdn.net/book_mmicky/article/details/25714339\nhttps://segmentfault.com/a/1190000007239743\nhttp://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html\nhttps://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer\n\n","source":"_posts/Hive2Hbase入库逻辑.md","raw":"title: Hive2Hbase入库逻辑\nauthor: Peng Fang\ntags:\n  - 数据入库\n  - Hbase\ncategories:\n  - 大数据\ndate: 2018-09-19 20:21:00\n---\n### Parquet格式hdfs文件根据规则生成HFile\n1. 创建和设置habse参数\n2. 清楚输出目录下HFile文件\n3. 创建mapreduce job\n4. 设置mapper：job.setJarByClass, job.setMapperClass, job.setMapOutputKeyClass, job.setMapOutputValueClass；\n5. 设置Parquet格式的解析器；\n6. 设置合并方法：job.setCombinerClass(Combiner.class)，Combiner继承自Reducer，reduce方法用于数据去重；\n7. 设置写HFile的reduce：HFileOutputFormat2.configureIncrementalLoad, HFileOutputFormat2.setOutputPath; job.setReducerClass(KeyValueSortReducer.class)：设置reducer class, 如KeyValue、Put、Text，以正确地对输入值进行排序。configureIncrementalLoad中会根据前面设置的MapOutputKeyClass来设置ReducerClass，见下面的源代码。\n8. 提交job，轮询等到其完成，退出程序执行。   \n第7步configureIncrementalLoad源代码：   \n``` java\nstatic void configureIncrementalLoad(Job job, HTableDescriptor tableDescriptor,\n                                     RegionLocator regionLocator, Class<? extends OutputFormat<?, ?>> cls) throws IOException,\n        UnsupportedEncodingException {\n    Configuration conf = job.getConfiguration();\n    job.setOutputKeyClass(ImmutableBytesWritable.class);\n    job.setOutputValueClass(KeyValue.class);\n    job.setOutputFormatClass(cls);\n\n    // Based on the configured map output class, set the correct reducer to properly\n    // sort the incoming values.\n    // TODO it would be nice to pick one or the other of these formats.\n    if (KeyValue.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(KeyValueSortReducer.class);\n    } else if (Put.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(PutSortReducer.class);\n    } else if (Text.class.equals(job.getMapOutputValueClass())) {\n        job.setReducerClass(TextSortReducer.class);\n    } else {\n        LOG.warn(\"Unknown map output value type:\" + job.getMapOutputValueClass());\n    }\n\n    conf.setStrings(\"io.serializations\", conf.get(\"io.serializations\"),\n            MutationSerialization.class.getName(), ResultSerialization.class.getName(),\n            KeyValueSerialization.class.getName());\n\n    // Use table's region boundaries for TOP split points.\n    LOG.info(\"Looking up current regions for table \" + tableDescriptor.getTableName());\n    List<ImmutableBytesWritable> startKeys = getRegionStartKeys(regionLocator);\n    LOG.info(\"Configuring \" + startKeys.size() + \" reduce partitions \" +\n            \"to match current region count\");\n    job.setNumReduceTasks(startKeys.size());\n\n    configurePartitioner(job, startKeys);\n    // Set compression algorithms based on column families\n    configureCompression(conf, tableDescriptor);\n    configureBloomType(tableDescriptor, conf);\n    configureBlockSize(tableDescriptor, conf);\n    configureDataBlockEncoding(tableDescriptor, conf);\n\n    TableMapReduceUtil.addDependencyJars(job);\n    TableMapReduceUtil.initCredentials(job);\n    LOG.info(\"Incremental table \" + regionLocator.getName() + \" output configured.\");\n}\n```\n\n### 加载HFile到HBase表\n1. 加载配置文件hbase-site.xml\n2. 读取hdfs配置文件hbase-hdfs-site.xml，然后配置hbase-site.xml的一些参数：   \n  ● 配置dfs.ha.namenodes.[nameservice ID]，让DataNode知道每个集群的所有NameNode   \n  ● 配置dfs.client.failover.proxy.provider.[nameservice    ID]，该参数定义HDFS客户端用来和活动的namenode节目联系的java类。配置的java类是用来给HDFS客户端判断哪个namenode节点是活动的，当前是哪个namenode处理客户端的请求。\n  ● 配置dfs.namenode.rpc-address.[nameservice ID].[name node ID] ， 即配置每个namenode监听的RPC地址。   \n  ● 配置dfs.nameservices--自定义的HDFS服务名，在NameNode节点的集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口。所以需要指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务。用户不必关心当前具体是哪台服务器在提供服务（Active状态），只要访问这个服务就可以了。   \n  ● 配置mapreduce.job.hdfs-servers.token-renewal.exclude为名字服务id的数组，ResourceManager为应用程序更新委托令牌。只有当令牌的更新者是非空字符串时，此行为才被更新为令牌。MapReduce作业可以指示ResourceManager通过指定具有配置mapreduce.job.hdfs-servers.token-renewal.exclude = <host1>，<host2>，..，<hostN>的主机来跳过从某些主机获取的令牌的更新。   \n3. 向HBASE表加载数据\n``` java\nHTable table = new HTable(conf, tableB);\nLoadIncrementalHFile loader = new LoadIncrementalHFile(conf);\nloader.doBulkLoad(new Path(outputPathOnHbase), table);  // outputPathOnHbase是HBASE的hdfs上HFile的路径\n```\nAPI解释如下：\n``` java\nClass LoadIncrementalHFiles：Tool to load the output of HFileOutputFormat into an existing table.\npublic void doBulkLoad(org.apache.hadoop.fs.Path hfofDir,\n              Admin admin,\n              Table table,\n              RegionLocator regionLocator)\n                throws TableNotFoundException,\n                       IOException\nPerform a bulk load of the given directory into the given pre-existing table. This method is not threadsafe.\nParameters:\nhfofDir - the directory that was provided as the output path of a job using HFileOutputFormat\ntable - the table to load into\nThrows:\nTableNotFoundException - if table does not yet exist\nIOException\n```\n\n#### 参考：\nhttps://blog.csdn.net/book_mmicky/article/details/25714339\nhttps://segmentfault.com/a/1190000007239743\nhttp://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html\nhttps://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer\n\n","slug":"Hive2Hbase入库逻辑","published":1,"updated":"2018-09-19T12:23:18.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0c000c2v2p2912owus","content":"<h3 id=\"Parquet格式hdfs文件根据规则生成HFile\"><a href=\"#Parquet格式hdfs文件根据规则生成HFile\" class=\"headerlink\" title=\"Parquet格式hdfs文件根据规则生成HFile\"></a>Parquet格式hdfs文件根据规则生成HFile</h3><ol>\n<li>创建和设置habse参数</li>\n<li>清楚输出目录下HFile文件</li>\n<li>创建mapreduce job</li>\n<li>设置mapper：job.setJarByClass, job.setMapperClass, job.setMapOutputKeyClass, job.setMapOutputValueClass；</li>\n<li>设置Parquet格式的解析器；</li>\n<li>设置合并方法：job.setCombinerClass(Combiner.class)，Combiner继承自Reducer，reduce方法用于数据去重；</li>\n<li>设置写HFile的reduce：HFileOutputFormat2.configureIncrementalLoad, HFileOutputFormat2.setOutputPath; job.setReducerClass(KeyValueSortReducer.class)：设置reducer class, 如KeyValue、Put、Text，以正确地对输入值进行排序。configureIncrementalLoad中会根据前面设置的MapOutputKeyClass来设置ReducerClass，见下面的源代码。</li>\n<li>提交job，轮询等到其完成，退出程序执行。<br>第7步configureIncrementalLoad源代码：   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">configureIncrementalLoad</span><span class=\"params\">(Job job, HTableDescriptor tableDescriptor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     RegionLocator regionLocator, Class&lt;? extends OutputFormat&lt;?, ?&gt;&gt; cls)</span> <span class=\"keyword\">throws</span> IOException,</span></span><br><span class=\"line\"><span class=\"function\">        UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    Configuration conf = job.getConfiguration();</span><br><span class=\"line\">    job.setOutputKeyClass(ImmutableBytesWritable.class);</span><br><span class=\"line\">    job.setOutputValueClass(KeyValue.class);</span><br><span class=\"line\">    job.setOutputFormatClass(cls);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Based on the configured map output class, set the correct reducer to properly</span></span><br><span class=\"line\">    <span class=\"comment\">// sort the incoming values.</span></span><br><span class=\"line\">    <span class=\"comment\">// TODO it would be nice to pick one or the other of these formats.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (KeyValue.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(KeyValueSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Put.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(PutSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Text.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(TextSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Unknown map output value type:\"</span> + job.getMapOutputValueClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    conf.setStrings(<span class=\"string\">\"io.serializations\"</span>, conf.get(<span class=\"string\">\"io.serializations\"</span>),</span><br><span class=\"line\">            MutationSerialization.class.getName(), ResultSerialization.class.getName(),</span><br><span class=\"line\">            KeyValueSerialization.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use table's region boundaries for TOP split points.</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Looking up current regions for table \"</span> + tableDescriptor.getTableName());</span><br><span class=\"line\">    List&lt;ImmutableBytesWritable&gt; startKeys = getRegionStartKeys(regionLocator);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Configuring \"</span> + startKeys.size() + <span class=\"string\">\" reduce partitions \"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"to match current region count\"</span>);</span><br><span class=\"line\">    job.setNumReduceTasks(startKeys.size());</span><br><span class=\"line\"></span><br><span class=\"line\">    configurePartitioner(job, startKeys);</span><br><span class=\"line\">    <span class=\"comment\">// Set compression algorithms based on column families</span></span><br><span class=\"line\">    configureCompression(conf, tableDescriptor);</span><br><span class=\"line\">    configureBloomType(tableDescriptor, conf);</span><br><span class=\"line\">    configureBlockSize(tableDescriptor, conf);</span><br><span class=\"line\">    configureDataBlockEncoding(tableDescriptor, conf);</span><br><span class=\"line\"></span><br><span class=\"line\">    TableMapReduceUtil.addDependencyJars(job);</span><br><span class=\"line\">    TableMapReduceUtil.initCredentials(job);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Incremental table \"</span> + regionLocator.getName() + <span class=\"string\">\" output configured.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"加载HFile到HBase表\"><a href=\"#加载HFile到HBase表\" class=\"headerlink\" title=\"加载HFile到HBase表\"></a>加载HFile到HBase表</h3><ol>\n<li>加载配置文件hbase-site.xml</li>\n<li>读取hdfs配置文件hbase-hdfs-site.xml，然后配置hbase-site.xml的一些参数：<br>● 配置dfs.ha.namenodes.[nameservice ID]，让DataNode知道每个集群的所有NameNode<br>● 配置dfs.client.failover.proxy.provider.[nameservice    ID]，该参数定义HDFS客户端用来和活动的namenode节目联系的java类。配置的java类是用来给HDFS客户端判断哪个namenode节点是活动的，当前是哪个namenode处理客户端的请求。<br>● 配置dfs.namenode.rpc-address.[nameservice ID].[name node ID] ， 即配置每个namenode监听的RPC地址。<br>● 配置dfs.nameservices–自定义的HDFS服务名，在NameNode节点的集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口。所以需要指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务。用户不必关心当前具体是哪台服务器在提供服务（Active状态），只要访问这个服务就可以了。<br>● 配置mapreduce.job.hdfs-servers.token-renewal.exclude为名字服务id的数组，ResourceManager为应用程序更新委托令牌。只有当令牌的更新者是非空字符串时，此行为才被更新为令牌。MapReduce作业可以指示ResourceManager通过指定具有配置mapreduce.job.hdfs-servers.token-renewal.exclude = <host1>，<host2>，..，<hostn>的主机来跳过从某些主机获取的令牌的更新。   </hostn></host2></host1></li>\n<li>向HBASE表加载数据<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTable table = <span class=\"keyword\">new</span> HTable(conf, tableB);</span><br><span class=\"line\">LoadIncrementalHFile loader = <span class=\"keyword\">new</span> LoadIncrementalHFile(conf);</span><br><span class=\"line\">loader.doBulkLoad(<span class=\"keyword\">new</span> Path(outputPathOnHbase), table);  <span class=\"comment\">// outputPathOnHbase是HBASE的hdfs上HFile的路径</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>API解释如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class LoadIncrementalHFiles：Tool to load the output of HFileOutputFormat into an existing table.</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBulkLoad</span><span class=\"params\">(org.apache.hadoop.fs.Path hfofDir,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              Admin admin,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              Table table,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              RegionLocator regionLocator)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> TableNotFoundException,</span></span><br><span class=\"line\"><span class=\"function\">                       IOException</span></span><br><span class=\"line\"><span class=\"function\">Perform a bulk load of the given directory into the given pre-existing table. This method is not threadsafe.</span></span><br><span class=\"line\"><span class=\"function\">Parameters:</span></span><br><span class=\"line\"><span class=\"function\">hfofDir - the directory that was provided as the output path of a job using HFileOutputFormat</span></span><br><span class=\"line\"><span class=\"function\">table - the table to load into</span></span><br><span class=\"line\"><span class=\"function\">Throws:</span></span><br><span class=\"line\"><span class=\"function\">TableNotFoundException - <span class=\"keyword\">if</span> table does not yet exist</span></span><br><span class=\"line\"><span class=\"function\">IOException</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><p><a href=\"https://blog.csdn.net/book_mmicky/article/details/25714339\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/book_mmicky/article/details/25714339</a><br><a href=\"https://segmentfault.com/a/1190000007239743\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000007239743</a><br><a href=\"http://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html\" target=\"_blank\" rel=\"noopener\">http://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html</a><br><a href=\"https://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer\" target=\"_blank\" rel=\"noopener\">https://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Parquet格式hdfs文件根据规则生成HFile\"><a href=\"#Parquet格式hdfs文件根据规则生成HFile\" class=\"headerlink\" title=\"Parquet格式hdfs文件根据规则生成HFile\"></a>Parquet格式hdfs文件根据规则生成HFile</h3><ol>\n<li>创建和设置habse参数</li>\n<li>清楚输出目录下HFile文件</li>\n<li>创建mapreduce job</li>\n<li>设置mapper：job.setJarByClass, job.setMapperClass, job.setMapOutputKeyClass, job.setMapOutputValueClass；</li>\n<li>设置Parquet格式的解析器；</li>\n<li>设置合并方法：job.setCombinerClass(Combiner.class)，Combiner继承自Reducer，reduce方法用于数据去重；</li>\n<li>设置写HFile的reduce：HFileOutputFormat2.configureIncrementalLoad, HFileOutputFormat2.setOutputPath; job.setReducerClass(KeyValueSortReducer.class)：设置reducer class, 如KeyValue、Put、Text，以正确地对输入值进行排序。configureIncrementalLoad中会根据前面设置的MapOutputKeyClass来设置ReducerClass，见下面的源代码。</li>\n<li>提交job，轮询等到其完成，退出程序执行。<br>第7步configureIncrementalLoad源代码：   <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">configureIncrementalLoad</span><span class=\"params\">(Job job, HTableDescriptor tableDescriptor,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                     RegionLocator regionLocator, Class&lt;? extends OutputFormat&lt;?, ?&gt;&gt; cls)</span> <span class=\"keyword\">throws</span> IOException,</span></span><br><span class=\"line\"><span class=\"function\">        UnsupportedEncodingException </span>&#123;</span><br><span class=\"line\">    Configuration conf = job.getConfiguration();</span><br><span class=\"line\">    job.setOutputKeyClass(ImmutableBytesWritable.class);</span><br><span class=\"line\">    job.setOutputValueClass(KeyValue.class);</span><br><span class=\"line\">    job.setOutputFormatClass(cls);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Based on the configured map output class, set the correct reducer to properly</span></span><br><span class=\"line\">    <span class=\"comment\">// sort the incoming values.</span></span><br><span class=\"line\">    <span class=\"comment\">// TODO it would be nice to pick one or the other of these formats.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (KeyValue.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(KeyValueSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Put.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(PutSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (Text.class.equals(job.getMapOutputValueClass())) &#123;</span><br><span class=\"line\">        job.setReducerClass(TextSortReducer.class);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        LOG.warn(<span class=\"string\">\"Unknown map output value type:\"</span> + job.getMapOutputValueClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    conf.setStrings(<span class=\"string\">\"io.serializations\"</span>, conf.get(<span class=\"string\">\"io.serializations\"</span>),</span><br><span class=\"line\">            MutationSerialization.class.getName(), ResultSerialization.class.getName(),</span><br><span class=\"line\">            KeyValueSerialization.class.getName());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Use table's region boundaries for TOP split points.</span></span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Looking up current regions for table \"</span> + tableDescriptor.getTableName());</span><br><span class=\"line\">    List&lt;ImmutableBytesWritable&gt; startKeys = getRegionStartKeys(regionLocator);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Configuring \"</span> + startKeys.size() + <span class=\"string\">\" reduce partitions \"</span> +</span><br><span class=\"line\">            <span class=\"string\">\"to match current region count\"</span>);</span><br><span class=\"line\">    job.setNumReduceTasks(startKeys.size());</span><br><span class=\"line\"></span><br><span class=\"line\">    configurePartitioner(job, startKeys);</span><br><span class=\"line\">    <span class=\"comment\">// Set compression algorithms based on column families</span></span><br><span class=\"line\">    configureCompression(conf, tableDescriptor);</span><br><span class=\"line\">    configureBloomType(tableDescriptor, conf);</span><br><span class=\"line\">    configureBlockSize(tableDescriptor, conf);</span><br><span class=\"line\">    configureDataBlockEncoding(tableDescriptor, conf);</span><br><span class=\"line\"></span><br><span class=\"line\">    TableMapReduceUtil.addDependencyJars(job);</span><br><span class=\"line\">    TableMapReduceUtil.initCredentials(job);</span><br><span class=\"line\">    LOG.info(<span class=\"string\">\"Incremental table \"</span> + regionLocator.getName() + <span class=\"string\">\" output configured.\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"加载HFile到HBase表\"><a href=\"#加载HFile到HBase表\" class=\"headerlink\" title=\"加载HFile到HBase表\"></a>加载HFile到HBase表</h3><ol>\n<li>加载配置文件hbase-site.xml</li>\n<li>读取hdfs配置文件hbase-hdfs-site.xml，然后配置hbase-site.xml的一些参数：<br>● 配置dfs.ha.namenodes.[nameservice ID]，让DataNode知道每个集群的所有NameNode<br>● 配置dfs.client.failover.proxy.provider.[nameservice    ID]，该参数定义HDFS客户端用来和活动的namenode节目联系的java类。配置的java类是用来给HDFS客户端判断哪个namenode节点是活动的，当前是哪个namenode处理客户端的请求。<br>● 配置dfs.namenode.rpc-address.[nameservice ID].[name node ID] ， 即配置每个namenode监听的RPC地址。<br>● 配置dfs.nameservices–自定义的HDFS服务名，在NameNode节点的集群中，对HDFS集群访问的入口是NameNode所在的服务器。但是在两个NameNode节点的HA集群中，无法配置单一服务器入口。所以需要指定一个逻辑上的服务名，这个服务名是自定义的。当外界访问HDFS集群时，入口就变为这个服务。用户不必关心当前具体是哪台服务器在提供服务（Active状态），只要访问这个服务就可以了。<br>● 配置mapreduce.job.hdfs-servers.token-renewal.exclude为名字服务id的数组，ResourceManager为应用程序更新委托令牌。只有当令牌的更新者是非空字符串时，此行为才被更新为令牌。MapReduce作业可以指示ResourceManager通过指定具有配置mapreduce.job.hdfs-servers.token-renewal.exclude = <host1>，<host2>，..，<hostn>的主机来跳过从某些主机获取的令牌的更新。   </hostn></host2></host1></li>\n<li>向HBASE表加载数据<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTable table = <span class=\"keyword\">new</span> HTable(conf, tableB);</span><br><span class=\"line\">LoadIncrementalHFile loader = <span class=\"keyword\">new</span> LoadIncrementalHFile(conf);</span><br><span class=\"line\">loader.doBulkLoad(<span class=\"keyword\">new</span> Path(outputPathOnHbase), table);  <span class=\"comment\">// outputPathOnHbase是HBASE的hdfs上HFile的路径</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>API解释如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class LoadIncrementalHFiles：Tool to load the output of HFileOutputFormat into an existing table.</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doBulkLoad</span><span class=\"params\">(org.apache.hadoop.fs.Path hfofDir,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              Admin admin,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              Table table,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">              RegionLocator regionLocator)</span></span></span><br><span class=\"line\"><span class=\"function\">                <span class=\"keyword\">throws</span> TableNotFoundException,</span></span><br><span class=\"line\"><span class=\"function\">                       IOException</span></span><br><span class=\"line\"><span class=\"function\">Perform a bulk load of the given directory into the given pre-existing table. This method is not threadsafe.</span></span><br><span class=\"line\"><span class=\"function\">Parameters:</span></span><br><span class=\"line\"><span class=\"function\">hfofDir - the directory that was provided as the output path of a job using HFileOutputFormat</span></span><br><span class=\"line\"><span class=\"function\">table - the table to load into</span></span><br><span class=\"line\"><span class=\"function\">Throws:</span></span><br><span class=\"line\"><span class=\"function\">TableNotFoundException - <span class=\"keyword\">if</span> table does not yet exist</span></span><br><span class=\"line\"><span class=\"function\">IOException</span></span><br></pre></td></tr></table></figure></p>\n<h4 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h4><p><a href=\"https://blog.csdn.net/book_mmicky/article/details/25714339\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/book_mmicky/article/details/25714339</a><br><a href=\"https://segmentfault.com/a/1190000007239743\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000007239743</a><br><a href=\"http://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html\" target=\"_blank\" rel=\"noopener\">http://www.searchdoc.cn/hadoop/hadoop.apache.org/docs/r3.0.0-alpha1/hadoop-project-dist/hadoop-common/release/3.0.0-alpha1/RELEASENOTES.3.0.0-alpha1.com.coder114.cn.html</a><br><a href=\"https://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer\" target=\"_blank\" rel=\"noopener\">https://www.programcreek.com/java-api-examples/index.php?api=org.apache.hadoop.hbase.mapreduce.KeyValueSortReducer</a></p>\n"},{"title":"webcola介绍","author":"Peng Fang","date":"2018-09-12T12:18:00.000Z","_content":"[cola.js](https://ialab.it.monash.edu/webcola/)是一个开源的JavaScript库，使用基于约束的优化技术组织HTML5文档和图表。它可以和D3.js、SVG.js以及Cytoscape.js类似的很好配合。核心布局是基于libcola的C++库重写的。   \n它也适配于d3.js，允许你使用cola作为D3力布局的一个核心替代。不同于D3力布局，通过一个简单的退火策略使其布局收敛到局部最优，因此与D3力布局相比：   \n- Cola实现更高质量的布局\n- 在交互式应用程序中更稳定（没有\"抖动\"）\n- 它允许用户指定约束，例如对齐和分组\n- 它能自动生成约束来\n    - 避免节点重叠\n    - 为有向图提供流布局\n- 对于非常大的图，它可能不太好扩展  \n然而，图上节点少于100个的情况下工作得很好，见[Unix家族树](https://ialab.it.monash.edu/webcola/examples/unix.html)   \n\n注意，虽然使用D3力布局，为了获得合理的节点分离，你可能要必须处理\"charge\"这样的参数。cola在最终布局中指定的链接距离方面做得更好。这是因为cola直接试着最小化理想链接距离和图中实际链接距离中的方差。换句话说，仅仅根据节点大小设置合理的链接距离。\n\n为了了解一些可选的参数，我们可以像这样开始布局：\n``` javascript\nd3cola\n    .nodes(graph.nodes)\n    .links(graph.links)\n    .constraints(graph.constraints)\n    .symmetricDiffLinkLengths(5)\n    .avoidOverlaps(true)\n    .start(10,15,20);\n```\n我们像D3力布局一样指定节点和链接。constraints是一个新参数，它是一个包含约束的数组，像这样：   \n``` javascript\n{\"axis\":\"y\", \"left\":0, \"right\":1, \"gap\":25}\n```\n这就是说，`graph.nodes[0]`的中心必须与`graph.nodes[1]`的中心距离25个像素以上。更精确地讲，约束要求满足这样的不等式：\n``` javascript\ngraph.nodes[0].y + gap <= graph.nodes[1].y\n```\n设置`avoidOverlaps(true)`，在布局进行时动态生成约束，以防止节点的边框彼此重叠。   \n`symmetricDiffLinkLengths(5)` ，使用5作为基本长度，计算每个链路上的理想长度，为的是在高度节点周围创造额外的空间。或者，你也可以将自己的函数f传递给linkDistance，返回每个链接的特定长度。   \n`start()`方法现在包含多达三个整数参数。在上面的例子中，start最初将应用10次没有约束的布局迭代，15次仅具有结构（用户指定的）约束的迭代，以及20次包含反重叠约束的具有所有约束的布局迭代。指定这样一个计划是有用的，使得图形在其被严格约束前展开。\n\n#### 在cytoscape.js中使用cola.js\nCytoscape.js通过扩展已经完全支持Cola.js.Cytoscape.js拥有一个完全的图理论模型，高度可定制的样式和布局。Cola.js在Cytoscape.js中运行只需要一行代码：   \n``` javascript\ncy.layout({ \n    name: 'cola' /* and maybe some other options */ \n});\n```\n\n##### 翻译自\nhttps://ialab.it.monash.edu/webcola ","source":"_posts/webcola介绍.md","raw":"title: webcola介绍\nauthor: Peng Fang\ntags:\n  - webcola\ncategories:\n  - 可视化\ndate: 2018-09-12 20:18:00\n---\n[cola.js](https://ialab.it.monash.edu/webcola/)是一个开源的JavaScript库，使用基于约束的优化技术组织HTML5文档和图表。它可以和D3.js、SVG.js以及Cytoscape.js类似的很好配合。核心布局是基于libcola的C++库重写的。   \n它也适配于d3.js，允许你使用cola作为D3力布局的一个核心替代。不同于D3力布局，通过一个简单的退火策略使其布局收敛到局部最优，因此与D3力布局相比：   \n- Cola实现更高质量的布局\n- 在交互式应用程序中更稳定（没有\"抖动\"）\n- 它允许用户指定约束，例如对齐和分组\n- 它能自动生成约束来\n    - 避免节点重叠\n    - 为有向图提供流布局\n- 对于非常大的图，它可能不太好扩展  \n然而，图上节点少于100个的情况下工作得很好，见[Unix家族树](https://ialab.it.monash.edu/webcola/examples/unix.html)   \n\n注意，虽然使用D3力布局，为了获得合理的节点分离，你可能要必须处理\"charge\"这样的参数。cola在最终布局中指定的链接距离方面做得更好。这是因为cola直接试着最小化理想链接距离和图中实际链接距离中的方差。换句话说，仅仅根据节点大小设置合理的链接距离。\n\n为了了解一些可选的参数，我们可以像这样开始布局：\n``` javascript\nd3cola\n    .nodes(graph.nodes)\n    .links(graph.links)\n    .constraints(graph.constraints)\n    .symmetricDiffLinkLengths(5)\n    .avoidOverlaps(true)\n    .start(10,15,20);\n```\n我们像D3力布局一样指定节点和链接。constraints是一个新参数，它是一个包含约束的数组，像这样：   \n``` javascript\n{\"axis\":\"y\", \"left\":0, \"right\":1, \"gap\":25}\n```\n这就是说，`graph.nodes[0]`的中心必须与`graph.nodes[1]`的中心距离25个像素以上。更精确地讲，约束要求满足这样的不等式：\n``` javascript\ngraph.nodes[0].y + gap <= graph.nodes[1].y\n```\n设置`avoidOverlaps(true)`，在布局进行时动态生成约束，以防止节点的边框彼此重叠。   \n`symmetricDiffLinkLengths(5)` ，使用5作为基本长度，计算每个链路上的理想长度，为的是在高度节点周围创造额外的空间。或者，你也可以将自己的函数f传递给linkDistance，返回每个链接的特定长度。   \n`start()`方法现在包含多达三个整数参数。在上面的例子中，start最初将应用10次没有约束的布局迭代，15次仅具有结构（用户指定的）约束的迭代，以及20次包含反重叠约束的具有所有约束的布局迭代。指定这样一个计划是有用的，使得图形在其被严格约束前展开。\n\n#### 在cytoscape.js中使用cola.js\nCytoscape.js通过扩展已经完全支持Cola.js.Cytoscape.js拥有一个完全的图理论模型，高度可定制的样式和布局。Cola.js在Cytoscape.js中运行只需要一行代码：   \n``` javascript\ncy.layout({ \n    name: 'cola' /* and maybe some other options */ \n});\n```\n\n##### 翻译自\nhttps://ialab.it.monash.edu/webcola ","slug":"webcola介绍","published":1,"updated":"2018-09-19T12:20:51.376Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0f000g2v2p6d7traai","content":"<p><a href=\"https://ialab.it.monash.edu/webcola/\" target=\"_blank\" rel=\"noopener\">cola.js</a>是一个开源的JavaScript库，使用基于约束的优化技术组织HTML5文档和图表。它可以和D3.js、SVG.js以及Cytoscape.js类似的很好配合。核心布局是基于libcola的C++库重写的。<br>它也适配于d3.js，允许你使用cola作为D3力布局的一个核心替代。不同于D3力布局，通过一个简单的退火策略使其布局收敛到局部最优，因此与D3力布局相比：   </p>\n<ul>\n<li>Cola实现更高质量的布局</li>\n<li>在交互式应用程序中更稳定（没有”抖动”）</li>\n<li>它允许用户指定约束，例如对齐和分组</li>\n<li>它能自动生成约束来<ul>\n<li>避免节点重叠</li>\n<li>为有向图提供流布局</li>\n</ul>\n</li>\n<li>对于非常大的图，它可能不太好扩展<br>然而，图上节点少于100个的情况下工作得很好，见<a href=\"https://ialab.it.monash.edu/webcola/examples/unix.html\" target=\"_blank\" rel=\"noopener\">Unix家族树</a>   </li>\n</ul>\n<p>注意，虽然使用D3力布局，为了获得合理的节点分离，你可能要必须处理”charge”这样的参数。cola在最终布局中指定的链接距离方面做得更好。这是因为cola直接试着最小化理想链接距离和图中实际链接距离中的方差。换句话说，仅仅根据节点大小设置合理的链接距离。</p>\n<p>为了了解一些可选的参数，我们可以像这样开始布局：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3cola</span><br><span class=\"line\">    .nodes(graph.nodes)</span><br><span class=\"line\">    .links(graph.links)</span><br><span class=\"line\">    .constraints(graph.constraints)</span><br><span class=\"line\">    .symmetricDiffLinkLengths(<span class=\"number\">5</span>)</span><br><span class=\"line\">    .avoidOverlaps(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    .start(<span class=\"number\">10</span>,<span class=\"number\">15</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我们像D3力布局一样指定节点和链接。constraints是一个新参数，它是一个包含约束的数组，像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"axis\"</span>:<span class=\"string\">\"y\"</span>, <span class=\"string\">\"left\"</span>:<span class=\"number\">0</span>, <span class=\"string\">\"right\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"gap\"</span>:<span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是说，<code>graph.nodes[0]</code>的中心必须与<code>graph.nodes[1]</code>的中心距离25个像素以上。更精确地讲，约束要求满足这样的不等式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph.nodes[<span class=\"number\">0</span>].y + gap &lt;= graph.nodes[<span class=\"number\">1</span>].y</span><br></pre></td></tr></table></figure></p>\n<p>设置<code>avoidOverlaps(true)</code>，在布局进行时动态生成约束，以防止节点的边框彼此重叠。<br><code>symmetricDiffLinkLengths(5)</code> ，使用5作为基本长度，计算每个链路上的理想长度，为的是在高度节点周围创造额外的空间。或者，你也可以将自己的函数f传递给linkDistance，返回每个链接的特定长度。<br><code>start()</code>方法现在包含多达三个整数参数。在上面的例子中，start最初将应用10次没有约束的布局迭代，15次仅具有结构（用户指定的）约束的迭代，以及20次包含反重叠约束的具有所有约束的布局迭代。指定这样一个计划是有用的，使得图形在其被严格约束前展开。</p>\n<h4 id=\"在cytoscape-js中使用cola-js\"><a href=\"#在cytoscape-js中使用cola-js\" class=\"headerlink\" title=\"在cytoscape.js中使用cola.js\"></a>在cytoscape.js中使用cola.js</h4><p>Cytoscape.js通过扩展已经完全支持Cola.js.Cytoscape.js拥有一个完全的图理论模型，高度可定制的样式和布局。Cola.js在Cytoscape.js中运行只需要一行代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.layout(&#123; </span><br><span class=\"line\">    name: <span class=\"string\">'cola'</span> <span class=\"comment\">/* and maybe some other options */</span> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"翻译自\"><a href=\"#翻译自\" class=\"headerlink\" title=\"翻译自\"></a>翻译自</h5><p><a href=\"https://ialab.it.monash.edu/webcola\" target=\"_blank\" rel=\"noopener\">https://ialab.it.monash.edu/webcola</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://ialab.it.monash.edu/webcola/\" target=\"_blank\" rel=\"noopener\">cola.js</a>是一个开源的JavaScript库，使用基于约束的优化技术组织HTML5文档和图表。它可以和D3.js、SVG.js以及Cytoscape.js类似的很好配合。核心布局是基于libcola的C++库重写的。<br>它也适配于d3.js，允许你使用cola作为D3力布局的一个核心替代。不同于D3力布局，通过一个简单的退火策略使其布局收敛到局部最优，因此与D3力布局相比：   </p>\n<ul>\n<li>Cola实现更高质量的布局</li>\n<li>在交互式应用程序中更稳定（没有”抖动”）</li>\n<li>它允许用户指定约束，例如对齐和分组</li>\n<li>它能自动生成约束来<ul>\n<li>避免节点重叠</li>\n<li>为有向图提供流布局</li>\n</ul>\n</li>\n<li>对于非常大的图，它可能不太好扩展<br>然而，图上节点少于100个的情况下工作得很好，见<a href=\"https://ialab.it.monash.edu/webcola/examples/unix.html\" target=\"_blank\" rel=\"noopener\">Unix家族树</a>   </li>\n</ul>\n<p>注意，虽然使用D3力布局，为了获得合理的节点分离，你可能要必须处理”charge”这样的参数。cola在最终布局中指定的链接距离方面做得更好。这是因为cola直接试着最小化理想链接距离和图中实际链接距离中的方差。换句话说，仅仅根据节点大小设置合理的链接距离。</p>\n<p>为了了解一些可选的参数，我们可以像这样开始布局：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3cola</span><br><span class=\"line\">    .nodes(graph.nodes)</span><br><span class=\"line\">    .links(graph.links)</span><br><span class=\"line\">    .constraints(graph.constraints)</span><br><span class=\"line\">    .symmetricDiffLinkLengths(<span class=\"number\">5</span>)</span><br><span class=\"line\">    .avoidOverlaps(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    .start(<span class=\"number\">10</span>,<span class=\"number\">15</span>,<span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我们像D3力布局一样指定节点和链接。constraints是一个新参数，它是一个包含约束的数组，像这样：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"axis\"</span>:<span class=\"string\">\"y\"</span>, <span class=\"string\">\"left\"</span>:<span class=\"number\">0</span>, <span class=\"string\">\"right\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"gap\"</span>:<span class=\"number\">25</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这就是说，<code>graph.nodes[0]</code>的中心必须与<code>graph.nodes[1]</code>的中心距离25个像素以上。更精确地讲，约束要求满足这样的不等式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">graph.nodes[<span class=\"number\">0</span>].y + gap &lt;= graph.nodes[<span class=\"number\">1</span>].y</span><br></pre></td></tr></table></figure></p>\n<p>设置<code>avoidOverlaps(true)</code>，在布局进行时动态生成约束，以防止节点的边框彼此重叠。<br><code>symmetricDiffLinkLengths(5)</code> ，使用5作为基本长度，计算每个链路上的理想长度，为的是在高度节点周围创造额外的空间。或者，你也可以将自己的函数f传递给linkDistance，返回每个链接的特定长度。<br><code>start()</code>方法现在包含多达三个整数参数。在上面的例子中，start最初将应用10次没有约束的布局迭代，15次仅具有结构（用户指定的）约束的迭代，以及20次包含反重叠约束的具有所有约束的布局迭代。指定这样一个计划是有用的，使得图形在其被严格约束前展开。</p>\n<h4 id=\"在cytoscape-js中使用cola-js\"><a href=\"#在cytoscape-js中使用cola-js\" class=\"headerlink\" title=\"在cytoscape.js中使用cola.js\"></a>在cytoscape.js中使用cola.js</h4><p>Cytoscape.js通过扩展已经完全支持Cola.js.Cytoscape.js拥有一个完全的图理论模型，高度可定制的样式和布局。Cola.js在Cytoscape.js中运行只需要一行代码：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cy.layout(&#123; </span><br><span class=\"line\">    name: <span class=\"string\">'cola'</span> <span class=\"comment\">/* and maybe some other options */</span> </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"翻译自\"><a href=\"#翻译自\" class=\"headerlink\" title=\"翻译自\"></a>翻译自</h5><p><a href=\"https://ialab.it.monash.edu/webcola\" target=\"_blank\" rel=\"noopener\">https://ialab.it.monash.edu/webcola</a> </p>\n"},{"title":"webpack中文文档摘要","author":"Peng Fang","date":"2017-07-31T09:49:00.000Z","_content":"首先给出webpack中文文档的[地址](https://doc.webpack-china.org/guides/getting-started/#-)\n这是我目前见过的翻译最好的webpack文档，清晰明了。\n\n## webpack\n在webpack之前，前端开发人员会使用grunt和gulp等工具来处理资源，并将它们从/src文件夹移动到/dist或/build目录中。同样的方式也被用于Javascript模块。但是像webpack这样的工具，将动态打包所有的依赖项（创建所谓的依赖图），避免打包未使用的模块。webpack最出色的功能之一就是除了JavaScript，还可以通过loader因人员任何其他类型的文件。\nwebpack打包命令默认选择使用一个配置文件叫webpack.config.js，改文件存在于根目录下。配置文件具有更强的灵活性，我们可以通过配置方式指定loader规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。\n初始化npm (npm init -y)会生成一个package.json，其中可以配npm 脚本和项目所需的依赖等。使用npm的scripts，我们可以通过模块名，来引用本地安装的npm包，而不是写出完整路径。例如：\n``` javascript\n{\n  ...\n  \"scripts\": {\n    \"build\": \"webpack\"\n  },\n  ...\n}\n```\n我们直接调用webpack这样的别名，而不是去调用./node_modules/.bin/webpack\n通过向npm run build命令和我们的参数之间添加两个中横线，可以将自定义参数传递给webpack，例如: npm run build -- --colors\n\n## 管理输出\n\n### 加载CSS\n为了从JavaScript模块中import一个css文件，你需要在webpack.config.js的module配置中安装并添加style-loader和css-loader。webpack根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的loader。这样可以在依赖此样式的文件中import某个样式文件，当模块运行时，含有CSS字符串的`<style>`标签将被插入到HTML文件的`<head>`中。\n> 可以生产环境中进行[CSS分离](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin)达到节省加载时间的目的。\n\n### 加载图片\n试想下载CSS的时候，如果其中有图片文件，那要如何处理呢？使用file-loader可以轻松地将内容混合到CSS中。\n当我们import oneImage from './my-image.png'，该图像将被处理并添加到output目录，并且oneImage变量将包含该图片名在被处理后的最终URL。例如当使用css-loader， css中url('./my-image.png')中的路径被替换为输出目录中图片的最终路径。\n> 查看[image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)和[url-loader](https://github.com/tcoopman/image-webpack-loader)了解压缩和优化图像等功能。\n\n### 加载字体\nfile-loader和url-loader可以接收并加载任何文件，然后将其输出到构建目录，当然也包括字体文件。\n\n### 加载数据\n数据文件一般包含JSON文件、CSV、TSV和XML。类似于NodeJS，JSON支持实际上是内置的，import一个json文件默认将正常运行。我们可以使用csv-loader和xml-loader来处理其余三类文件，csv-loader处理csv和tsv。这样import四类文件中的任何一类，所导入的变量将包含可直接使用的已解析JSON\n>在使用d3等工具来实现某些数据可视化时，预加载数据会非常有用。构建过程中将数据提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。\n\n### 全局资源\n上述内容最出色之处是，以这种方式加载资源，可以更直观地将模块和资源组合在一起，无需依赖于含有全部资源的/asset目录，而是将资源与代码组合在一起。例如：类似这样的结构非常有用：\n``` javascript\n+ |– /components\n+ |  |– /my-component\n+ |  |  |– index.jsx\n+ |  |  |– index.css\n+ |  |  |– icon.svg\n+ |  |  |– img.png\n```\n这种配置方式会使你的代码更具备可移植性，现有统一放置的方式会造成所有资源紧密耦合在一起。假如在想在另一个项目中使用/my-component，只需将其复制或移动到/components目录下。只要你安装了扩展依赖，并且配置过相同的loader，那么项目应该可以良好运行。\n但是这样的缺点是无法使用新的开发方式或者在多个组件之间共享资源。仍然可以将这些资源存储在公共目录中，甚至配合使用alias来使它们更方便导入。","source":"_posts/webpack中文文档摘要.md","raw":"title: webpack中文文档摘要\nauthor: Peng Fang\ntags:\n  - webpack\ncategories:\n  - webpack\ndate: 2017-07-31 17:49:00\n---\n首先给出webpack中文文档的[地址](https://doc.webpack-china.org/guides/getting-started/#-)\n这是我目前见过的翻译最好的webpack文档，清晰明了。\n\n## webpack\n在webpack之前，前端开发人员会使用grunt和gulp等工具来处理资源，并将它们从/src文件夹移动到/dist或/build目录中。同样的方式也被用于Javascript模块。但是像webpack这样的工具，将动态打包所有的依赖项（创建所谓的依赖图），避免打包未使用的模块。webpack最出色的功能之一就是除了JavaScript，还可以通过loader因人员任何其他类型的文件。\nwebpack打包命令默认选择使用一个配置文件叫webpack.config.js，改文件存在于根目录下。配置文件具有更强的灵活性，我们可以通过配置方式指定loader规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。\n初始化npm (npm init -y)会生成一个package.json，其中可以配npm 脚本和项目所需的依赖等。使用npm的scripts，我们可以通过模块名，来引用本地安装的npm包，而不是写出完整路径。例如：\n``` javascript\n{\n  ...\n  \"scripts\": {\n    \"build\": \"webpack\"\n  },\n  ...\n}\n```\n我们直接调用webpack这样的别名，而不是去调用./node_modules/.bin/webpack\n通过向npm run build命令和我们的参数之间添加两个中横线，可以将自定义参数传递给webpack，例如: npm run build -- --colors\n\n## 管理输出\n\n### 加载CSS\n为了从JavaScript模块中import一个css文件，你需要在webpack.config.js的module配置中安装并添加style-loader和css-loader。webpack根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的loader。这样可以在依赖此样式的文件中import某个样式文件，当模块运行时，含有CSS字符串的`<style>`标签将被插入到HTML文件的`<head>`中。\n> 可以生产环境中进行[CSS分离](https://doc.webpack-china.org/plugins/extract-text-webpack-plugin)达到节省加载时间的目的。\n\n### 加载图片\n试想下载CSS的时候，如果其中有图片文件，那要如何处理呢？使用file-loader可以轻松地将内容混合到CSS中。\n当我们import oneImage from './my-image.png'，该图像将被处理并添加到output目录，并且oneImage变量将包含该图片名在被处理后的最终URL。例如当使用css-loader， css中url('./my-image.png')中的路径被替换为输出目录中图片的最终路径。\n> 查看[image-webpack-loader](https://github.com/tcoopman/image-webpack-loader)和[url-loader](https://github.com/tcoopman/image-webpack-loader)了解压缩和优化图像等功能。\n\n### 加载字体\nfile-loader和url-loader可以接收并加载任何文件，然后将其输出到构建目录，当然也包括字体文件。\n\n### 加载数据\n数据文件一般包含JSON文件、CSV、TSV和XML。类似于NodeJS，JSON支持实际上是内置的，import一个json文件默认将正常运行。我们可以使用csv-loader和xml-loader来处理其余三类文件，csv-loader处理csv和tsv。这样import四类文件中的任何一类，所导入的变量将包含可直接使用的已解析JSON\n>在使用d3等工具来实现某些数据可视化时，预加载数据会非常有用。构建过程中将数据提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。\n\n### 全局资源\n上述内容最出色之处是，以这种方式加载资源，可以更直观地将模块和资源组合在一起，无需依赖于含有全部资源的/asset目录，而是将资源与代码组合在一起。例如：类似这样的结构非常有用：\n``` javascript\n+ |– /components\n+ |  |– /my-component\n+ |  |  |– index.jsx\n+ |  |  |– index.css\n+ |  |  |– icon.svg\n+ |  |  |– img.png\n```\n这种配置方式会使你的代码更具备可移植性，现有统一放置的方式会造成所有资源紧密耦合在一起。假如在想在另一个项目中使用/my-component，只需将其复制或移动到/components目录下。只要你安装了扩展依赖，并且配置过相同的loader，那么项目应该可以良好运行。\n但是这样的缺点是无法使用新的开发方式或者在多个组件之间共享资源。仍然可以将这些资源存储在公共目录中，甚至配合使用alias来使它们更方便导入。","slug":"webpack中文文档摘要","published":1,"updated":"2018-09-19T12:29:02.614Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0h000i2v2p40oaj9rb","content":"<p>首先给出webpack中文文档的<a href=\"https://doc.webpack-china.org/guides/getting-started/#-\" target=\"_blank\" rel=\"noopener\">地址</a><br>这是我目前见过的翻译最好的webpack文档，清晰明了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>在webpack之前，前端开发人员会使用grunt和gulp等工具来处理资源，并将它们从/src文件夹移动到/dist或/build目录中。同样的方式也被用于Javascript模块。但是像webpack这样的工具，将动态打包所有的依赖项（创建所谓的依赖图），避免打包未使用的模块。webpack最出色的功能之一就是除了JavaScript，还可以通过loader因人员任何其他类型的文件。<br>webpack打包命令默认选择使用一个配置文件叫webpack.config.js，改文件存在于根目录下。配置文件具有更强的灵活性，我们可以通过配置方式指定loader规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。<br>初始化npm (npm init -y)会生成一个package.json，其中可以配npm 脚本和项目所需的依赖等。使用npm的scripts，我们可以通过模块名，来引用本地安装的npm包，而不是写出完整路径。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们直接调用webpack这样的别名，而不是去调用./node_modules/.bin/webpack<br>通过向npm run build命令和我们的参数之间添加两个中横线，可以将自定义参数传递给webpack，例如: npm run build – –colors</p>\n<h2 id=\"管理输出\"><a href=\"#管理输出\" class=\"headerlink\" title=\"管理输出\"></a>管理输出</h2><h3 id=\"加载CSS\"><a href=\"#加载CSS\" class=\"headerlink\" title=\"加载CSS\"></a>加载CSS</h3><p>为了从JavaScript模块中import一个css文件，你需要在webpack.config.js的module配置中安装并添加style-loader和css-loader。webpack根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的loader。这样可以在依赖此样式的文件中import某个样式文件，当模块运行时，含有CSS字符串的<code>&lt;style&gt;</code>标签将被插入到HTML文件的<code>&lt;head&gt;</code>中。</p>\n<blockquote>\n<p>可以生产环境中进行<a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">CSS分离</a>达到节省加载时间的目的。</p>\n</blockquote>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><p>试想下载CSS的时候，如果其中有图片文件，那要如何处理呢？使用file-loader可以轻松地将内容混合到CSS中。<br>当我们import oneImage from ‘./my-image.png’，该图像将被处理并添加到output目录，并且oneImage变量将包含该图片名在被处理后的最终URL。例如当使用css-loader， css中url(‘./my-image.png’)中的路径被替换为输出目录中图片的最终路径。</p>\n<blockquote>\n<p>查看<a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">image-webpack-loader</a>和<a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">url-loader</a>了解压缩和优化图像等功能。</p>\n</blockquote>\n<h3 id=\"加载字体\"><a href=\"#加载字体\" class=\"headerlink\" title=\"加载字体\"></a>加载字体</h3><p>file-loader和url-loader可以接收并加载任何文件，然后将其输出到构建目录，当然也包括字体文件。</p>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><p>数据文件一般包含JSON文件、CSV、TSV和XML。类似于NodeJS，JSON支持实际上是内置的，import一个json文件默认将正常运行。我们可以使用csv-loader和xml-loader来处理其余三类文件，csv-loader处理csv和tsv。这样import四类文件中的任何一类，所导入的变量将包含可直接使用的已解析JSON</p>\n<blockquote>\n<p>在使用d3等工具来实现某些数据可视化时，预加载数据会非常有用。构建过程中将数据提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。</p>\n</blockquote>\n<h3 id=\"全局资源\"><a href=\"#全局资源\" class=\"headerlink\" title=\"全局资源\"></a>全局资源</h3><p>上述内容最出色之处是，以这种方式加载资源，可以更直观地将模块和资源组合在一起，无需依赖于含有全部资源的/asset目录，而是将资源与代码组合在一起。例如：类似这样的结构非常有用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ |– /components</span><br><span class=\"line\">+ |  |– /my-component</span><br><span class=\"line\">+ |  |  |– index.jsx</span><br><span class=\"line\">+ |  |  |– index.css</span><br><span class=\"line\">+ |  |  |– icon.svg</span><br><span class=\"line\">+ |  |  |– img.png</span><br></pre></td></tr></table></figure></p>\n<p>这种配置方式会使你的代码更具备可移植性，现有统一放置的方式会造成所有资源紧密耦合在一起。假如在想在另一个项目中使用/my-component，只需将其复制或移动到/components目录下。只要你安装了扩展依赖，并且配置过相同的loader，那么项目应该可以良好运行。<br>但是这样的缺点是无法使用新的开发方式或者在多个组件之间共享资源。仍然可以将这些资源存储在公共目录中，甚至配合使用alias来使它们更方便导入。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先给出webpack中文文档的<a href=\"https://doc.webpack-china.org/guides/getting-started/#-\" target=\"_blank\" rel=\"noopener\">地址</a><br>这是我目前见过的翻译最好的webpack文档，清晰明了。</p>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h2><p>在webpack之前，前端开发人员会使用grunt和gulp等工具来处理资源，并将它们从/src文件夹移动到/dist或/build目录中。同样的方式也被用于Javascript模块。但是像webpack这样的工具，将动态打包所有的依赖项（创建所谓的依赖图），避免打包未使用的模块。webpack最出色的功能之一就是除了JavaScript，还可以通过loader因人员任何其他类型的文件。<br>webpack打包命令默认选择使用一个配置文件叫webpack.config.js，改文件存在于根目录下。配置文件具有更强的灵活性，我们可以通过配置方式指定loader规则(loader rules)、插件(plugins)、解析选项(resolve options)，以及许多其他增强功能。<br>初始化npm (npm init -y)会生成一个package.json，其中可以配npm 脚本和项目所需的依赖等。使用npm的scripts，我们可以通过模块名，来引用本地安装的npm包，而不是写出完整路径。例如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>我们直接调用webpack这样的别名，而不是去调用./node_modules/.bin/webpack<br>通过向npm run build命令和我们的参数之间添加两个中横线，可以将自定义参数传递给webpack，例如: npm run build – –colors</p>\n<h2 id=\"管理输出\"><a href=\"#管理输出\" class=\"headerlink\" title=\"管理输出\"></a>管理输出</h2><h3 id=\"加载CSS\"><a href=\"#加载CSS\" class=\"headerlink\" title=\"加载CSS\"></a>加载CSS</h3><p>为了从JavaScript模块中import一个css文件，你需要在webpack.config.js的module配置中安装并添加style-loader和css-loader。webpack根据正则表达式，来确定应该查找哪些文件，并将其提供给指定的loader。这样可以在依赖此样式的文件中import某个样式文件，当模块运行时，含有CSS字符串的<code>&lt;style&gt;</code>标签将被插入到HTML文件的<code>&lt;head&gt;</code>中。</p>\n<blockquote>\n<p>可以生产环境中进行<a href=\"https://doc.webpack-china.org/plugins/extract-text-webpack-plugin\" target=\"_blank\" rel=\"noopener\">CSS分离</a>达到节省加载时间的目的。</p>\n</blockquote>\n<h3 id=\"加载图片\"><a href=\"#加载图片\" class=\"headerlink\" title=\"加载图片\"></a>加载图片</h3><p>试想下载CSS的时候，如果其中有图片文件，那要如何处理呢？使用file-loader可以轻松地将内容混合到CSS中。<br>当我们import oneImage from ‘./my-image.png’，该图像将被处理并添加到output目录，并且oneImage变量将包含该图片名在被处理后的最终URL。例如当使用css-loader， css中url(‘./my-image.png’)中的路径被替换为输出目录中图片的最终路径。</p>\n<blockquote>\n<p>查看<a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">image-webpack-loader</a>和<a href=\"https://github.com/tcoopman/image-webpack-loader\" target=\"_blank\" rel=\"noopener\">url-loader</a>了解压缩和优化图像等功能。</p>\n</blockquote>\n<h3 id=\"加载字体\"><a href=\"#加载字体\" class=\"headerlink\" title=\"加载字体\"></a>加载字体</h3><p>file-loader和url-loader可以接收并加载任何文件，然后将其输出到构建目录，当然也包括字体文件。</p>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><p>数据文件一般包含JSON文件、CSV、TSV和XML。类似于NodeJS，JSON支持实际上是内置的，import一个json文件默认将正常运行。我们可以使用csv-loader和xml-loader来处理其余三类文件，csv-loader处理csv和tsv。这样import四类文件中的任何一类，所导入的变量将包含可直接使用的已解析JSON</p>\n<blockquote>\n<p>在使用d3等工具来实现某些数据可视化时，预加载数据会非常有用。构建过程中将数据提前载入并打包到模块中，以便浏览器加载模块后，可以立即从模块中解析数据。</p>\n</blockquote>\n<h3 id=\"全局资源\"><a href=\"#全局资源\" class=\"headerlink\" title=\"全局资源\"></a>全局资源</h3><p>上述内容最出色之处是，以这种方式加载资源，可以更直观地将模块和资源组合在一起，无需依赖于含有全部资源的/asset目录，而是将资源与代码组合在一起。例如：类似这样的结构非常有用：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ |– /components</span><br><span class=\"line\">+ |  |– /my-component</span><br><span class=\"line\">+ |  |  |– index.jsx</span><br><span class=\"line\">+ |  |  |– index.css</span><br><span class=\"line\">+ |  |  |– icon.svg</span><br><span class=\"line\">+ |  |  |– img.png</span><br></pre></td></tr></table></figure></p>\n<p>这种配置方式会使你的代码更具备可移植性，现有统一放置的方式会造成所有资源紧密耦合在一起。假如在想在另一个项目中使用/my-component，只需将其复制或移动到/components目录下。只要你安装了扩展依赖，并且配置过相同的loader，那么项目应该可以良好运行。<br>但是这样的缺点是无法使用新的开发方式或者在多个组件之间共享资源。仍然可以将这些资源存储在公共目录中，甚至配合使用alias来使它们更方便导入。</p>\n"},{"title":"从接口调用安全考虑","author":"Peng Fang","date":"2018-05-17T10:09:00.000Z","_content":"在数据通信时，需要考虑接口访问的合法性和安全性：\n * 用户身份的合法性校验\n * 接口调用的合法性校验\n * 敏感数据加密\n\n### 用户身份的合法性校验\n用户身份校验一般通过用户名和密码。这里要考虑明文如何加密为密文。具体应用中RSA加密比较常见。RSA的密钥n长度一般是1024位，长度越长就越难被破解，目前被破解最长的RSA密钥是768位。\n1. n能分解为两个质数的乘积，即n = p * q,这样我们就可以计算出欧拉函数φ(n) = (p-1)*(q-1)\n2. 随机选择一个整数e，条件是1< e < φ(n)且与φ(n)互为质数\n3. 计算[模反元素](http://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0)d，使得ed被φ(n)除的余数为1。如果n能被因数分解，那么d可以被算出，意味着私钥被破解。\n加密的公钥是(n,e)，解密的私钥是(n,d)\n  用户合法性认证以后，在整个会话过程中，必须携带服务端返回的令牌token，以保证会话的合法性。\n\n### 接口调用的合法性校验\n为了防止接口调用中，参数被篡改或者防止重放攻击，需要在参数中加上签名。\n在参数中可以加上imei(设备唯一Id)、timestamp，以确保签名sign的唯一性。sign=md5(path?query&imei&tamp&SIGN_KEY)\n服务端接收到请求后，首先根据参数和SIGN_KEY验证签名结果是否一致，然后验证时间戳是否是在一定时间范围内，比如5分钟之内，如果超过则视为无效请求，如果在时间范围内，需要检查签名是否存在Redis中以防止重放攻击，如果不存在则存入Redis中5分钟。因为签名的唯一性，如果Redis中已存在相同的签名，那么很可能是重放攻击。\n\n### 敏感数据加密\nHTTP协议通信是不安全的，敏感数据传输采用基于SSL的HTTPS会更安全。\n另外敏感数据最好加密（加盐）传输，防止被篡改。\n\n#### 参考\n[如何确保服务端的接口调用安全](https://segmentfault.com/q/1010000008918918)","source":"_posts/从接口调用安全考虑.md","raw":"title: 从接口调用安全考虑\nauthor: Peng Fang\ntags:\n  - 接口设计\ncategories:\n  - 系统设计\ndate: 2018-05-17 18:09:00\n---\n在数据通信时，需要考虑接口访问的合法性和安全性：\n * 用户身份的合法性校验\n * 接口调用的合法性校验\n * 敏感数据加密\n\n### 用户身份的合法性校验\n用户身份校验一般通过用户名和密码。这里要考虑明文如何加密为密文。具体应用中RSA加密比较常见。RSA的密钥n长度一般是1024位，长度越长就越难被破解，目前被破解最长的RSA密钥是768位。\n1. n能分解为两个质数的乘积，即n = p * q,这样我们就可以计算出欧拉函数φ(n) = (p-1)*(q-1)\n2. 随机选择一个整数e，条件是1< e < φ(n)且与φ(n)互为质数\n3. 计算[模反元素](http://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0)d，使得ed被φ(n)除的余数为1。如果n能被因数分解，那么d可以被算出，意味着私钥被破解。\n加密的公钥是(n,e)，解密的私钥是(n,d)\n  用户合法性认证以后，在整个会话过程中，必须携带服务端返回的令牌token，以保证会话的合法性。\n\n### 接口调用的合法性校验\n为了防止接口调用中，参数被篡改或者防止重放攻击，需要在参数中加上签名。\n在参数中可以加上imei(设备唯一Id)、timestamp，以确保签名sign的唯一性。sign=md5(path?query&imei&tamp&SIGN_KEY)\n服务端接收到请求后，首先根据参数和SIGN_KEY验证签名结果是否一致，然后验证时间戳是否是在一定时间范围内，比如5分钟之内，如果超过则视为无效请求，如果在时间范围内，需要检查签名是否存在Redis中以防止重放攻击，如果不存在则存入Redis中5分钟。因为签名的唯一性，如果Redis中已存在相同的签名，那么很可能是重放攻击。\n\n### 敏感数据加密\nHTTP协议通信是不安全的，敏感数据传输采用基于SSL的HTTPS会更安全。\n另外敏感数据最好加密（加盐）传输，防止被篡改。\n\n#### 参考\n[如何确保服务端的接口调用安全](https://segmentfault.com/q/1010000008918918)","slug":"从接口调用安全考虑","published":1,"updated":"2018-09-19T10:10:48.653Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0k000m2v2pmr90likf","content":"<p>在数据通信时，需要考虑接口访问的合法性和安全性：</p>\n<ul>\n<li>用户身份的合法性校验</li>\n<li>接口调用的合法性校验</li>\n<li>敏感数据加密</li>\n</ul>\n<h3 id=\"用户身份的合法性校验\"><a href=\"#用户身份的合法性校验\" class=\"headerlink\" title=\"用户身份的合法性校验\"></a>用户身份的合法性校验</h3><p>用户身份校验一般通过用户名和密码。这里要考虑明文如何加密为密文。具体应用中RSA加密比较常见。RSA的密钥n长度一般是1024位，长度越长就越难被破解，目前被破解最长的RSA密钥是768位。</p>\n<ol>\n<li>n能分解为两个质数的乘积，即n = p <em> q,这样我们就可以计算出欧拉函数φ(n) = (p-1)</em>(q-1)</li>\n<li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)且与φ(n)互为质数</li>\n<li>计算<a href=\"http://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">模反元素</a>d，使得ed被φ(n)除的余数为1。如果n能被因数分解，那么d可以被算出，意味着私钥被破解。<br>加密的公钥是(n,e)，解密的私钥是(n,d)<br>用户合法性认证以后，在整个会话过程中，必须携带服务端返回的令牌token，以保证会话的合法性。</li>\n</ol>\n<h3 id=\"接口调用的合法性校验\"><a href=\"#接口调用的合法性校验\" class=\"headerlink\" title=\"接口调用的合法性校验\"></a>接口调用的合法性校验</h3><p>为了防止接口调用中，参数被篡改或者防止重放攻击，需要在参数中加上签名。<br>在参数中可以加上imei(设备唯一Id)、timestamp，以确保签名sign的唯一性。sign=md5(path?query&amp;imei&amp;tamp&amp;SIGN_KEY)<br>服务端接收到请求后，首先根据参数和SIGN_KEY验证签名结果是否一致，然后验证时间戳是否是在一定时间范围内，比如5分钟之内，如果超过则视为无效请求，如果在时间范围内，需要检查签名是否存在Redis中以防止重放攻击，如果不存在则存入Redis中5分钟。因为签名的唯一性，如果Redis中已存在相同的签名，那么很可能是重放攻击。</p>\n<h3 id=\"敏感数据加密\"><a href=\"#敏感数据加密\" class=\"headerlink\" title=\"敏感数据加密\"></a>敏感数据加密</h3><p>HTTP协议通信是不安全的，敏感数据传输采用基于SSL的HTTPS会更安全。<br>另外敏感数据最好加密（加盐）传输，防止被篡改。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://segmentfault.com/q/1010000008918918\" target=\"_blank\" rel=\"noopener\">如何确保服务端的接口调用安全</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在数据通信时，需要考虑接口访问的合法性和安全性：</p>\n<ul>\n<li>用户身份的合法性校验</li>\n<li>接口调用的合法性校验</li>\n<li>敏感数据加密</li>\n</ul>\n<h3 id=\"用户身份的合法性校验\"><a href=\"#用户身份的合法性校验\" class=\"headerlink\" title=\"用户身份的合法性校验\"></a>用户身份的合法性校验</h3><p>用户身份校验一般通过用户名和密码。这里要考虑明文如何加密为密文。具体应用中RSA加密比较常见。RSA的密钥n长度一般是1024位，长度越长就越难被破解，目前被破解最长的RSA密钥是768位。</p>\n<ol>\n<li>n能分解为两个质数的乘积，即n = p <em> q,这样我们就可以计算出欧拉函数φ(n) = (p-1)</em>(q-1)</li>\n<li>随机选择一个整数e，条件是1&lt; e &lt; φ(n)且与φ(n)互为质数</li>\n<li>计算<a href=\"http://zh.wikipedia.org/wiki/%E6%A8%A1%E5%8F%8D%E5%85%83%E7%B4%A0\" target=\"_blank\" rel=\"noopener\">模反元素</a>d，使得ed被φ(n)除的余数为1。如果n能被因数分解，那么d可以被算出，意味着私钥被破解。<br>加密的公钥是(n,e)，解密的私钥是(n,d)<br>用户合法性认证以后，在整个会话过程中，必须携带服务端返回的令牌token，以保证会话的合法性。</li>\n</ol>\n<h3 id=\"接口调用的合法性校验\"><a href=\"#接口调用的合法性校验\" class=\"headerlink\" title=\"接口调用的合法性校验\"></a>接口调用的合法性校验</h3><p>为了防止接口调用中，参数被篡改或者防止重放攻击，需要在参数中加上签名。<br>在参数中可以加上imei(设备唯一Id)、timestamp，以确保签名sign的唯一性。sign=md5(path?query&amp;imei&amp;tamp&amp;SIGN_KEY)<br>服务端接收到请求后，首先根据参数和SIGN_KEY验证签名结果是否一致，然后验证时间戳是否是在一定时间范围内，比如5分钟之内，如果超过则视为无效请求，如果在时间范围内，需要检查签名是否存在Redis中以防止重放攻击，如果不存在则存入Redis中5分钟。因为签名的唯一性，如果Redis中已存在相同的签名，那么很可能是重放攻击。</p>\n<h3 id=\"敏感数据加密\"><a href=\"#敏感数据加密\" class=\"headerlink\" title=\"敏感数据加密\"></a>敏感数据加密</h3><p>HTTP协议通信是不安全的，敏感数据传输采用基于SSL的HTTPS会更安全。<br>另外敏感数据最好加密（加盐）传输，防止被篡改。</p>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://segmentfault.com/q/1010000008918918\" target=\"_blank\" rel=\"noopener\">如何确保服务端的接口调用安全</a></p>\n"},{"title":"利用travis自动化部署博客项目","author":"Peng Fang","date":"2017-07-25T09:36:00.000Z","_content":"## 目的\n本文记录如何用travis实现自动化部署GitHub仓库中的博客项目，并完成域名访问。\n\n## travis登录和授权\ntravis可以用GitHub账号登录，登录后在profile页授权允许travis访问的仓库。 \n> 比如我这里的GitHub仓库是vue-ghpages-blog，也是我准备部署的博客项目。\n\n## GitHub pages的一点概念\n搭建项目站点的两种方式：\n>一种是创建一个名为 `GitHub用户名.github.io`的仓库，在外网以该仓库名作为地址进行访问就可以访问到仓库里面的静态页面了。\n> 另一种是给仓库创建一个gh-pages分支，将运行`npm run build`命令编译生成到项目dist目录下的文件push到gh-pages分支。访问`GitHub用户名.github.io/仓库名`如`https://github.com/MGTfang/vue-ghpages-blog`，也能访问到编译项目生成的静态文件。\n\n## travis自动化部署的条件\n在授权travis访问仓库（项目）的前提下，还需要在仓库的根目录下有个.travis.yml文件，部分内容如下：\n```javascript\nscript:\n  - npm test\n\nafter_success:\n  - npm run build\n  - cd dist\n  - echo \"dtechvoi.com\" > CNAME\n  - cp index.html 404.html\n  - git add --all .\n  - git commit --message \"Automatically update from travis-ci\"\n  - git push --quiet \"https://${GH_TOKEN}@${GH_REF}\" gh-pages:gh-pages\n\n# Note: you should set Environment Variables here or 'Settings' on travis-ci.org\nenv:\n  global:\n    - GH_REF: github.com/MGTfang/vue-ghpages-blog.git\n    # - GH_TOKEN: 'Your GitHub Personal access tokens, via https://github.com/settings/tokens'\n```\n当将更改的文件push到远端仓库（这里是vue-ghpages-blog的develop分支）的时候，travis会自动执行一次build，build操作根据.travis.yml内容来进行。例如根据上面的脚本（有部分省去了），先设置环境变量GH_REF、GH_TOKEN，再更新nvm，运行npm install、npm test。\n>     我这里报错：没有找到electron这个包，因此运行`npm install electron --save`进行安装\n>     在`npm run test`成功以后，会将build生成的文件推送到gh-pages分支。\n>     这里可能会出现没权限访问远端仓库的error，这样需要通过`https://github.com/settings/tokens`来设置访问token，特别主要要将repo勾选，不然照样没有权限。\n\n## 域名绑定\n在域名的解析设置下添加三条记录：\n>     记录类型 \t主机记录 \t解析线路(运营商) \t记录值\n>     CNAME\t      @\t       默认\t    MGTfang.github.io.\n>         A\t      www\t     默认\t    192.30.252.153\n>\t     A\t      www\t     默认\t    192.30.252.154\n\n包括两条A记录和一条CNAME记录，A记录指向以www开头的域名，记录值是GitHub的IP地址，CNAME的记录值是可以访问GitHub pages的地址。   \n除了绑定域名，还需要在访问仓库额根目录下创建一个CNAME文件，并在其中写入绑定的域名，这样直接访问域名就能访问gh-pages分支下的静态页面。","source":"_posts/利用travis自动化部署博客项目.md","raw":"title: 利用travis自动化部署博客项目\nauthor: Peng Fang\ntags:\n  - 自动化部署 博客\ncategories:\n  - 博客\ndate: 2017-07-25 17:36:00\n---\n## 目的\n本文记录如何用travis实现自动化部署GitHub仓库中的博客项目，并完成域名访问。\n\n## travis登录和授权\ntravis可以用GitHub账号登录，登录后在profile页授权允许travis访问的仓库。 \n> 比如我这里的GitHub仓库是vue-ghpages-blog，也是我准备部署的博客项目。\n\n## GitHub pages的一点概念\n搭建项目站点的两种方式：\n>一种是创建一个名为 `GitHub用户名.github.io`的仓库，在外网以该仓库名作为地址进行访问就可以访问到仓库里面的静态页面了。\n> 另一种是给仓库创建一个gh-pages分支，将运行`npm run build`命令编译生成到项目dist目录下的文件push到gh-pages分支。访问`GitHub用户名.github.io/仓库名`如`https://github.com/MGTfang/vue-ghpages-blog`，也能访问到编译项目生成的静态文件。\n\n## travis自动化部署的条件\n在授权travis访问仓库（项目）的前提下，还需要在仓库的根目录下有个.travis.yml文件，部分内容如下：\n```javascript\nscript:\n  - npm test\n\nafter_success:\n  - npm run build\n  - cd dist\n  - echo \"dtechvoi.com\" > CNAME\n  - cp index.html 404.html\n  - git add --all .\n  - git commit --message \"Automatically update from travis-ci\"\n  - git push --quiet \"https://${GH_TOKEN}@${GH_REF}\" gh-pages:gh-pages\n\n# Note: you should set Environment Variables here or 'Settings' on travis-ci.org\nenv:\n  global:\n    - GH_REF: github.com/MGTfang/vue-ghpages-blog.git\n    # - GH_TOKEN: 'Your GitHub Personal access tokens, via https://github.com/settings/tokens'\n```\n当将更改的文件push到远端仓库（这里是vue-ghpages-blog的develop分支）的时候，travis会自动执行一次build，build操作根据.travis.yml内容来进行。例如根据上面的脚本（有部分省去了），先设置环境变量GH_REF、GH_TOKEN，再更新nvm，运行npm install、npm test。\n>     我这里报错：没有找到electron这个包，因此运行`npm install electron --save`进行安装\n>     在`npm run test`成功以后，会将build生成的文件推送到gh-pages分支。\n>     这里可能会出现没权限访问远端仓库的error，这样需要通过`https://github.com/settings/tokens`来设置访问token，特别主要要将repo勾选，不然照样没有权限。\n\n## 域名绑定\n在域名的解析设置下添加三条记录：\n>     记录类型 \t主机记录 \t解析线路(运营商) \t记录值\n>     CNAME\t      @\t       默认\t    MGTfang.github.io.\n>         A\t      www\t     默认\t    192.30.252.153\n>\t     A\t      www\t     默认\t    192.30.252.154\n\n包括两条A记录和一条CNAME记录，A记录指向以www开头的域名，记录值是GitHub的IP地址，CNAME的记录值是可以访问GitHub pages的地址。   \n除了绑定域名，还需要在访问仓库额根目录下创建一个CNAME文件，并在其中写入绑定的域名，这样直接访问域名就能访问gh-pages分支下的静态页面。","slug":"利用travis自动化部署博客项目","published":1,"updated":"2018-09-19T09:48:18.875Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0l000o2v2p02vmx09n","content":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本文记录如何用travis实现自动化部署GitHub仓库中的博客项目，并完成域名访问。</p>\n<h2 id=\"travis登录和授权\"><a href=\"#travis登录和授权\" class=\"headerlink\" title=\"travis登录和授权\"></a>travis登录和授权</h2><p>travis可以用GitHub账号登录，登录后在profile页授权允许travis访问的仓库。 </p>\n<blockquote>\n<p>比如我这里的GitHub仓库是vue-ghpages-blog，也是我准备部署的博客项目。</p>\n</blockquote>\n<h2 id=\"GitHub-pages的一点概念\"><a href=\"#GitHub-pages的一点概念\" class=\"headerlink\" title=\"GitHub pages的一点概念\"></a>GitHub pages的一点概念</h2><p>搭建项目站点的两种方式：</p>\n<blockquote>\n<p>一种是创建一个名为 <code>GitHub用户名.github.io</code>的仓库，在外网以该仓库名作为地址进行访问就可以访问到仓库里面的静态页面了。<br>另一种是给仓库创建一个gh-pages分支，将运行<code>npm run build</code>命令编译生成到项目dist目录下的文件push到gh-pages分支。访问<code>GitHub用户名.github.io/仓库名</code>如<code>https://github.com/MGTfang/vue-ghpages-blog</code>，也能访问到编译项目生成的静态文件。</p>\n</blockquote>\n<h2 id=\"travis自动化部署的条件\"><a href=\"#travis自动化部署的条件\" class=\"headerlink\" title=\"travis自动化部署的条件\"></a>travis自动化部署的条件</h2><p>在授权travis访问仓库（项目）的前提下，还需要在仓库的根目录下有个.travis.yml文件，部分内容如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span><br><span class=\"line\">  - npm test</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - npm run build</span><br><span class=\"line\">  - cd dist</span><br><span class=\"line\">  - echo <span class=\"string\">\"dtechvoi.com\"</span> &gt; CNAME</span><br><span class=\"line\">  - cp index.html <span class=\"number\">404.</span>html</span><br><span class=\"line\">  - git add --all .</span><br><span class=\"line\">  - git commit --message <span class=\"string\">\"Automatically update from travis-ci\"</span></span><br><span class=\"line\">  - git push --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> gh-pages:gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"># Note: you should set Environment Variables here or 'Settings' on travis-ci.org</span><br><span class=\"line\">env:</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    - GH_REF: github.com/MGTfang/vue-ghpages-blog.git</span><br><span class=\"line\">    # - GH_TOKEN: 'Your GitHub Personal access tokens, via https://github.com/settings/tokens'</span><br></pre></td></tr></table></figure></p>\n<p>当将更改的文件push到远端仓库（这里是vue-ghpages-blog的develop分支）的时候，travis会自动执行一次build，build操作根据.travis.yml内容来进行。例如根据上面的脚本（有部分省去了），先设置环境变量GH_REF、GH_TOKEN，再更新nvm，运行npm install、npm test。</p>\n<blockquote>\n<pre><code>我这里报错：没有找到electron这个包，因此运行`npm install electron --save`进行安装\n在`npm run test`成功以后，会将build生成的文件推送到gh-pages分支。\n这里可能会出现没权限访问远端仓库的error，这样需要通过`https://github.com/settings/tokens`来设置访问token，特别主要要将repo勾选，不然照样没有权限。\n</code></pre></blockquote>\n<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><p>在域名的解析设置下添加三条记录：</p>\n<blockquote>\n<pre><code>记录类型     主机记录     解析线路(运营商)     记录值\nCNAME          @           默认        MGTfang.github.io.\n    A          www         默认        192.30.252.153\n    A          www         默认        192.30.252.154\n</code></pre></blockquote>\n<p>包括两条A记录和一条CNAME记录，A记录指向以www开头的域名，记录值是GitHub的IP地址，CNAME的记录值是可以访问GitHub pages的地址。<br>除了绑定域名，还需要在访问仓库额根目录下创建一个CNAME文件，并在其中写入绑定的域名，这样直接访问域名就能访问gh-pages分支下的静态页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h2><p>本文记录如何用travis实现自动化部署GitHub仓库中的博客项目，并完成域名访问。</p>\n<h2 id=\"travis登录和授权\"><a href=\"#travis登录和授权\" class=\"headerlink\" title=\"travis登录和授权\"></a>travis登录和授权</h2><p>travis可以用GitHub账号登录，登录后在profile页授权允许travis访问的仓库。 </p>\n<blockquote>\n<p>比如我这里的GitHub仓库是vue-ghpages-blog，也是我准备部署的博客项目。</p>\n</blockquote>\n<h2 id=\"GitHub-pages的一点概念\"><a href=\"#GitHub-pages的一点概念\" class=\"headerlink\" title=\"GitHub pages的一点概念\"></a>GitHub pages的一点概念</h2><p>搭建项目站点的两种方式：</p>\n<blockquote>\n<p>一种是创建一个名为 <code>GitHub用户名.github.io</code>的仓库，在外网以该仓库名作为地址进行访问就可以访问到仓库里面的静态页面了。<br>另一种是给仓库创建一个gh-pages分支，将运行<code>npm run build</code>命令编译生成到项目dist目录下的文件push到gh-pages分支。访问<code>GitHub用户名.github.io/仓库名</code>如<code>https://github.com/MGTfang/vue-ghpages-blog</code>，也能访问到编译项目生成的静态文件。</p>\n</blockquote>\n<h2 id=\"travis自动化部署的条件\"><a href=\"#travis自动化部署的条件\" class=\"headerlink\" title=\"travis自动化部署的条件\"></a>travis自动化部署的条件</h2><p>在授权travis访问仓库（项目）的前提下，还需要在仓库的根目录下有个.travis.yml文件，部分内容如下：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">script:</span><br><span class=\"line\">  - npm test</span><br><span class=\"line\"></span><br><span class=\"line\">after_success:</span><br><span class=\"line\">  - npm run build</span><br><span class=\"line\">  - cd dist</span><br><span class=\"line\">  - echo <span class=\"string\">\"dtechvoi.com\"</span> &gt; CNAME</span><br><span class=\"line\">  - cp index.html <span class=\"number\">404.</span>html</span><br><span class=\"line\">  - git add --all .</span><br><span class=\"line\">  - git commit --message <span class=\"string\">\"Automatically update from travis-ci\"</span></span><br><span class=\"line\">  - git push --quiet <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> gh-pages:gh-pages</span><br><span class=\"line\"></span><br><span class=\"line\"># Note: you should set Environment Variables here or 'Settings' on travis-ci.org</span><br><span class=\"line\">env:</span><br><span class=\"line\">  global:</span><br><span class=\"line\">    - GH_REF: github.com/MGTfang/vue-ghpages-blog.git</span><br><span class=\"line\">    # - GH_TOKEN: 'Your GitHub Personal access tokens, via https://github.com/settings/tokens'</span><br></pre></td></tr></table></figure></p>\n<p>当将更改的文件push到远端仓库（这里是vue-ghpages-blog的develop分支）的时候，travis会自动执行一次build，build操作根据.travis.yml内容来进行。例如根据上面的脚本（有部分省去了），先设置环境变量GH_REF、GH_TOKEN，再更新nvm，运行npm install、npm test。</p>\n<blockquote>\n<pre><code>我这里报错：没有找到electron这个包，因此运行`npm install electron --save`进行安装\n在`npm run test`成功以后，会将build生成的文件推送到gh-pages分支。\n这里可能会出现没权限访问远端仓库的error，这样需要通过`https://github.com/settings/tokens`来设置访问token，特别主要要将repo勾选，不然照样没有权限。\n</code></pre></blockquote>\n<h2 id=\"域名绑定\"><a href=\"#域名绑定\" class=\"headerlink\" title=\"域名绑定\"></a>域名绑定</h2><p>在域名的解析设置下添加三条记录：</p>\n<blockquote>\n<pre><code>记录类型     主机记录     解析线路(运营商)     记录值\nCNAME          @           默认        MGTfang.github.io.\n    A          www         默认        192.30.252.153\n    A          www         默认        192.30.252.154\n</code></pre></blockquote>\n<p>包括两条A记录和一条CNAME记录，A记录指向以www开头的域名，记录值是GitHub的IP地址，CNAME的记录值是可以访问GitHub pages的地址。<br>除了绑定域名，还需要在访问仓库额根目录下创建一个CNAME文件，并在其中写入绑定的域名，这样直接访问域名就能访问gh-pages分支下的静态页面。</p>\n"},{"title":"《D3.js in Action Data visualization with JavaScript(2nd)》部分章节摘要","author":"Peng Fang","date":"2018-06-27T10:58:00.000Z","_content":"## 什么是D3\n为满足Web可访问的，复杂的数据可视化需求而生。\n假如你公司使用了BI工具，但是他们不能满足团队需求用来显示数据的类型模式。\n那么你就需要量身定制地构建一个客户化的看板来精确展示具体领域客户的行为。\n这个数据看板需要快速、可交互、能在组织内分享。那么可以使用D3来做这个事情。\nD3.js的创始人Mike Bostock，用他的话说：提供极度灵活，Web标准化的能力，例如CSS3,HTML5,SVG. 最新迭代版本D3.v4\n## D3怎样工作\n怎样使用D3来处理和呈现数据，也是增加交互性，优化数据可视化。\n理解D3选择器、数据绑定、D3怎样与DOM中的SVG和HTML交互。\n### 数据可视化不仅仅是图表\n你或许认为数据可视化仅限于饼图、线图、以及其他各类图表。远远不止如此。D3.js核心能力之一是为传统图表创建矢量图形，创建地理空间和网络可视化，以及丰富的动画和交互性。数据可视化这种广泛的方法中，地图或者网络图谱或表格是数据的一种表现形式，也是D3.js库提供的核心能力。\n学习D3是因为它提供能力实现几乎每个主要的数据可视化技术，也提供能力创建你自己的数据可视化技术。\n### D3数据选择和绑定\nselection是数据和元素的组合。我们对group中的元素执行一个行为，例如移动或者改变颜色。同样也可以更新数据中的值。尽管我们以页面元素和数据分离的方式工作，D3真正强大来自于使用选择器来合并数据和web页面元素。\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\n```\n使用d3.select()选择单个元素；使用d3.selectAll()选中多个元素\n选择器是一个或多个页面元素的组合能够与数据集相关联，例如下面的代码是绑定数组[1,5,11,3]元素到样式名为market的div：\n``` javascript\nd3.selectAll(\"div.market\").data([1,5,11,3])\n```\nD3遍历选择器中的元素，使用绑定数据执行相同的行为，导致不同的图形化效果。行为相同，效果不同。\n决定一个元素的行为和呈现分别是：样式、属性attributes、特性properties。样式决定不透明度、颜色、尺寸、边框等。属性包含ID、类名、交互行为。特性涉及状态，例如单选框的选中。D3有三个函数来定义这些值：\n``` javascript\nd3.select(\"#someDiv\").style(\"border\", \"5px darkgray dashed\");\nd3.select(\"#someDiv\").attr(\"id\", \"newID\");\nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\nDOM决定了元素在屏幕上的绘制顺序，孩子元素在父元素的里面及之后绘制。尽管传统HTML中可以使用z-index来控制，但是在SVG2规范实现之前，设置z-index对SVG元素来说不管用。\n### SVG\nHTML5一个主要的特性就是集成支持SVG。SVG允许图像简单的数字呈现如缩放，这并应用到动画和交互中。D3提供一个抽象层绘制SVG。SVG绘制复杂形状的指令如路径，从画布的一个点开始向另一个点画线。如果想绘制曲线，将绘制曲线的坐标设置为path的d属性。\n``` html\n<!doctype html>\n<html>\n<script src=\"d3.v4.min.js\">\n</script>\n<body>\n<div id=\"infovizDiv\">\n<svg style=\"width:500px;height:500px;border:1px lightgray solid;\">\n<path d=\"M 10,60 40,30 50,50 60,30 70,80\"\nstyle=\"fill:black;stroke:gray;stroke-width:4px;\" />\n<polygon style=\"fill:gray;\"\npoints=\"80,400 120,400 160,440 120,480 60,460\" />\n<g>\n<line x1=\"200\" y1=\"100\" x2=\"450\" y2=\"225\"\nstyle=\"stroke:black;stroke-width:2px;\"/>\n<circle cy=\"100\" cx=\"200\" r=\"30\"/>\n<rect x=\"410\" y=\"200\" width=\"100\" height=\"50\"\nstyle=\"fill:pink;stroke:black;stroke-width:1px;\" />\n</g>\n</svg>\n</div>\n</body>\n</html>\n```\nsvg提供一系列的通用形状集合：`<CIRCLE>`, `<RECT>`, `<LINE>`, `<POLYGON>`，每个形状都有元素决定它的尺寸和位置。`<RECT>`有x和y属性决定形状左上角的位置。`<CIRCLE>`的x和y属性决定圆心的位置，r属性决定圆半径。`<LINE>`x1和y1作为起点坐标，x2和y2决定中的坐标位置。\n任何形状的颜色、外轮廓、不透明度能被改变来适应形状的样式，fill决定形状区域的颜色，stroke,stroke-width,stroke-dasharray决定其外轮廓。\n能像下面这样改变矩形的样式：\n``` css\nfill:purple;stroke-width:5px;stroke:cornflowerblue;\n```\n`<TEXT>`,SVG提供写文本的能力。如果想要实现基本的格式化，可以在`<TEXT>`中嵌套`<TSPAN>`。\n`<G>`或者组元素，区别于之前的SVG元素，它没有图形化呈现的能力，不存在一个边界空间。可以使用它来表示一个逻辑分组。当创建一个图形对象，有几个形状的图形和文本组成，就可以将它们放在`<G>`标签内。在画板内移动`<G>`元素，可以通过transform属性，它接受一个结构化的描述就是translate()，传一对坐标x和y，表示其向右和向下移动的像素数。transform属性还接受scale()，用来改变图形渲染的比例。\n![路径的属性设置](http://pic.caigoubao.cc/604149/blog/visualization/Path%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B7%AE%E5%BC%82.png)\n### CSS\n.css文件能被引入到HTML页当中，或者直接嵌入HTML当中，或者同js控制。\n``` javascript \nd3.select(#someElement).style(opacity, .5);\nd3.select(\"circle\").attr(\"class\", \"tentative\");\nd3.select(\"circle\").classed(\"active\", true);\n```\n通过`.classed()`，不必重写存在的样式，而是从样式列表中添加或者移除命名的样式。\n### JavaScript\n方法链，也叫链式调用。这和我们平时聊天有点像。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n.data(someColors)\n.enter()\n.append(\"div\")\n.style(\"background\", function(d) {return d})\n.attr(\"cx\", function(d,i) {return i})\n.html(function(d) {return d})\n```\n## 数据标准\n因为不同目的数据被格式化为不同的形式，但是它倾向存在于我们认识的类型：表格数据，嵌套数据，网络数据，地理数据，裸数据，对象。\n## 第一个D3 APP\n``` html\n<html>\n<head>\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n</head>\n<body>\n<div id=\"vizcontainer\">\n<svg style=\"width:500px;height:500px;border:1px lightgray solid;\" />\n<script>\nd3.select(\"svg\")\n.append(\"circle\")\n.attr(\"r\", 20)\n.attr(\"cx\",20)\n.attr(\"cy\",20)\n.style(\"fill\",\"red\");\nd3.select(\"svg\")\n.append(\"text\")\n.attr(\"id\", \"a\")\n.attr(\"x\",20)\n.attr(\"y\",20)\n.style(\"opacity\", 0)\n.text(\"HELLO WORLD\");\nd3.select(\"svg\")\n.append(\"circle\")\n.attr(\"r\", 100)\n.attr(\"cx\",400)\n.attr(\"cy\",400)\n.style(\"fill\",\"lightblue\");\nd3.select(\"svg\")\n.append(\"text\")\n.attr(\"id\", \"b\")\n.attr(\"x\",400)\n.attr(\"y\",400)\n.style(\"opacity\", 0)\n.text(\"Uh, hi.\");\nd3.select(\"#a\").transition().delay(1000).style(\"opacity\", 1);\nd3.select(\"#b\").transition().delay(3000).style(\"opacity\", .75);\nd3.selectAll(\"circle\").transition().duration(2000).attr(\"cy\", 200);\n</script>\n</div>\n</body>\n</html>\n```\n## 使用数据\n![数据处理流程](http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n### 加载数据\n不管什么样的数据源，都可能被格式化成XML，CSV，或者JSON这样的格式。D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。\n``` javascript \nd3.csv(\"cities.csv\", (error,data) => { console.log(error, data) });\nd3.json(\"tweets.json\", data => console.log(data));\n```\nerror变量是可选项\n### 数据格式化\n在我们加载数据集以后，我们需要定义方法以致于数据的属性同颜色、尺寸和位置的设定相关。比如想展示导入的CSV文件格式的城市数据，假如使用圆来表示，根据人口数量来设置圆的大小，根据几何坐标设置位置。在做数据可视化的时候，我们需要理解数据形式，通常可以分为数量的，类别的，几何的，临时的，拓扑的或者未加工的。\n### 进一步更改数据\n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。使用d3.scale()函数来归一化数据。Scales（比例尺）有一个定义域domain和一个值域range。例如，从cities.csv里面取出人口数字的最小值和最大值，通过线性比例尺我们能将它们的不同很容易地展示到500px的画布上。下图所示，将 500,000到13,000,000相同的线性变化映射到0到500.\n![线性比例尺示意](http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(),d3.scaleOrdinal(), 以及其他不太通用但对数据集来说更加适合的比例尺来映射数据。\n将定量数据分类，将值按范围分或者组装到一起，是挺有用的。一种分类方法是将数组均分几份。\n![定量数据分类](http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套背后的观点是数据的共享属性能被用来排序成离散的类别和子类。\n``` javascript\nd3.json(\"tweets.json\", data => {\nvar tweetData = data.tweets;\nvar nestedTweets = d3.nest()\n.key(d => d.user)\n.entries(tweetData);\n});\n```\nd3.nest()合并推特账户到新的对象下的数组，这些新对象由唯一的用户属性值标记。\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean.\n### 测量数据\n在加载你的数据以后，首页的事情之一是你应该将它测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助你理解数据。\n``` javascript\nvar testArray = [88,10000,1,75,12,35];\nd3.min(testArray, el => el); // return 1\nd3.max(testArray, el => el); // 返回10000\nd3.mean(testArray, el => el); // 返回平均值1701.83\n```\n加入想从cities.csv获取人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n    d3.min(data, el => +el.population);\n    d3.max(data, el => +el.population);\n    d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n```\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n## 数据可视化\n接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。\n第一个例子使用cities.csv中的数据。\n### 选择器及绑定\n使用D3选择器来改变web页的结构和呈现。一个选择器是由DOM中一个或多个元素构成。你能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n    if (error) {\n        console.error(error)\n    }\n    else {\n        dataViz(data)\n    }\n});\nfunction dataViz(incomingData) {\n    d3.select(\"body\").selectAll(\"div.cities\")\n        .data(incomingData) // 绑定数据到选择器\n        .enter() // 定义当选择中的数据多于DOM元素时如何响应\n        .append(\"div\") // 在当前选择器中创建一个元素\n        .attr(\"class\", \"cities\") // 设置新创建元素class\n        .html(d => d.label); // 设置创建div的内容\n}\n```\nd3.selectAll()传入对应于DOM一部分的CSS id选择器。经常传入id没有匹配到任何元素，那么称其为空选择器，使用.enter()函数在页面上创建新元素。需要指明一个选择器如何创建或更改一个具体DOM元素的孩子元素。注意子选项不会自动生成父节点。父亲必须已经存在，或者需要使用.append()创建一个。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市通选中器中的一个DOM元素想联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n当存在的数据值比较少，.enter()函数会触发\n当两者数量一样，则都不会触发\n当你知道将不会有更少的数据元素，则不必为.exit()定义处理行为。\n.append()函数允许你添加更多元素，定义添加哪个元素。通过.insert()你能控制新元素添加的地方。\n.attr()函数是用来改变样式和属性\n.html()函数可以设置DOM元素的内容\n### 使用内联函数访问数据\n在选择器中使用一个内联匿名函数，自动提供两个变量的访问，这对数据呈现很关键。一个是数据值本身，一个是该数据在数组中的位置。\n直方图是分类表达数据数值最简单最有效的方法。\n``` javascript\nd3.select(\"svg\")\n    .selectAll(\"rect\")\n    .data([15, 50, 22, 8, 100, 10])\n    .enter()\n    .append(\"rect\")\n    .attr(\"height\", d => d)\n    .style(\"fill\", \"#FE9922\")\n    .style(\"stroke\", \"#9A8B7A\")\n    .style(\"stroke-width\", \"1px\")\n    .attr(\"x\", (d,i) => i * 10)\n    .attr(\"y\", d => 100 - d);\n```\n多线性比例尺是在domain和range带有多个点的线性比例尺。比如我们对1到100范围内的值特别感兴趣，对100到1000内的值有时候感兴趣。偶尔会得到相当大的异常值。我们能这样表示：\n``` javascript\nvar yScale =\n    d3.scaleLinear().domain([0,100,1000,24500]).range([0,50,75,100]);\n```\n例如，有一些调查返回的数据，我们认为大于500就表示成功。我们仅仅想显示0到500内的数据，同时用比例尺强调0到100的变化。\n``` javascript\nvar yScale = d3.scaleLinear().domain([0,100,500]).range([0,50,100]);\nyScale(1000); // 返回162.5\n```\n通常D3比例尺会推断最小值到最大值之外的值。如果想设置小于最小值的取最小值，大于最大值的取最大值。\n可以使用.clamp()函数：\n``` javascript\nvar yScale = d3.scaleLinear()\n    .domain([0,100,500])\n    .range([0,50,100])\n    .clamp(true);\nyScale(1000); // 返回100\n```\nscale函数使决定位置、尺寸、数据可视化元素颜色的关键。\n## 数据呈现\n``` javascript\nd3.csv(\"cities.csv\",(error, data) => { dataViz(data) });\nfunction dataViz(incomingData) {\n    var maxPopulation = d3.max(incomingData, d => parseInt(d.population)) // 人口数最大值\n    var yScale = d3.scaleLinear().domain([0, maxPopulation]).range([0,460]);\n    d3.select(\"svg\").attr(\"style\", \"height: 480px; width: 600px;\");\n    d3.select(\"svg\")\n        .selectAll(\"rect\")\n        .data(incomingData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"width\", 50)\n        .attr(\"height\", d => yScale(parseInt(d.population)))\n        .attr(\"x\", (d,i) => i * 60)\n        .attr(\"y\", d => 480 - yScale(parseInt(d.population)))\n        .style(\"fill\", \"#FE9922\")\n        .style(\"stroke\", \"#9A8B7A\")\n        .style(\"stroke-width\", \"1px\")\n}\n```\n``` javascript\nd3.json(\"tweets.json\",(error, data) => { dataViz(data.tweets) }); \nfunction dataViz(incomingData) {\n    var nestedTweets = d3.nest()\n        .key(d => d.user)\n        .entries(incomingData);\n    nestedTweets.forEach(d => {\n        d.numTweets = d.values.length; // 创建一个新属性\n    })\n    var maxTweets = d3.max(nestedTweets, d => d.numTweets);\n    var yScale = d3.scaleLinear().domain([0,maxTweets]).range([0,500]);\n    d3.select(\"svg\")\n        .selectAll(\"rect\")\n        .data(nestedTweets)\n        .enter()\n        .append(\"rect\")\n        .attr(\"width\", 50)\n        .attr(\"height\", d => yScale(d.numTweets))\n        .attr(\"x\", (d,i) => i * 60)\n        .attr(\"y\", d => 500 - yScale(d.numTweets))\n        .style(\"fill\", \"#FE9922\")\n        .style(\"stroke\", \"#9A8B7A\")\n        .style(\"stroke-width\", \"1px\");\n}\n```\n![推特用户直方图](http://pic.caigoubao.cc/604149/blog/visualization/%E6%8E%A8%E7%89%B9%E7%94%A8%E6%88%B7%E7%9B%B4%E6%96%B9%E5%9B%BE.png)\n### 设置通道channel\n多变量是另一种表示具有多个数据特征的数据点的方式。channel是一个图形如何直观表达数据的技术术语，它取决于你正在使用的数据，不同的通道适用于来表达不同的数据可视化。\n下面通过时间和影响因子两个维度来呈现数据：\n``` javascript\nfunction dataViz(incomingData) {\n    incomingData.forEach(d => {\n        d.impact = d.favorites.length + d.retweets.length;\n        d.tweetTime = new Date(d.timestamp);\n    })\n    var maxImpact = d3.max(incomingData, d => d.impact);\n    var startEnd = d3.extent(incomingData, d => d.tweetTime);\n    var timeRamp = d3.scaleTime().domain(startEnd).range([20, 480]);\n    var yScale = d3.scaleLinear().domain([0, maxImpact]).range([0, 460]);\n    var radiusScale = d3.scaleLinear()\n        .domain([0, maxImpact]).range([1, 20]);\n    var colorScale = d3.scaleLinear()\n        .domain([0, maxImpact]).range([\"white\", \"#75739F\"]);\n    d3.select(\"svg\")\n        .selectAll(\"circle\")\n        .data(incomingData)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", d => radiusScale(d.impact))\n        .attr(\"cx\", d => timeRamp(d.tweetTime))\n        .attr(\"cy\", d => 480 - yScale(d.impact))\n        .style(\"fill\", d => colorScale(d.impact))\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"1px\");\n    };\n```\n### Enter, update, mergem, exit\n.enter()已经用到很多次了。现在让我们近距离看看它， 以及与它配对的.exit()。它们只有在绑定数据个数和选择器中DOM元素个数不匹配时才会触发。使用selection.enter() 定义怎样基于绑定数据创建新元素，使用selection.exit()定义元素相关的数据被删除时，如何移除选择器中的元素。更新绑定数据时，会基于数据重新创建图形元素。\n大多数情况，使用.enter()事件，就会使用.append()来添加元素。\n![进入退出更新示意图](http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n``` javascript\nd3.selectAll(\"g\").data([1,2,3,4]).exit().remove();\n```\n这个代码会删除四个<g>元素。选择器前四个元素绑定了新数据，其余的属于.exit()函数。大多数情况下，不会遇到这样的绑定数组完全不同情况，一般通过用户交互或者其他行为触发数据过滤界面呈现变化后会看到初始化数据的重新绑定。\nd3.merge()允许合并两个选择器，以致于可以同时操作它们。\n通常.data()绑定基于数据值在数组中的位置。如果不想依赖位置，而是依赖你绑定的键值，使用有意义的键值，例如数据对象本身的值。所有对象都被当做[object object]对待，所有可以使用JSON.stringify函数。\n``` javascript\nfunction dataViz(incomingData) {\n    incomingData.forEach(d => {\n        d.impact = d.favorites.length + d.retweets.length;\n        d.tweetTime = new Date(d.timestamp);\n    })\n    var maxImpact = d3.max(incomingData, d => d.impact)\n    var startEnd = d3.extent(incomingData, d => d.tweetTime)\n    var timeRamp = d3.scaleTime().domain(startEnd).range([ 50, 450 ]);\n    var yScale = d3.scaleLinear().domain([ 0, maxImpact ]).range([ 0, 460 ]);\n    var radiusScale = d3.scaleLinear()\n        .domain([ 0, maxImpact ])\n        .range([ 1, 20 ]);\n    d3.select(\"svg\").selectAll(\"circle\")\n        .data(incomingData, JSON.stringify)\n        .enter().append(\"circle\")\n        .attr(\"r\", d => radiusScale(d.impact))\n        .attr(\"cx\", d => timeRamp(d.tweetTime))\n        .attr(\"cy\", d => 480 - yScale(d.impact))\n        .style(\"fill\", \"#75739F \")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"1px\");\n    var filteredData = incomingData.filter(d => d.impact > 0)\n    d3.selectAll(\"circle\")\n        .data(filteredData, d => JSON.stringify(d))\n        .exit()\n        .remove();\n}\n以上代码，会将影响因子不大于0的元素移除。\n如果使用转化为字符串的对象，改变数据的话将不起作用，因为它不再与原始绑定的字符串相关。如果计划做重要的改变和更新，数据对象需要一个唯一ID作为绑定键值。\n```\n\n## 文档驱动设计及交互\nD3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。\n``` javascript \nd3.select(\"g.overallG\").raise()\nd3.select(\"g.overallG\").lower()\n```\n禁用元素的鼠标事件：\n``` javascript\nteamG.select(\"text\").style(\"pointer-events\",\"none\");\n```\n### 使用颜色\nd3.rbg()的使用如下：\n``` javascript\nteamColor = d3.rgb(\"red\");\nteamColor = d3.rgb(\"#ff0000\");\nteamColor = d3.rgb(\"rgb(255,0,0)\");\nteamColor = d3.rgb(255,0,0);\n```\n这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。\n``` javascript\nd3.selectAll(\"g.overallG\").select(\"circle\")\n  .style(\"fill\", p => p.region === d.region ?\n  teamColor.darker(.75) : teamColor.brighter(.5))\n```\nd3.hsl, d3.lab, d3.cubehelix, d3.hcl可以呈现不同的颜色空间\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0,maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c\n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回灰色值。\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n## 预生成内容\n### 图片\n使用insert()替代append()，是告诉D3在文本元素前面嵌入图片，使得标签文字在新添加的图片后被绘制。\n``` javascript\nd3.selectAll(\"g.overallG\").insert(\"image\", \"text\")\n  .attr(\"xlink:href\", d => `images/${d.team}.png`)\n  .attr(\"width\", \"45px\").attr(\"height\", \"20px\")\n  .attr(\"x\", -22).attr(\"y\", -10)\n```\n### SVG\n```javascript\nd3.html(\"resources/icon_1907.svg\", loadSVG);\nfunction loadSVG(svgData) {\n  d3.selectAll(\"g\").each(function() {\n    var gParent = this;\n    d3.select(svgData).selectAll(\"path\").each(function() {\n      gParent.appendChild(this.cloneNode(true))\n    });\n  });\n};\nd3.selectAll(\"path\").style(\"fill\", \"#93C464\")\n  .style(\"stroke\", \"black\").style(\"stroke-width\", \"1px\");\n```\n效果图\n![Football icons](http://pic.caigoubao.cc/604149/blog/visualization/footballs.png)\n\n### 参考资料\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)","source":"_posts/《D3-js-in-Action-Data-visualization-with-JavaScript-2nd-》部分章节摘要.md","raw":"title: 《D3.js in Action Data visualization with JavaScript(2nd)》部分章节摘要\nauthor: Peng Fang\ntags:\n  - D3.js\ncategories:\n  - 数据可视化\ndate: 2018-06-27 18:58:00\n---\n## 什么是D3\n为满足Web可访问的，复杂的数据可视化需求而生。\n假如你公司使用了BI工具，但是他们不能满足团队需求用来显示数据的类型模式。\n那么你就需要量身定制地构建一个客户化的看板来精确展示具体领域客户的行为。\n这个数据看板需要快速、可交互、能在组织内分享。那么可以使用D3来做这个事情。\nD3.js的创始人Mike Bostock，用他的话说：提供极度灵活，Web标准化的能力，例如CSS3,HTML5,SVG. 最新迭代版本D3.v4\n## D3怎样工作\n怎样使用D3来处理和呈现数据，也是增加交互性，优化数据可视化。\n理解D3选择器、数据绑定、D3怎样与DOM中的SVG和HTML交互。\n### 数据可视化不仅仅是图表\n你或许认为数据可视化仅限于饼图、线图、以及其他各类图表。远远不止如此。D3.js核心能力之一是为传统图表创建矢量图形，创建地理空间和网络可视化，以及丰富的动画和交互性。数据可视化这种广泛的方法中，地图或者网络图谱或表格是数据的一种表现形式，也是D3.js库提供的核心能力。\n学习D3是因为它提供能力实现几乎每个主要的数据可视化技术，也提供能力创建你自己的数据可视化技术。\n### D3数据选择和绑定\nselection是数据和元素的组合。我们对group中的元素执行一个行为，例如移动或者改变颜色。同样也可以更新数据中的值。尽管我们以页面元素和数据分离的方式工作，D3真正强大来自于使用选择器来合并数据和web页面元素。\n``` javascript\nd3.selectAll(\"circle.a\").style(\"fill\", \"red\").attr(\"cx\", 100)\n```\n使用d3.select()选择单个元素；使用d3.selectAll()选中多个元素\n选择器是一个或多个页面元素的组合能够与数据集相关联，例如下面的代码是绑定数组[1,5,11,3]元素到样式名为market的div：\n``` javascript\nd3.selectAll(\"div.market\").data([1,5,11,3])\n```\nD3遍历选择器中的元素，使用绑定数据执行相同的行为，导致不同的图形化效果。行为相同，效果不同。\n决定一个元素的行为和呈现分别是：样式、属性attributes、特性properties。样式决定不透明度、颜色、尺寸、边框等。属性包含ID、类名、交互行为。特性涉及状态，例如单选框的选中。D3有三个函数来定义这些值：\n``` javascript\nd3.select(\"#someDiv\").style(\"border\", \"5px darkgray dashed\");\nd3.select(\"#someDiv\").attr(\"id\", \"newID\");\nd3.select(\"#someCheckbox\").property(\"checked\", true);\n```\nDOM决定了元素在屏幕上的绘制顺序，孩子元素在父元素的里面及之后绘制。尽管传统HTML中可以使用z-index来控制，但是在SVG2规范实现之前，设置z-index对SVG元素来说不管用。\n### SVG\nHTML5一个主要的特性就是集成支持SVG。SVG允许图像简单的数字呈现如缩放，这并应用到动画和交互中。D3提供一个抽象层绘制SVG。SVG绘制复杂形状的指令如路径，从画布的一个点开始向另一个点画线。如果想绘制曲线，将绘制曲线的坐标设置为path的d属性。\n``` html\n<!doctype html>\n<html>\n<script src=\"d3.v4.min.js\">\n</script>\n<body>\n<div id=\"infovizDiv\">\n<svg style=\"width:500px;height:500px;border:1px lightgray solid;\">\n<path d=\"M 10,60 40,30 50,50 60,30 70,80\"\nstyle=\"fill:black;stroke:gray;stroke-width:4px;\" />\n<polygon style=\"fill:gray;\"\npoints=\"80,400 120,400 160,440 120,480 60,460\" />\n<g>\n<line x1=\"200\" y1=\"100\" x2=\"450\" y2=\"225\"\nstyle=\"stroke:black;stroke-width:2px;\"/>\n<circle cy=\"100\" cx=\"200\" r=\"30\"/>\n<rect x=\"410\" y=\"200\" width=\"100\" height=\"50\"\nstyle=\"fill:pink;stroke:black;stroke-width:1px;\" />\n</g>\n</svg>\n</div>\n</body>\n</html>\n```\nsvg提供一系列的通用形状集合：`<CIRCLE>`, `<RECT>`, `<LINE>`, `<POLYGON>`，每个形状都有元素决定它的尺寸和位置。`<RECT>`有x和y属性决定形状左上角的位置。`<CIRCLE>`的x和y属性决定圆心的位置，r属性决定圆半径。`<LINE>`x1和y1作为起点坐标，x2和y2决定中的坐标位置。\n任何形状的颜色、外轮廓、不透明度能被改变来适应形状的样式，fill决定形状区域的颜色，stroke,stroke-width,stroke-dasharray决定其外轮廓。\n能像下面这样改变矩形的样式：\n``` css\nfill:purple;stroke-width:5px;stroke:cornflowerblue;\n```\n`<TEXT>`,SVG提供写文本的能力。如果想要实现基本的格式化，可以在`<TEXT>`中嵌套`<TSPAN>`。\n`<G>`或者组元素，区别于之前的SVG元素，它没有图形化呈现的能力，不存在一个边界空间。可以使用它来表示一个逻辑分组。当创建一个图形对象，有几个形状的图形和文本组成，就可以将它们放在`<G>`标签内。在画板内移动`<G>`元素，可以通过transform属性，它接受一个结构化的描述就是translate()，传一对坐标x和y，表示其向右和向下移动的像素数。transform属性还接受scale()，用来改变图形渲染的比例。\n![路径的属性设置](http://pic.caigoubao.cc/604149/blog/visualization/Path%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B7%AE%E5%BC%82.png)\n### CSS\n.css文件能被引入到HTML页当中，或者直接嵌入HTML当中，或者同js控制。\n``` javascript \nd3.select(#someElement).style(opacity, .5);\nd3.select(\"circle\").attr(\"class\", \"tentative\");\nd3.select(\"circle\").classed(\"active\", true);\n```\n通过`.classed()`，不必重写存在的样式，而是从样式列表中添加或者移除命名的样式。\n### JavaScript\n方法链，也叫链式调用。这和我们平时聊天有点像。\n``` javascript \nd3.selectAll(\"div\").data(someData).enter().append(\"div\").html(\"Wow\").append(\"span\").html(\"Even More Wow\").style(\"font-weight\", \"900\");\n```\n可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。\n``` javascript \nvar someColors = [\"blue\", \"red\", \"chartreuse\", \"orange\"];\nsomeColors = someColors.filter(function(d) {return d.length < 5});\nd3.select(\"body\").selectAll(\"div\")\n.data(someColors)\n.enter()\n.append(\"div\")\n.style(\"background\", function(d) {return d})\n.attr(\"cx\", function(d,i) {return i})\n.html(function(d) {return d})\n```\n## 数据标准\n因为不同目的数据被格式化为不同的形式，但是它倾向存在于我们认识的类型：表格数据，嵌套数据，网络数据，地理数据，裸数据，对象。\n## 第一个D3 APP\n``` html\n<html>\n<head>\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n</head>\n<body>\n<div id=\"vizcontainer\">\n<svg style=\"width:500px;height:500px;border:1px lightgray solid;\" />\n<script>\nd3.select(\"svg\")\n.append(\"circle\")\n.attr(\"r\", 20)\n.attr(\"cx\",20)\n.attr(\"cy\",20)\n.style(\"fill\",\"red\");\nd3.select(\"svg\")\n.append(\"text\")\n.attr(\"id\", \"a\")\n.attr(\"x\",20)\n.attr(\"y\",20)\n.style(\"opacity\", 0)\n.text(\"HELLO WORLD\");\nd3.select(\"svg\")\n.append(\"circle\")\n.attr(\"r\", 100)\n.attr(\"cx\",400)\n.attr(\"cy\",400)\n.style(\"fill\",\"lightblue\");\nd3.select(\"svg\")\n.append(\"text\")\n.attr(\"id\", \"b\")\n.attr(\"x\",400)\n.attr(\"y\",400)\n.style(\"opacity\", 0)\n.text(\"Uh, hi.\");\nd3.select(\"#a\").transition().delay(1000).style(\"opacity\", 1);\nd3.select(\"#b\").transition().delay(3000).style(\"opacity\", .75);\nd3.selectAll(\"circle\").transition().duration(2000).attr(\"cy\", 200);\n</script>\n</div>\n</body>\n</html>\n```\n## 使用数据\n![数据处理流程](http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png)\n### 加载数据\n不管什么样的数据源，都可能被格式化成XML，CSV，或者JSON这样的格式。D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。\n``` javascript \nd3.csv(\"cities.csv\", (error,data) => { console.log(error, data) });\nd3.json(\"tweets.json\", data => console.log(data));\n```\nerror变量是可选项\n### 数据格式化\n在我们加载数据集以后，我们需要定义方法以致于数据的属性同颜色、尺寸和位置的设定相关。比如想展示导入的CSV文件格式的城市数据，假如使用圆来表示，根据人口数量来设置圆的大小，根据几何坐标设置位置。在做数据可视化的时候，我们需要理解数据形式，通常可以分为数量的，类别的，几何的，临时的，拓扑的或者未加工的。\n### 进一步更改数据\n数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。使用d3.scale()函数来归一化数据。Scales（比例尺）有一个定义域domain和一个值域range。例如，从cities.csv里面取出人口数字的最小值和最大值，通过线性比例尺我们能将它们的不同很容易地展示到500px的画布上。下图所示，将 500,000到13,000,000相同的线性变化映射到0到500.\n![线性比例尺示意](http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png)\n``` javascript \nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([0, 500]);\nnewRamp(1000000); // 返回20，可以将一千万人口的国家放在20px处\nnewRamp(9000000); // 返回340\nnewRamp.invert(313); // 求逆，返回8325000\nvar newRamp = d3.scaleLinear().domain([500000,13000000]).range([\"blue\", \"red\"]);\nnewRamp(1000000); // 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示\nnewRamp(9000000); // 返回\"#ad0052\"\nnewRamp.invert(\"#ad0052\"); // 因为invert函数只接受数字，因此返回NaN\n```\n我们也能使用d3.scaleLog(), d3.scalePow(),d3.scaleOrdinal(), 以及其他不太通用但对数据集来说更加适合的比例尺来映射数据。\n将定量数据分类，将值按范围分或者组装到一起，是挺有用的。一种分类方法是将数组均分几份。\n![定量数据分类](http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png)\n``` javascript \nvar sampleArray = [423,124,66,424,58,10,900,44,1];\nvar qScale = d3.scaleQuantile().domain(sampleArray).range([0,1,2]);\nqScale(423); // 返回2\nqScale(20); // 返回0\nqScale(10000); // 返回2\n```\n嵌套背后的观点是数据的共享属性能被用来排序成离散的类别和子类。\n``` javascript\nd3.json(\"tweets.json\", data => {\nvar tweetData = data.tweets;\nvar nestedTweets = d3.nest()\n.key(d => d.user)\n.entries(tweetData);\n});\n```\nd3.nest()合并推特账户到新的对象下的数组，这些新对象由唯一的用户属性值标记。\n在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean.\n### 测量数据\n在加载你的数据以后，首页的事情之一是你应该将它测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助你理解数据。\n``` javascript\nvar testArray = [88,10000,1,75,12,35];\nd3.min(testArray, el => el); // return 1\nd3.max(testArray, el => el); // 返回10000\nd3.mean(testArray, el => el); // 返回平均值1701.83\n```\n加入想从cities.csv获取人口的最小，最大，平均值：\n``` javascript\nd3.csv(\"cities.csv\", data => {\n    d3.min(data, el => +el.population);\n    d3.max(data, el => +el.population);\n    d3.mean(data, el => +el.population);\n});\n```\nd3.extent方便地将d3.min()和d3.max()在一个数组中返回：\n```\nd3.extent(data, el => +el.population); // 返回[500000, 1300000]\n```\n现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。\n## 数据可视化\n接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。\n第一个例子使用cities.csv中的数据。\n### 选择器及绑定\n使用D3选择器来改变web页的结构和呈现。一个选择器是由DOM中一个或多个元素构成。你能使用选择器创建和删除元素，更改样式和内容。\n``` javascript\nd3.csv(\"cities.csv\", (error,data) => {\n    if (error) {\n        console.error(error)\n    }\n    else {\n        dataViz(data)\n    }\n});\nfunction dataViz(incomingData) {\n    d3.select(\"body\").selectAll(\"div.cities\")\n        .data(incomingData) // 绑定数据到选择器\n        .enter() // 定义当选择中的数据多于DOM元素时如何响应\n        .append(\"div\") // 在当前选择器中创建一个元素\n        .attr(\"class\", \"cities\") // 设置新创建元素class\n        .html(d => d.label); // 设置创建div的内容\n}\n```\nd3.selectAll()传入对应于DOM一部分的CSS id选择器。经常传入id没有匹配到任何元素，那么称其为空选择器，使用.enter()函数在页面上创建新元素。需要指明一个选择器如何创建或更改一个具体DOM元素的孩子元素。注意子选项不会自动生成父节点。父亲必须已经存在，或者需要使用.append()创建一个。\n这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市通选中器中的一个DOM元素想联系，关联数据是存在元素的data属性中。\n``` javascript\ndocument.getElementsByClassName(\"cities\")[0].__data__ // 返回一个指向对象的指针\n```\n当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。\n当存在的数据值比较少，.enter()函数会触发\n当两者数量一样，则都不会触发\n当你知道将不会有更少的数据元素，则不必为.exit()定义处理行为。\n.append()函数允许你添加更多元素，定义添加哪个元素。通过.insert()你能控制新元素添加的地方。\n.attr()函数是用来改变样式和属性\n.html()函数可以设置DOM元素的内容\n### 使用内联函数访问数据\n在选择器中使用一个内联匿名函数，自动提供两个变量的访问，这对数据呈现很关键。一个是数据值本身，一个是该数据在数组中的位置。\n直方图是分类表达数据数值最简单最有效的方法。\n``` javascript\nd3.select(\"svg\")\n    .selectAll(\"rect\")\n    .data([15, 50, 22, 8, 100, 10])\n    .enter()\n    .append(\"rect\")\n    .attr(\"height\", d => d)\n    .style(\"fill\", \"#FE9922\")\n    .style(\"stroke\", \"#9A8B7A\")\n    .style(\"stroke-width\", \"1px\")\n    .attr(\"x\", (d,i) => i * 10)\n    .attr(\"y\", d => 100 - d);\n```\n多线性比例尺是在domain和range带有多个点的线性比例尺。比如我们对1到100范围内的值特别感兴趣，对100到1000内的值有时候感兴趣。偶尔会得到相当大的异常值。我们能这样表示：\n``` javascript\nvar yScale =\n    d3.scaleLinear().domain([0,100,1000,24500]).range([0,50,75,100]);\n```\n例如，有一些调查返回的数据，我们认为大于500就表示成功。我们仅仅想显示0到500内的数据，同时用比例尺强调0到100的变化。\n``` javascript\nvar yScale = d3.scaleLinear().domain([0,100,500]).range([0,50,100]);\nyScale(1000); // 返回162.5\n```\n通常D3比例尺会推断最小值到最大值之外的值。如果想设置小于最小值的取最小值，大于最大值的取最大值。\n可以使用.clamp()函数：\n``` javascript\nvar yScale = d3.scaleLinear()\n    .domain([0,100,500])\n    .range([0,50,100])\n    .clamp(true);\nyScale(1000); // 返回100\n```\nscale函数使决定位置、尺寸、数据可视化元素颜色的关键。\n## 数据呈现\n``` javascript\nd3.csv(\"cities.csv\",(error, data) => { dataViz(data) });\nfunction dataViz(incomingData) {\n    var maxPopulation = d3.max(incomingData, d => parseInt(d.population)) // 人口数最大值\n    var yScale = d3.scaleLinear().domain([0, maxPopulation]).range([0,460]);\n    d3.select(\"svg\").attr(\"style\", \"height: 480px; width: 600px;\");\n    d3.select(\"svg\")\n        .selectAll(\"rect\")\n        .data(incomingData)\n        .enter()\n        .append(\"rect\")\n        .attr(\"width\", 50)\n        .attr(\"height\", d => yScale(parseInt(d.population)))\n        .attr(\"x\", (d,i) => i * 60)\n        .attr(\"y\", d => 480 - yScale(parseInt(d.population)))\n        .style(\"fill\", \"#FE9922\")\n        .style(\"stroke\", \"#9A8B7A\")\n        .style(\"stroke-width\", \"1px\")\n}\n```\n``` javascript\nd3.json(\"tweets.json\",(error, data) => { dataViz(data.tweets) }); \nfunction dataViz(incomingData) {\n    var nestedTweets = d3.nest()\n        .key(d => d.user)\n        .entries(incomingData);\n    nestedTweets.forEach(d => {\n        d.numTweets = d.values.length; // 创建一个新属性\n    })\n    var maxTweets = d3.max(nestedTweets, d => d.numTweets);\n    var yScale = d3.scaleLinear().domain([0,maxTweets]).range([0,500]);\n    d3.select(\"svg\")\n        .selectAll(\"rect\")\n        .data(nestedTweets)\n        .enter()\n        .append(\"rect\")\n        .attr(\"width\", 50)\n        .attr(\"height\", d => yScale(d.numTweets))\n        .attr(\"x\", (d,i) => i * 60)\n        .attr(\"y\", d => 500 - yScale(d.numTweets))\n        .style(\"fill\", \"#FE9922\")\n        .style(\"stroke\", \"#9A8B7A\")\n        .style(\"stroke-width\", \"1px\");\n}\n```\n![推特用户直方图](http://pic.caigoubao.cc/604149/blog/visualization/%E6%8E%A8%E7%89%B9%E7%94%A8%E6%88%B7%E7%9B%B4%E6%96%B9%E5%9B%BE.png)\n### 设置通道channel\n多变量是另一种表示具有多个数据特征的数据点的方式。channel是一个图形如何直观表达数据的技术术语，它取决于你正在使用的数据，不同的通道适用于来表达不同的数据可视化。\n下面通过时间和影响因子两个维度来呈现数据：\n``` javascript\nfunction dataViz(incomingData) {\n    incomingData.forEach(d => {\n        d.impact = d.favorites.length + d.retweets.length;\n        d.tweetTime = new Date(d.timestamp);\n    })\n    var maxImpact = d3.max(incomingData, d => d.impact);\n    var startEnd = d3.extent(incomingData, d => d.tweetTime);\n    var timeRamp = d3.scaleTime().domain(startEnd).range([20, 480]);\n    var yScale = d3.scaleLinear().domain([0, maxImpact]).range([0, 460]);\n    var radiusScale = d3.scaleLinear()\n        .domain([0, maxImpact]).range([1, 20]);\n    var colorScale = d3.scaleLinear()\n        .domain([0, maxImpact]).range([\"white\", \"#75739F\"]);\n    d3.select(\"svg\")\n        .selectAll(\"circle\")\n        .data(incomingData)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", d => radiusScale(d.impact))\n        .attr(\"cx\", d => timeRamp(d.tweetTime))\n        .attr(\"cy\", d => 480 - yScale(d.impact))\n        .style(\"fill\", d => colorScale(d.impact))\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"1px\");\n    };\n```\n### Enter, update, mergem, exit\n.enter()已经用到很多次了。现在让我们近距离看看它， 以及与它配对的.exit()。它们只有在绑定数据个数和选择器中DOM元素个数不匹配时才会触发。使用selection.enter() 定义怎样基于绑定数据创建新元素，使用selection.exit()定义元素相关的数据被删除时，如何移除选择器中的元素。更新绑定数据时，会基于数据重新创建图形元素。\n大多数情况，使用.enter()事件，就会使用.append()来添加元素。\n![进入退出更新示意图](http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n``` javascript\nd3.selectAll(\"g\").data([1,2,3,4]).exit().remove();\n```\n这个代码会删除四个<g>元素。选择器前四个元素绑定了新数据，其余的属于.exit()函数。大多数情况下，不会遇到这样的绑定数组完全不同情况，一般通过用户交互或者其他行为触发数据过滤界面呈现变化后会看到初始化数据的重新绑定。\nd3.merge()允许合并两个选择器，以致于可以同时操作它们。\n通常.data()绑定基于数据值在数组中的位置。如果不想依赖位置，而是依赖你绑定的键值，使用有意义的键值，例如数据对象本身的值。所有对象都被当做[object object]对待，所有可以使用JSON.stringify函数。\n``` javascript\nfunction dataViz(incomingData) {\n    incomingData.forEach(d => {\n        d.impact = d.favorites.length + d.retweets.length;\n        d.tweetTime = new Date(d.timestamp);\n    })\n    var maxImpact = d3.max(incomingData, d => d.impact)\n    var startEnd = d3.extent(incomingData, d => d.tweetTime)\n    var timeRamp = d3.scaleTime().domain(startEnd).range([ 50, 450 ]);\n    var yScale = d3.scaleLinear().domain([ 0, maxImpact ]).range([ 0, 460 ]);\n    var radiusScale = d3.scaleLinear()\n        .domain([ 0, maxImpact ])\n        .range([ 1, 20 ]);\n    d3.select(\"svg\").selectAll(\"circle\")\n        .data(incomingData, JSON.stringify)\n        .enter().append(\"circle\")\n        .attr(\"r\", d => radiusScale(d.impact))\n        .attr(\"cx\", d => timeRamp(d.tweetTime))\n        .attr(\"cy\", d => 480 - yScale(d.impact))\n        .style(\"fill\", \"#75739F \")\n        .style(\"stroke\", \"black\")\n        .style(\"stroke-width\", \"1px\");\n    var filteredData = incomingData.filter(d => d.impact > 0)\n    d3.selectAll(\"circle\")\n        .data(filteredData, d => JSON.stringify(d))\n        .exit()\n        .remove();\n}\n以上代码，会将影响因子不大于0的元素移除。\n如果使用转化为字符串的对象，改变数据的话将不起作用，因为它不再与原始绑定的字符串相关。如果计划做重要的改变和更新，数据对象需要一个唯一ID作为绑定键值。\n```\n\n## 文档驱动设计及交互\nD3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。\n``` javascript \nd3.select(\"g.overallG\").raise()\nd3.select(\"g.overallG\").lower()\n```\n禁用元素的鼠标事件：\n``` javascript\nteamG.select(\"text\").style(\"pointer-events\",\"none\");\n```\n### 使用颜色\nd3.rbg()的使用如下：\n``` javascript\nteamColor = d3.rgb(\"red\");\nteamColor = d3.rgb(\"#ff0000\");\nteamColor = d3.rgb(\"rgb(255,0,0)\");\nteamColor = d3.rgb(255,0,0);\n```\n这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。\n``` javascript\nd3.selectAll(\"g.overallG\").select(\"circle\")\n  .style(\"fill\", p => p.region === d.region ?\n  teamColor.darker(.75) : teamColor.brighter(.5))\n```\nd3.hsl, d3.lab, d3.cubehelix, d3.hcl可以呈现不同的颜色空间\nD3支持颜色插值\n``` javascript\nvar ybRamp = d3.scaleLinear()\n  .interpolate(d3.interpolateHsl)\n  .domain([0,maxValue]).range([\"yellow\", \"blue\"]);\n```\n离散颜色比例尺：d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c\n序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回灰色值。\n``` javascript\nvar tenColorScale = d3.scaleOrdinal()\n  .domain([\"UEFA\", \"CONMEBOL\"])\n  .range(d3.schemeCategory10)\n  .unknown(\"#c4b9ac\")\n```\n## 预生成内容\n### 图片\n使用insert()替代append()，是告诉D3在文本元素前面嵌入图片，使得标签文字在新添加的图片后被绘制。\n``` javascript\nd3.selectAll(\"g.overallG\").insert(\"image\", \"text\")\n  .attr(\"xlink:href\", d => `images/${d.team}.png`)\n  .attr(\"width\", \"45px\").attr(\"height\", \"20px\")\n  .attr(\"x\", -22).attr(\"y\", -10)\n```\n### SVG\n```javascript\nd3.html(\"resources/icon_1907.svg\", loadSVG);\nfunction loadSVG(svgData) {\n  d3.selectAll(\"g\").each(function() {\n    var gParent = this;\n    d3.select(svgData).selectAll(\"path\").each(function() {\n      gParent.appendChild(this.cloneNode(true))\n    });\n  });\n};\nd3.selectAll(\"path\").style(\"fill\", \"#93C464\")\n  .style(\"stroke\", \"black\").style(\"stroke-width\", \"1px\");\n```\n效果图\n![Football icons](http://pic.caigoubao.cc/604149/blog/visualization/footballs.png)\n\n### 参考资料\n- [D3 js in action](https://www.manning.com/books/d3-js-in-action)","slug":"《D3-js-in-Action-Data-visualization-with-JavaScript-2nd-》部分章节摘要","published":1,"updated":"2018-09-19T11:00:35.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0n000s2v2p6eyy6g8u","content":"<h2 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h2><p>为满足Web可访问的，复杂的数据可视化需求而生。<br>假如你公司使用了BI工具，但是他们不能满足团队需求用来显示数据的类型模式。<br>那么你就需要量身定制地构建一个客户化的看板来精确展示具体领域客户的行为。<br>这个数据看板需要快速、可交互、能在组织内分享。那么可以使用D3来做这个事情。<br>D3.js的创始人Mike Bostock，用他的话说：提供极度灵活，Web标准化的能力，例如CSS3,HTML5,SVG. 最新迭代版本D3.v4</p>\n<h2 id=\"D3怎样工作\"><a href=\"#D3怎样工作\" class=\"headerlink\" title=\"D3怎样工作\"></a>D3怎样工作</h2><p>怎样使用D3来处理和呈现数据，也是增加交互性，优化数据可视化。<br>理解D3选择器、数据绑定、D3怎样与DOM中的SVG和HTML交互。</p>\n<h3 id=\"数据可视化不仅仅是图表\"><a href=\"#数据可视化不仅仅是图表\" class=\"headerlink\" title=\"数据可视化不仅仅是图表\"></a>数据可视化不仅仅是图表</h3><p>你或许认为数据可视化仅限于饼图、线图、以及其他各类图表。远远不止如此。D3.js核心能力之一是为传统图表创建矢量图形，创建地理空间和网络可视化，以及丰富的动画和交互性。数据可视化这种广泛的方法中，地图或者网络图谱或表格是数据的一种表现形式，也是D3.js库提供的核心能力。<br>学习D3是因为它提供能力实现几乎每个主要的数据可视化技术，也提供能力创建你自己的数据可视化技术。</p>\n<h3 id=\"D3数据选择和绑定\"><a href=\"#D3数据选择和绑定\" class=\"headerlink\" title=\"D3数据选择和绑定\"></a>D3数据选择和绑定</h3><p>selection是数据和元素的组合。我们对group中的元素执行一个行为，例如移动或者改变颜色。同样也可以更新数据中的值。尽管我们以页面元素和数据分离的方式工作，D3真正强大来自于使用选择器来合并数据和web页面元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<p>使用d3.select()选择单个元素；使用d3.selectAll()选中多个元素<br>选择器是一个或多个页面元素的组合能够与数据集相关联，例如下面的代码是绑定数组[1,5,11,3]元素到样式名为market的div：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div.market\"</span>).data([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure></p>\n<p>D3遍历选择器中的元素，使用绑定数据执行相同的行为，导致不同的图形化效果。行为相同，效果不同。<br>决定一个元素的行为和呈现分别是：样式、属性attributes、特性properties。样式决定不透明度、颜色、尺寸、边框等。属性包含ID、类名、交互行为。特性涉及状态，例如单选框的选中。D3有三个函数来定义这些值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someDiv\"</span>).style(<span class=\"string\">\"border\"</span>, <span class=\"string\">\"5px darkgray dashed\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"#someDiv\"</span>).attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"newID\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>DOM决定了元素在屏幕上的绘制顺序，孩子元素在父元素的里面及之后绘制。尽管传统HTML中可以使用z-index来控制，但是在SVG2规范实现之前，设置z-index对SVG元素来说不管用。</p>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>HTML5一个主要的特性就是集成支持SVG。SVG允许图像简单的数字呈现如缩放，这并应用到动画和交互中。D3提供一个抽象层绘制SVG。SVG绘制复杂形状的指令如路径，从画布的一个点开始向另一个点画线。如果想绘制曲线，将绘制曲线的坐标设置为path的d属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.v4.min.js\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"infovizDiv\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:500px;height:500px;border:1px lightgray solid;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M 10,60 40,30 50,50 60,30 70,80\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"fill:black;stroke:gray;stroke-width:4px;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:gray;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">points</span>=<span class=\"string\">\"80,400 120,400 160,440 120,480 60,460\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"450\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"225\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"stroke:black;stroke-width:2px;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"30\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"410\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"fill:pink;stroke:black;stroke-width:1px;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>svg提供一系列的通用形状集合：<code>&lt;CIRCLE&gt;</code>, <code>&lt;RECT&gt;</code>, <code>&lt;LINE&gt;</code>, <code>&lt;POLYGON&gt;</code>，每个形状都有元素决定它的尺寸和位置。<code>&lt;RECT&gt;</code>有x和y属性决定形状左上角的位置。<code>&lt;CIRCLE&gt;</code>的x和y属性决定圆心的位置，r属性决定圆半径。<code>&lt;LINE&gt;</code>x1和y1作为起点坐标，x2和y2决定中的坐标位置。<br>任何形状的颜色、外轮廓、不透明度能被改变来适应形状的样式，fill决定形状区域的颜色，stroke,stroke-width,stroke-dasharray决定其外轮廓。<br>能像下面这样改变矩形的样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">fill</span><span class=\"selector-pseudo\">:purple</span>;<span class=\"selector-tag\">stroke-width</span><span class=\"selector-pseudo\">:5px</span>;<span class=\"selector-tag\">stroke</span><span class=\"selector-pseudo\">:cornflowerblue</span>;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;TEXT&gt;</code>,SVG提供写文本的能力。如果想要实现基本的格式化，可以在<code>&lt;TEXT&gt;</code>中嵌套<code>&lt;TSPAN&gt;</code>。<br><code>&lt;G&gt;</code>或者组元素，区别于之前的SVG元素，它没有图形化呈现的能力，不存在一个边界空间。可以使用它来表示一个逻辑分组。当创建一个图形对象，有几个形状的图形和文本组成，就可以将它们放在<code>&lt;G&gt;</code>标签内。在画板内移动<code>&lt;G&gt;</code>元素，可以通过transform属性，它接受一个结构化的描述就是translate()，传一对坐标x和y，表示其向右和向下移动的像素数。transform属性还接受scale()，用来改变图形渲染的比例。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/Path%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B7%AE%E5%BC%82.png\" alt=\"路径的属性设置\"></p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>.css文件能被引入到HTML页当中，或者直接嵌入HTML当中，或者同js控制。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(#someElement).style(opacity, .5);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"tentative\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>.classed()</code>，不必重写存在的样式，而是从样式列表中添加或者移除命名的样式。</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>方法链，也叫链式调用。这和我们平时聊天有点像。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">.data(someColors)</span><br><span class=\"line\">.enter()</span><br><span class=\"line\">.append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">.style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">.attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">.html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据标准\"><a href=\"#数据标准\" class=\"headerlink\" title=\"数据标准\"></a>数据标准</h2><p>因为不同目的数据被格式化为不同的形式，但是它倾向存在于我们认识的类型：表格数据，嵌套数据，网络数据，地理数据，裸数据，对象。</p>\n<h2 id=\"第一个D3-APP\"><a href=\"#第一个D3-APP\" class=\"headerlink\" title=\"第一个D3 APP\"></a>第一个D3 APP</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://d3js.org/d3.v4.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vizcontainer\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:500px;height:500px;border:1px lightgray solid;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"circle\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cx\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cy\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"red\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"text\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"a\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.text(<span class=\"string\">\"HELLO WORLD\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"circle\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cx\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cy\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"lightblue\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"text\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"b\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.text(<span class=\"string\">\"Uh, hi.\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"#a\"</span>).transition().delay(<span class=\"number\">1000</span>).style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"#b\"</span>).transition().delay(<span class=\"number\">3000</span>).style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">.75</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.selectAll(<span class=\"string\">\"circle\"</span>).transition().duration(<span class=\"number\">2000</span>).attr(<span class=\"string\">\"cy\"</span>, <span class=\"number\">200</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用数据\"><a href=\"#使用数据\" class=\"headerlink\" title=\"使用数据\"></a>使用数据</h2><p><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"数据处理流程\"></p>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><p>不管什么样的数据源，都可能被格式化成XML，CSV，或者JSON这样的格式。D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123; <span class=\"built_in\">console</span>.log(error, data) &#125;);</span><br><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; <span class=\"built_in\">console</span>.log(data));</span><br></pre></td></tr></table></figure></p>\n<p>error变量是可选项</p>\n<h3 id=\"数据格式化\"><a href=\"#数据格式化\" class=\"headerlink\" title=\"数据格式化\"></a>数据格式化</h3><p>在我们加载数据集以后，我们需要定义方法以致于数据的属性同颜色、尺寸和位置的设定相关。比如想展示导入的CSV文件格式的城市数据，假如使用圆来表示，根据人口数量来设置圆的大小，根据几何坐标设置位置。在做数据可视化的时候，我们需要理解数据形式，通常可以分为数量的，类别的，几何的，临时的，拓扑的或者未加工的。</p>\n<h3 id=\"进一步更改数据\"><a href=\"#进一步更改数据\" class=\"headerlink\" title=\"进一步更改数据\"></a>进一步更改数据</h3><p>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。使用d3.scale()函数来归一化数据。Scales（比例尺）有一个定义域domain和一个值域range。例如，从cities.csv里面取出人口数字的最小值和最大值，通过线性比例尺我们能将它们的不同很容易地展示到500px的画布上。下图所示，将 500,000到13,000,000相同的线性变化映射到0到500.<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png\" alt=\"线性比例尺示意\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure></p>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(),d3.scaleOrdinal(), 以及其他不太通用但对数据集来说更加适合的比例尺来映射数据。<br>将定量数据分类，将值按范围分或者组装到一起，是挺有用的。一种分类方法是将数组均分几份。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png\" alt=\"定量数据分类\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure></p>\n<p>嵌套背后的观点是数据的共享属性能被用来排序成离散的类别和子类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tweetData = data.tweets;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nestedTweets = d3.nest()</span><br><span class=\"line\">.key(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.user)</span><br><span class=\"line\">.entries(tweetData);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.nest()合并推特账户到新的对象下的数组，这些新对象由唯一的用户属性值标记。<br>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean.</p>\n<h3 id=\"测量数据\"><a href=\"#测量数据\" class=\"headerlink\" title=\"测量数据\"></a>测量数据</h3><p>在加载你的数据以后，首页的事情之一是你应该将它测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助你理解数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testArray = [<span class=\"number\">88</span>,<span class=\"number\">10000</span>,<span class=\"number\">1</span>,<span class=\"number\">75</span>,<span class=\"number\">12</span>,<span class=\"number\">35</span>];</span><br><span class=\"line\">d3.min(testArray, el =&gt; el); <span class=\"comment\">// return 1</span></span><br><span class=\"line\">d3.max(testArray, el =&gt; el); <span class=\"comment\">// 返回10000</span></span><br><span class=\"line\">d3.mean(testArray, el =&gt; el); <span class=\"comment\">// 返回平均值1701.83</span></span><br></pre></td></tr></table></figure></p>\n<p>加入想从cities.csv获取人口的最小，最大，平均值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">    d3.min(data, el =&gt; +el.population);</span><br><span class=\"line\">    d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">    d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); // 返回[500000, 1300000]</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<h2 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h2><p>接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。<br>第一个例子使用cities.csv中的数据。</p>\n<h3 id=\"选择器及绑定\"><a href=\"#选择器及绑定\" class=\"headerlink\" title=\"选择器及绑定\"></a>选择器及绑定</h3><p>使用D3选择器来改变web页的结构和呈现。一个选择器是由DOM中一个或多个元素构成。你能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dataViz(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">        .data(incomingData) <span class=\"comment\">// 绑定数据到选择器</span></span><br><span class=\"line\">        .enter() <span class=\"comment\">// 定义当选择中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">        .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择器中创建一个元素</span></span><br><span class=\"line\">        .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">        .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>d3.selectAll()传入对应于DOM一部分的CSS id选择器。经常传入id没有匹配到任何元素，那么称其为空选择器，使用.enter()函数在页面上创建新元素。需要指明一个选择器如何创建或更改一个具体DOM元素的孩子元素。注意子选项不会自动生成父节点。父亲必须已经存在，或者需要使用.append()创建一个。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市通选中器中的一个DOM元素想联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<p>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>当存在的数据值比较少，.enter()函数会触发<br>当两者数量一样，则都不会触发<br>当你知道将不会有更少的数据元素，则不必为.exit()定义处理行为。<br>.append()函数允许你添加更多元素，定义添加哪个元素。通过.insert()你能控制新元素添加的地方。<br>.attr()函数是用来改变样式和属性<br>.html()函数可以设置DOM元素的内容</p>\n<h3 id=\"使用内联函数访问数据\"><a href=\"#使用内联函数访问数据\" class=\"headerlink\" title=\"使用内联函数访问数据\"></a>使用内联函数访问数据</h3><p>在选择器中使用一个内联匿名函数，自动提供两个变量的访问，这对数据呈现很关键。一个是数据值本身，一个是该数据在数组中的位置。<br>直方图是分类表达数据数值最简单最有效的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">    .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">    .data([<span class=\"number\">15</span>, <span class=\"number\">50</span>, <span class=\"number\">22</span>, <span class=\"number\">8</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"height\"</span>, d =&gt; d)</span><br><span class=\"line\">    .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">10</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">100</span> - d);</span><br></pre></td></tr></table></figure></p>\n<p>多线性比例尺是在domain和range带有多个点的线性比例尺。比如我们对1到100范围内的值特别感兴趣，对100到1000内的值有时候感兴趣。偶尔会得到相当大的异常值。我们能这样表示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale =</span><br><span class=\"line\">    d3.scaleLinear().domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">1000</span>,<span class=\"number\">24500</span>]).range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">75</span>,<span class=\"number\">100</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>例如，有一些调查返回的数据，我们认为大于500就表示成功。我们仅仅想显示0到500内的数据，同时用比例尺强调0到100的变化。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>]).range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>]);</span><br><span class=\"line\">yScale(<span class=\"number\">1000</span>); <span class=\"comment\">// 返回162.5</span></span><br></pre></td></tr></table></figure></p>\n<p>通常D3比例尺会推断最小值到最大值之外的值。如果想设置小于最小值的取最小值，大于最大值的取最大值。<br>可以使用.clamp()函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale = d3.scaleLinear()</span><br><span class=\"line\">    .domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>])</span><br><span class=\"line\">    .range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>])</span><br><span class=\"line\">    .clamp(<span class=\"literal\">true</span>);</span><br><span class=\"line\">yScale(<span class=\"number\">1000</span>); <span class=\"comment\">// 返回100</span></span><br></pre></td></tr></table></figure></p>\n<p>scale函数使决定位置、尺寸、数据可视化元素颜色的关键。</p>\n<h2 id=\"数据呈现\"><a href=\"#数据呈现\" class=\"headerlink\" title=\"数据呈现\"></a>数据呈现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>,(error, data) =&gt; &#123; dataViz(data) &#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPopulation = d3.max(incomingData, d =&gt; <span class=\"built_in\">parseInt</span>(d.population)) <span class=\"comment\">// 人口数最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>, maxPopulation]).range([<span class=\"number\">0</span>,<span class=\"number\">460</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>).attr(<span class=\"string\">\"style\"</span>, <span class=\"string\">\"height: 480px; width: 600px;\"</span>);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .data(incomingData)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, d =&gt; yScale(<span class=\"built_in\">parseInt</span>(d.population)))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">60</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(<span class=\"built_in\">parseInt</span>(d.population)))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>,(error, data) =&gt; &#123; dataViz(data.tweets) &#125;); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nestedTweets = d3.nest()</span><br><span class=\"line\">        .key(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.user)</span><br><span class=\"line\">        .entries(incomingData);</span><br><span class=\"line\">    nestedTweets.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.numTweets = d.values.length; <span class=\"comment\">// 创建一个新属性</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxTweets = d3.max(nestedTweets, d =&gt; d.numTweets);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>,maxTweets]).range([<span class=\"number\">0</span>,<span class=\"number\">500</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .data(nestedTweets)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, d =&gt; yScale(d.numTweets))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">60</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">500</span> - yScale(d.numTweets))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%8E%A8%E7%89%B9%E7%94%A8%E6%88%B7%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" alt=\"推特用户直方图\"></p>\n<h3 id=\"设置通道channel\"><a href=\"#设置通道channel\" class=\"headerlink\" title=\"设置通道channel\"></a>设置通道channel</h3><p>多变量是另一种表示具有多个数据特征的数据点的方式。channel是一个图形如何直观表达数据的技术术语，它取决于你正在使用的数据，不同的通道适用于来表达不同的数据可视化。<br>下面通过时间和影响因子两个维度来呈现数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    incomingData.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.impact = d.favorites.length + d.retweets.length;</span><br><span class=\"line\">        d.tweetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.timestamp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxImpact = d3.max(incomingData, d =&gt; d.impact);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startEnd = d3.extent(incomingData, d =&gt; d.tweetTime);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeRamp = d3.scaleTime().domain(startEnd).range([<span class=\"number\">20</span>, <span class=\"number\">480</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"number\">0</span>, <span class=\"number\">460</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radiusScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"number\">1</span>, <span class=\"number\">20</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colorScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"string\">\"white\"</span>, <span class=\"string\">\"#75739F\"</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(incomingData)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"r\"</span>, d =&gt; radiusScale(d.impact))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cx\"</span>, d =&gt; timeRamp(d.tweetTime))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cy\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, d =&gt; colorScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Enter-update-mergem-exit\"><a href=\"#Enter-update-mergem-exit\" class=\"headerlink\" title=\"Enter, update, mergem, exit\"></a>Enter, update, mergem, exit</h3><p>.enter()已经用到很多次了。现在让我们近距离看看它， 以及与它配对的.exit()。它们只有在绑定数据个数和选择器中DOM元素个数不匹配时才会触发。使用selection.enter() 定义怎样基于绑定数据创建新元素，使用selection.exit()定义元素相关的数据被删除时，如何移除选择器中的元素。更新绑定数据时，会基于数据重新创建图形元素。<br>大多数情况，使用.enter()事件，就会使用.append()来添加元素。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"进入退出更新示意图\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g\"</span>).data([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]).exit().remove();</span><br></pre></td></tr></table></figure></p>\n<p>这个代码会删除四个<g>元素。选择器前四个元素绑定了新数据，其余的属于.exit()函数。大多数情况下，不会遇到这样的绑定数组完全不同情况，一般通过用户交互或者其他行为触发数据过滤界面呈现变化后会看到初始化数据的重新绑定。<br>d3.merge()允许合并两个选择器，以致于可以同时操作它们。<br>通常.data()绑定基于数据值在数组中的位置。如果不想依赖位置，而是依赖你绑定的键值，使用有意义的键值，例如数据对象本身的值。所有对象都被当做[object object]对待，所有可以使用JSON.stringify函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    incomingData.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.impact = d.favorites.length + d.retweets.length;</span><br><span class=\"line\">        d.tweetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.timestamp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxImpact = d3.max(incomingData, d =&gt; d.impact)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startEnd = d3.extent(incomingData, d =&gt; d.tweetTime)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeRamp = d3.scaleTime().domain(startEnd).range([ <span class=\"number\">50</span>, <span class=\"number\">450</span> ]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([ <span class=\"number\">0</span>, maxImpact ]).range([ <span class=\"number\">0</span>, <span class=\"number\">460</span> ]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radiusScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([ <span class=\"number\">0</span>, maxImpact ])</span><br><span class=\"line\">        .range([ <span class=\"number\">1</span>, <span class=\"number\">20</span> ]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>).selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(incomingData, <span class=\"built_in\">JSON</span>.stringify)</span><br><span class=\"line\">        .enter().append(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"r\"</span>, d =&gt; radiusScale(d.impact))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cx\"</span>, d =&gt; timeRamp(d.tweetTime))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cy\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#75739F \"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filteredData = incomingData.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.impact &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    d3.selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(filteredData, d =&gt; <span class=\"built_in\">JSON</span>.stringify(d))</span><br><span class=\"line\">        .exit()</span><br><span class=\"line\">        .remove();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上代码，会将影响因子不大于<span class=\"number\">0</span>的元素移除。</span><br><span class=\"line\">如果使用转化为字符串的对象，改变数据的话将不起作用，因为它不再与原始绑定的字符串相关。如果计划做重要的改变和更新，数据对象需要一个唯一ID作为绑定键值。</span><br></pre></td></tr></table></figure></g></p>\n<h2 id=\"文档驱动设计及交互\"><a href=\"#文档驱动设计及交互\" class=\"headerlink\" title=\"文档驱动设计及交互\"></a>文档驱动设计及交互</h2><p>D3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).raise()</span><br><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).lower()</span><br></pre></td></tr></table></figure></p>\n<p>禁用元素的鼠标事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamG.select(<span class=\"string\">\"text\"</span>).style(<span class=\"string\">\"pointer-events\"</span>,<span class=\"string\">\"none\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用颜色\"><a href=\"#使用颜色\" class=\"headerlink\" title=\"使用颜色\"></a>使用颜色</h3><p>d3.rbg()的使用如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"#ff0000\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"rgb(255,0,0)\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).select(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"fill\"</span>, p =&gt; p.region === d.region ?</span><br><span class=\"line\">  teamColor.darker(<span class=\"number\">.75</span>) : teamColor.brighter(<span class=\"number\">.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>d3.hsl, d3.lab, d3.cubehelix, d3.hcl可以呈现不同的颜色空间<br>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>,maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c<br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回灰色值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"预生成内容\"><a href=\"#预生成内容\" class=\"headerlink\" title=\"预生成内容\"></a>预生成内容</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>使用insert()替代append()，是告诉D3在文本元素前面嵌入图片，使得标签文字在新添加的图片后被绘制。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).insert(<span class=\"string\">\"image\"</span>, <span class=\"string\">\"text\"</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"xlink:href\"</span>, d =&gt; <span class=\"string\">`images/<span class=\"subst\">$&#123;d.team&#125;</span>.png`</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"width\"</span>, <span class=\"string\">\"45px\"</span>).attr(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"20px\"</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"x\"</span>, <span class=\"number\">-22</span>).attr(<span class=\"string\">\"y\"</span>, <span class=\"number\">-10</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"SVG-1\"><a href=\"#SVG-1\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.html(<span class=\"string\">\"resources/icon_1907.svg\"</span>, loadSVG);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadSVG</span>(<span class=\"params\">svgData</span>) </span>&#123;</span><br><span class=\"line\">  d3.selectAll(<span class=\"string\">\"g\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gParent = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    d3.select(svgData).selectAll(<span class=\"string\">\"path\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      gParent.appendChild(<span class=\"keyword\">this</span>.cloneNode(<span class=\"literal\">true</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">d3.selectAll(<span class=\"string\">\"path\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#93C464\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>).style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/footballs.png\" alt=\"Football icons\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是D3\"><a href=\"#什么是D3\" class=\"headerlink\" title=\"什么是D3\"></a>什么是D3</h2><p>为满足Web可访问的，复杂的数据可视化需求而生。<br>假如你公司使用了BI工具，但是他们不能满足团队需求用来显示数据的类型模式。<br>那么你就需要量身定制地构建一个客户化的看板来精确展示具体领域客户的行为。<br>这个数据看板需要快速、可交互、能在组织内分享。那么可以使用D3来做这个事情。<br>D3.js的创始人Mike Bostock，用他的话说：提供极度灵活，Web标准化的能力，例如CSS3,HTML5,SVG. 最新迭代版本D3.v4</p>\n<h2 id=\"D3怎样工作\"><a href=\"#D3怎样工作\" class=\"headerlink\" title=\"D3怎样工作\"></a>D3怎样工作</h2><p>怎样使用D3来处理和呈现数据，也是增加交互性，优化数据可视化。<br>理解D3选择器、数据绑定、D3怎样与DOM中的SVG和HTML交互。</p>\n<h3 id=\"数据可视化不仅仅是图表\"><a href=\"#数据可视化不仅仅是图表\" class=\"headerlink\" title=\"数据可视化不仅仅是图表\"></a>数据可视化不仅仅是图表</h3><p>你或许认为数据可视化仅限于饼图、线图、以及其他各类图表。远远不止如此。D3.js核心能力之一是为传统图表创建矢量图形，创建地理空间和网络可视化，以及丰富的动画和交互性。数据可视化这种广泛的方法中，地图或者网络图谱或表格是数据的一种表现形式，也是D3.js库提供的核心能力。<br>学习D3是因为它提供能力实现几乎每个主要的数据可视化技术，也提供能力创建你自己的数据可视化技术。</p>\n<h3 id=\"D3数据选择和绑定\"><a href=\"#D3数据选择和绑定\" class=\"headerlink\" title=\"D3数据选择和绑定\"></a>D3数据选择和绑定</h3><p>selection是数据和元素的组合。我们对group中的元素执行一个行为，例如移动或者改变颜色。同样也可以更新数据中的值。尽管我们以页面元素和数据分离的方式工作，D3真正强大来自于使用选择器来合并数据和web页面元素。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"circle.a\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"red\"</span>).attr(<span class=\"string\">\"cx\"</span>, <span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure></p>\n<p>使用d3.select()选择单个元素；使用d3.selectAll()选中多个元素<br>选择器是一个或多个页面元素的组合能够与数据集相关联，例如下面的代码是绑定数组[1,5,11,3]元素到样式名为market的div：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div.market\"</span>).data([<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">11</span>,<span class=\"number\">3</span>])</span><br></pre></td></tr></table></figure></p>\n<p>D3遍历选择器中的元素，使用绑定数据执行相同的行为，导致不同的图形化效果。行为相同，效果不同。<br>决定一个元素的行为和呈现分别是：样式、属性attributes、特性properties。样式决定不透明度、颜色、尺寸、边框等。属性包含ID、类名、交互行为。特性涉及状态，例如单选框的选中。D3有三个函数来定义这些值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"#someDiv\"</span>).style(<span class=\"string\">\"border\"</span>, <span class=\"string\">\"5px darkgray dashed\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"#someDiv\"</span>).attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"newID\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"#someCheckbox\"</span>).property(<span class=\"string\">\"checked\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>DOM决定了元素在屏幕上的绘制顺序，孩子元素在父元素的里面及之后绘制。尽管传统HTML中可以使用z-index来控制，但是在SVG2规范实现之前，设置z-index对SVG元素来说不管用。</p>\n<h3 id=\"SVG\"><a href=\"#SVG\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><p>HTML5一个主要的特性就是集成支持SVG。SVG允许图像简单的数字呈现如缩放，这并应用到动画和交互中。D3提供一个抽象层绘制SVG。SVG绘制复杂形状的指令如路径，从画布的一个点开始向另一个点画线。如果想绘制曲线，将绘制曲线的坐标设置为path的d属性。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"d3.v4.min.js\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"infovizDiv\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:500px;height:500px;border:1px lightgray solid;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M 10,60 40,30 50,50 60,30 70,80\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"fill:black;stroke:gray;stroke-width:4px;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">polygon</span> <span class=\"attr\">style</span>=<span class=\"string\">\"fill:gray;\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">points</span>=<span class=\"string\">\"80,400 120,400 160,440 120,480 60,460\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">line</span> <span class=\"attr\">x1</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">y1</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">x2</span>=<span class=\"string\">\"450\"</span> <span class=\"attr\">y2</span>=<span class=\"string\">\"225\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"stroke:black;stroke-width:2px;\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">circle</span> <span class=\"attr\">cy</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">cx</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">r</span>=<span class=\"string\">\"30\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rect</span> <span class=\"attr\">x</span>=<span class=\"string\">\"410\"</span> <span class=\"attr\">y</span>=<span class=\"string\">\"200\"</span> <span class=\"attr\">width</span>=<span class=\"string\">\"100\"</span> <span class=\"attr\">height</span>=<span class=\"string\">\"50\"</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"attr\">style</span>=<span class=\"string\">\"fill:pink;stroke:black;stroke-width:1px;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">g</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">svg</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>svg提供一系列的通用形状集合：<code>&lt;CIRCLE&gt;</code>, <code>&lt;RECT&gt;</code>, <code>&lt;LINE&gt;</code>, <code>&lt;POLYGON&gt;</code>，每个形状都有元素决定它的尺寸和位置。<code>&lt;RECT&gt;</code>有x和y属性决定形状左上角的位置。<code>&lt;CIRCLE&gt;</code>的x和y属性决定圆心的位置，r属性决定圆半径。<code>&lt;LINE&gt;</code>x1和y1作为起点坐标，x2和y2决定中的坐标位置。<br>任何形状的颜色、外轮廓、不透明度能被改变来适应形状的样式，fill决定形状区域的颜色，stroke,stroke-width,stroke-dasharray决定其外轮廓。<br>能像下面这样改变矩形的样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">fill</span><span class=\"selector-pseudo\">:purple</span>;<span class=\"selector-tag\">stroke-width</span><span class=\"selector-pseudo\">:5px</span>;<span class=\"selector-tag\">stroke</span><span class=\"selector-pseudo\">:cornflowerblue</span>;</span><br></pre></td></tr></table></figure></p>\n<p><code>&lt;TEXT&gt;</code>,SVG提供写文本的能力。如果想要实现基本的格式化，可以在<code>&lt;TEXT&gt;</code>中嵌套<code>&lt;TSPAN&gt;</code>。<br><code>&lt;G&gt;</code>或者组元素，区别于之前的SVG元素，它没有图形化呈现的能力，不存在一个边界空间。可以使用它来表示一个逻辑分组。当创建一个图形对象，有几个形状的图形和文本组成，就可以将它们放在<code>&lt;G&gt;</code>标签内。在画板内移动<code>&lt;G&gt;</code>元素，可以通过transform属性，它接受一个结构化的描述就是translate()，传一对坐标x和y，表示其向右和向下移动的像素数。transform属性还接受scale()，用来改变图形渲染的比例。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/Path%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%E5%B7%AE%E5%BC%82.png\" alt=\"路径的属性设置\"></p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>.css文件能被引入到HTML页当中，或者直接嵌入HTML当中，或者同js控制。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(#someElement).style(opacity, .5);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"tentative\"</span>);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"circle\"</span>).classed(<span class=\"string\">\"active\"</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>通过<code>.classed()</code>，不必重写存在的样式，而是从样式列表中添加或者移除命名的样式。</p>\n<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>方法链，也叫链式调用。这和我们平时聊天有点像。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"div\"</span>).data(someData).enter().append(<span class=\"string\">\"div\"</span>).html(<span class=\"string\">\"Wow\"</span>).append(<span class=\"string\">\"span\"</span>).html(<span class=\"string\">\"Even More Wow\"</span>).style(<span class=\"string\">\"font-weight\"</span>, <span class=\"string\">\"900\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>可以给.style(), .attr(), .property(), .html()设置匿名函数调用或者其他提供数据绑定的选择器的函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> someColors = [<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"string\">\"chartreuse\"</span>, <span class=\"string\">\"orange\"</span>];</span><br><span class=\"line\">someColors = someColors.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d.length &lt; <span class=\"number\">5</span>&#125;);</span><br><span class=\"line\">d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">.data(someColors)</span><br><span class=\"line\">.enter()</span><br><span class=\"line\">.append(<span class=\"string\">\"div\"</span>)</span><br><span class=\"line\">.style(<span class=\"string\">\"background\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br><span class=\"line\">.attr(<span class=\"string\">\"cx\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d,i</span>) </span>&#123;<span class=\"keyword\">return</span> i&#125;)</span><br><span class=\"line\">.html(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">d</span>) </span>&#123;<span class=\"keyword\">return</span> d&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据标准\"><a href=\"#数据标准\" class=\"headerlink\" title=\"数据标准\"></a>数据标准</h2><p>因为不同目的数据被格式化为不同的形式，但是它倾向存在于我们认识的类型：表格数据，嵌套数据，网络数据，地理数据，裸数据，对象。</p>\n<h2 id=\"第一个D3-APP\"><a href=\"#第一个D3-APP\" class=\"headerlink\" title=\"第一个D3 APP\"></a>第一个D3 APP</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://d3js.org/d3.v4.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"vizcontainer\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">svg</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width:500px;height:500px;border:1px lightgray solid;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"circle\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cx\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cy\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"red\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"text\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"a\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">20</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.text(<span class=\"string\">\"HELLO WORLD\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"circle\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"r\"</span>, <span class=\"number\">100</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cx\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"cy\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"fill\"</span>,<span class=\"string\">\"lightblue\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"svg\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.append(<span class=\"string\">\"text\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"id\"</span>, <span class=\"string\">\"b\"</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"x\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.attr(<span class=\"string\">\"y\"</span>,<span class=\"number\">400</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">0</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">.text(<span class=\"string\">\"Uh, hi.\"</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"#a\"</span>).transition().delay(<span class=\"number\">1000</span>).style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.select(<span class=\"string\">\"#b\"</span>).transition().delay(<span class=\"number\">3000</span>).style(<span class=\"string\">\"opacity\"</span>, <span class=\"number\">.75</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">d3.selectAll(<span class=\"string\">\"circle\"</span>).transition().duration(<span class=\"number\">2000</span>).attr(<span class=\"string\">\"cy\"</span>, <span class=\"number\">200</span>);</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用数据\"><a href=\"#使用数据\" class=\"headerlink\" title=\"使用数据\"></a>使用数据</h2><p><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png\" alt=\"数据处理流程\"></p>\n<h3 id=\"加载数据\"><a href=\"#加载数据\" class=\"headerlink\" title=\"加载数据\"></a>加载数据</h3><p>不管什么样的数据源，都可能被格式化成XML，CSV，或者JSON这样的格式。D3提供几个方法来导入和处理数据。一样的是，d3.csv()和d3.json()生成一个JSON对象数组，而d3.xml()会创建一个XML文档。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123; <span class=\"built_in\">console</span>.log(error, data) &#125;);</span><br><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; <span class=\"built_in\">console</span>.log(data));</span><br></pre></td></tr></table></figure></p>\n<p>error变量是可选项</p>\n<h3 id=\"数据格式化\"><a href=\"#数据格式化\" class=\"headerlink\" title=\"数据格式化\"></a>数据格式化</h3><p>在我们加载数据集以后，我们需要定义方法以致于数据的属性同颜色、尺寸和位置的设定相关。比如想展示导入的CSV文件格式的城市数据，假如使用圆来表示，根据人口数量来设置圆的大小，根据几何坐标设置位置。在做数据可视化的时候，我们需要理解数据形式，通常可以分为数量的，类别的，几何的，临时的，拓扑的或者未加工的。</p>\n<h3 id=\"进一步更改数据\"><a href=\"#进一步更改数据\" class=\"headerlink\" title=\"进一步更改数据\"></a>进一步更改数据</h3><p>数字数据仅仅同图形化元素在屏幕上的尺寸和位置相关。使用d3.scale()函数来归一化数据。Scales（比例尺）有一个定义域domain和一个值域range。例如，从cities.csv里面取出人口数字的最小值和最大值，通过线性比例尺我们能将它们的不同很容易地展示到500px的画布上。下图所示，将 500,000到13,000,000相同的线性变化映射到0到500.<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E7%BA%BF%E6%80%A7%E6%AF%94%E4%BE%8B%E5%B0%BA%E7%A4%BA%E6%84%8F.png\" alt=\"线性比例尺示意\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"number\">0</span>, <span class=\"number\">500</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回20，可以将一千万人口的国家放在20px处</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回340</span></span><br><span class=\"line\">newRamp.invert(<span class=\"number\">313</span>); <span class=\"comment\">// 求逆，返回8325000</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newRamp = d3.scaleLinear().domain([<span class=\"number\">500000</span>,<span class=\"number\">13000000</span>]).range([<span class=\"string\">\"blue\"</span>, <span class=\"string\">\"red\"</span>]);</span><br><span class=\"line\">newRamp(<span class=\"number\">1000000</span>); <span class=\"comment\">// 返回\"#0a00f5\"，可以将一百万人口的城市用深紫色表示</span></span><br><span class=\"line\">newRamp(<span class=\"number\">9000000</span>); <span class=\"comment\">// 返回\"#ad0052\"</span></span><br><span class=\"line\">newRamp.invert(<span class=\"string\">\"#ad0052\"</span>); <span class=\"comment\">// 因为invert函数只接受数字，因此返回NaN</span></span><br></pre></td></tr></table></figure></p>\n<p>我们也能使用d3.scaleLog(), d3.scalePow(),d3.scaleOrdinal(), 以及其他不太通用但对数据集来说更加适合的比例尺来映射数据。<br>将定量数据分类，将值按范围分或者组装到一起，是挺有用的。一种分类方法是将数组均分几份。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E5%AE%9A%E9%87%8F%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png\" alt=\"定量数据分类\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> sampleArray = [<span class=\"number\">423</span>,<span class=\"number\">124</span>,<span class=\"number\">66</span>,<span class=\"number\">424</span>,<span class=\"number\">58</span>,<span class=\"number\">10</span>,<span class=\"number\">900</span>,<span class=\"number\">44</span>,<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> qScale = d3.scaleQuantile().domain(sampleArray).range([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>]);</span><br><span class=\"line\">qScale(<span class=\"number\">423</span>); <span class=\"comment\">// 返回2</span></span><br><span class=\"line\">qScale(<span class=\"number\">20</span>); <span class=\"comment\">// 返回0</span></span><br><span class=\"line\">qScale(<span class=\"number\">10000</span>); <span class=\"comment\">// 返回2</span></span><br></pre></td></tr></table></figure></p>\n<p>嵌套背后的观点是数据的共享属性能被用来排序成离散的类别和子类。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>, data =&gt; &#123;</span><br><span class=\"line\"><span class=\"keyword\">var</span> tweetData = data.tweets;</span><br><span class=\"line\"><span class=\"keyword\">var</span> nestedTweets = d3.nest()</span><br><span class=\"line\">.key(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.user)</span><br><span class=\"line\">.entries(tweetData);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.nest()合并推特账户到新的对象下的数组，这些新对象由唯一的用户属性值标记。<br>在数据格式化以后，需要测量它，以确保创建的图形尺寸合适，位置是基于数据集的参数。那你将会一直用到d3.extent，d3.min，d3.max，d3.mean.</p>\n<h3 id=\"测量数据\"><a href=\"#测量数据\" class=\"headerlink\" title=\"测量数据\"></a>测量数据</h3><p>在加载你的数据以后，首页的事情之一是你应该将它测量和排序。很重要的是知道特殊属性值的分布，以及最大最小值和属性名称。D3提供一个数组的函数集合能帮助你理解数据。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> testArray = [<span class=\"number\">88</span>,<span class=\"number\">10000</span>,<span class=\"number\">1</span>,<span class=\"number\">75</span>,<span class=\"number\">12</span>,<span class=\"number\">35</span>];</span><br><span class=\"line\">d3.min(testArray, el =&gt; el); <span class=\"comment\">// return 1</span></span><br><span class=\"line\">d3.max(testArray, el =&gt; el); <span class=\"comment\">// 返回10000</span></span><br><span class=\"line\">d3.mean(testArray, el =&gt; el); <span class=\"comment\">// 返回平均值1701.83</span></span><br></pre></td></tr></table></figure></p>\n<p>加入想从cities.csv获取人口的最小，最大，平均值：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, data =&gt; &#123;</span><br><span class=\"line\">    d3.min(data, el =&gt; +el.population);</span><br><span class=\"line\">    d3.max(data, el =&gt; +el.population);</span><br><span class=\"line\">    d3.mean(data, el =&gt; +el.population);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>d3.extent方便地将d3.min()和d3.max()在一个数组中返回：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.extent(data, el =&gt; +el.population); // 返回[500000, 1300000]</span><br></pre></td></tr></table></figure></p>\n<p>现在，我们已经加载、格式化、测量了我们的数据，那我们就可以创建数据可视化了。</p>\n<h2 id=\"数据可视化\"><a href=\"#数据可视化\" class=\"headerlink\" title=\"数据可视化\"></a>数据可视化</h2><p>接下来将更深入解释选择器是如何与数据绑定一起创建元素的，以及创建后如何改变这些元素。<br>第一个例子使用cities.csv中的数据。</p>\n<h3 id=\"选择器及绑定\"><a href=\"#选择器及绑定\" class=\"headerlink\" title=\"选择器及绑定\"></a>选择器及绑定</h3><p>使用D3选择器来改变web页的结构和呈现。一个选择器是由DOM中一个或多个元素构成。你能使用选择器创建和删除元素，更改样式和内容。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>, (error,data) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.error(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        dataViz(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"body\"</span>).selectAll(<span class=\"string\">\"div.cities\"</span>)</span><br><span class=\"line\">        .data(incomingData) <span class=\"comment\">// 绑定数据到选择器</span></span><br><span class=\"line\">        .enter() <span class=\"comment\">// 定义当选择中的数据多于DOM元素时如何响应</span></span><br><span class=\"line\">        .append(<span class=\"string\">\"div\"</span>) <span class=\"comment\">// 在当前选择器中创建一个元素</span></span><br><span class=\"line\">        .attr(<span class=\"string\">\"class\"</span>, <span class=\"string\">\"cities\"</span>) <span class=\"comment\">// 设置新创建元素class</span></span><br><span class=\"line\">        .html(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.label); <span class=\"comment\">// 设置创建div的内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>d3.selectAll()传入对应于DOM一部分的CSS id选择器。经常传入id没有匹配到任何元素，那么称其为空选择器，使用.enter()函数在页面上创建新元素。需要指明一个选择器如何创建或更改一个具体DOM元素的孩子元素。注意子选项不会自动生成父节点。父亲必须已经存在，或者需要使用.append()创建一个。<br>这里需要将选中的DOM元素同一个数组联系起来。数据集里的每一个城市通选中器中的一个DOM元素想联系，关联数据是存在元素的data属性中。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">\"cities\"</span>)[<span class=\"number\">0</span>].__data__ <span class=\"comment\">// 返回一个指向对象的指针</span></span><br></pre></td></tr></table></figure></p>\n<p>当数据值的数量大于选择器中元素的数量，.enter()函数触发，允许你为每一个没有相应DOM元素的值定义一个执行行为。<br>当存在的数据值比较少，.enter()函数会触发<br>当两者数量一样，则都不会触发<br>当你知道将不会有更少的数据元素，则不必为.exit()定义处理行为。<br>.append()函数允许你添加更多元素，定义添加哪个元素。通过.insert()你能控制新元素添加的地方。<br>.attr()函数是用来改变样式和属性<br>.html()函数可以设置DOM元素的内容</p>\n<h3 id=\"使用内联函数访问数据\"><a href=\"#使用内联函数访问数据\" class=\"headerlink\" title=\"使用内联函数访问数据\"></a>使用内联函数访问数据</h3><p>在选择器中使用一个内联匿名函数，自动提供两个变量的访问，这对数据呈现很关键。一个是数据值本身，一个是该数据在数组中的位置。<br>直方图是分类表达数据数值最简单最有效的方法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">    .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">    .data([<span class=\"number\">15</span>, <span class=\"number\">50</span>, <span class=\"number\">22</span>, <span class=\"number\">8</span>, <span class=\"number\">100</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">    .enter()</span><br><span class=\"line\">    .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"height\"</span>, d =&gt; d)</span><br><span class=\"line\">    .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">    .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">10</span>)</span><br><span class=\"line\">    .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">100</span> - d);</span><br></pre></td></tr></table></figure></p>\n<p>多线性比例尺是在domain和range带有多个点的线性比例尺。比如我们对1到100范围内的值特别感兴趣，对100到1000内的值有时候感兴趣。偶尔会得到相当大的异常值。我们能这样表示：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale =</span><br><span class=\"line\">    d3.scaleLinear().domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">1000</span>,<span class=\"number\">24500</span>]).range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">75</span>,<span class=\"number\">100</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>例如，有一些调查返回的数据，我们认为大于500就表示成功。我们仅仅想显示0到500内的数据，同时用比例尺强调0到100的变化。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>]).range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>]);</span><br><span class=\"line\">yScale(<span class=\"number\">1000</span>); <span class=\"comment\">// 返回162.5</span></span><br></pre></td></tr></table></figure></p>\n<p>通常D3比例尺会推断最小值到最大值之外的值。如果想设置小于最小值的取最小值，大于最大值的取最大值。<br>可以使用.clamp()函数：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> yScale = d3.scaleLinear()</span><br><span class=\"line\">    .domain([<span class=\"number\">0</span>,<span class=\"number\">100</span>,<span class=\"number\">500</span>])</span><br><span class=\"line\">    .range([<span class=\"number\">0</span>,<span class=\"number\">50</span>,<span class=\"number\">100</span>])</span><br><span class=\"line\">    .clamp(<span class=\"literal\">true</span>);</span><br><span class=\"line\">yScale(<span class=\"number\">1000</span>); <span class=\"comment\">// 返回100</span></span><br></pre></td></tr></table></figure></p>\n<p>scale函数使决定位置、尺寸、数据可视化元素颜色的关键。</p>\n<h2 id=\"数据呈现\"><a href=\"#数据呈现\" class=\"headerlink\" title=\"数据呈现\"></a>数据呈现</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.csv(<span class=\"string\">\"cities.csv\"</span>,(error, data) =&gt; &#123; dataViz(data) &#125;);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxPopulation = d3.max(incomingData, d =&gt; <span class=\"built_in\">parseInt</span>(d.population)) <span class=\"comment\">// 人口数最大值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>, maxPopulation]).range([<span class=\"number\">0</span>,<span class=\"number\">460</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>).attr(<span class=\"string\">\"style\"</span>, <span class=\"string\">\"height: 480px; width: 600px;\"</span>);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .data(incomingData)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, d =&gt; yScale(<span class=\"built_in\">parseInt</span>(d.population)))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">60</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(<span class=\"built_in\">parseInt</span>(d.population)))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.json(<span class=\"string\">\"tweets.json\"</span>,(error, data) =&gt; &#123; dataViz(data.tweets) &#125;); </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nestedTweets = d3.nest()</span><br><span class=\"line\">        .key(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.user)</span><br><span class=\"line\">        .entries(incomingData);</span><br><span class=\"line\">    nestedTweets.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.numTweets = d.values.length; <span class=\"comment\">// 创建一个新属性</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxTweets = d3.max(nestedTweets, d =&gt; d.numTweets);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>,maxTweets]).range([<span class=\"number\">0</span>,<span class=\"number\">500</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .data(nestedTweets)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"rect\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"width\"</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"height\"</span>, d =&gt; yScale(d.numTweets))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"x\"</span>, (d,i) =&gt; i * <span class=\"number\">60</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"y\"</span>, d =&gt; <span class=\"number\">500</span> - yScale(d.numTweets))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#FE9922\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"#9A8B7A\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E6%8E%A8%E7%89%B9%E7%94%A8%E6%88%B7%E7%9B%B4%E6%96%B9%E5%9B%BE.png\" alt=\"推特用户直方图\"></p>\n<h3 id=\"设置通道channel\"><a href=\"#设置通道channel\" class=\"headerlink\" title=\"设置通道channel\"></a>设置通道channel</h3><p>多变量是另一种表示具有多个数据特征的数据点的方式。channel是一个图形如何直观表达数据的技术术语，它取决于你正在使用的数据，不同的通道适用于来表达不同的数据可视化。<br>下面通过时间和影响因子两个维度来呈现数据：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    incomingData.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.impact = d.favorites.length + d.retweets.length;</span><br><span class=\"line\">        d.tweetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.timestamp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxImpact = d3.max(incomingData, d =&gt; d.impact);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startEnd = d3.extent(incomingData, d =&gt; d.tweetTime);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeRamp = d3.scaleTime().domain(startEnd).range([<span class=\"number\">20</span>, <span class=\"number\">480</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"number\">0</span>, <span class=\"number\">460</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radiusScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"number\">1</span>, <span class=\"number\">20</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> colorScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([<span class=\"number\">0</span>, maxImpact]).range([<span class=\"string\">\"white\"</span>, <span class=\"string\">\"#75739F\"</span>]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>)</span><br><span class=\"line\">        .selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(incomingData)</span><br><span class=\"line\">        .enter()</span><br><span class=\"line\">        .append(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"r\"</span>, d =&gt; radiusScale(d.impact))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cx\"</span>, d =&gt; timeRamp(d.tweetTime))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cy\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, d =&gt; colorScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">    &#125;;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Enter-update-mergem-exit\"><a href=\"#Enter-update-mergem-exit\" class=\"headerlink\" title=\"Enter, update, mergem, exit\"></a>Enter, update, mergem, exit</h3><p>.enter()已经用到很多次了。现在让我们近距离看看它， 以及与它配对的.exit()。它们只有在绑定数据个数和选择器中DOM元素个数不匹配时才会触发。使用selection.enter() 定义怎样基于绑定数据创建新元素，使用selection.exit()定义元素相关的数据被删除时，如何移除选择器中的元素。更新绑定数据时，会基于数据重新创建图形元素。<br>大多数情况，使用.enter()事件，就会使用.append()来添加元素。<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/%E8%BF%9B%E5%85%A5%E9%80%80%E5%87%BA%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"进入退出更新示意图\"><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g\"</span>).data([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]).exit().remove();</span><br></pre></td></tr></table></figure></p>\n<p>这个代码会删除四个<g>元素。选择器前四个元素绑定了新数据，其余的属于.exit()函数。大多数情况下，不会遇到这样的绑定数组完全不同情况，一般通过用户交互或者其他行为触发数据过滤界面呈现变化后会看到初始化数据的重新绑定。<br>d3.merge()允许合并两个选择器，以致于可以同时操作它们。<br>通常.data()绑定基于数据值在数组中的位置。如果不想依赖位置，而是依赖你绑定的键值，使用有意义的键值，例如数据对象本身的值。所有对象都被当做[object object]对待，所有可以使用JSON.stringify函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dataViz</span>(<span class=\"params\">incomingData</span>) </span>&#123;</span><br><span class=\"line\">    incomingData.forEach(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">        d.impact = d.favorites.length + d.retweets.length;</span><br><span class=\"line\">        d.tweetTime = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(d.timestamp);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> maxImpact = d3.max(incomingData, d =&gt; d.impact)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> startEnd = d3.extent(incomingData, d =&gt; d.tweetTime)</span><br><span class=\"line\">    <span class=\"keyword\">var</span> timeRamp = d3.scaleTime().domain(startEnd).range([ <span class=\"number\">50</span>, <span class=\"number\">450</span> ]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> yScale = d3.scaleLinear().domain([ <span class=\"number\">0</span>, maxImpact ]).range([ <span class=\"number\">0</span>, <span class=\"number\">460</span> ]);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> radiusScale = d3.scaleLinear()</span><br><span class=\"line\">        .domain([ <span class=\"number\">0</span>, maxImpact ])</span><br><span class=\"line\">        .range([ <span class=\"number\">1</span>, <span class=\"number\">20</span> ]);</span><br><span class=\"line\">    d3.select(<span class=\"string\">\"svg\"</span>).selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(incomingData, <span class=\"built_in\">JSON</span>.stringify)</span><br><span class=\"line\">        .enter().append(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .attr(<span class=\"string\">\"r\"</span>, d =&gt; radiusScale(d.impact))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cx\"</span>, d =&gt; timeRamp(d.tweetTime))</span><br><span class=\"line\">        .attr(<span class=\"string\">\"cy\"</span>, d =&gt; <span class=\"number\">480</span> - yScale(d.impact))</span><br><span class=\"line\">        .style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#75739F \"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>)</span><br><span class=\"line\">        .style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> filteredData = incomingData.filter(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> d.impact &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    d3.selectAll(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">        .data(filteredData, d =&gt; <span class=\"built_in\">JSON</span>.stringify(d))</span><br><span class=\"line\">        .exit()</span><br><span class=\"line\">        .remove();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">以上代码，会将影响因子不大于<span class=\"number\">0</span>的元素移除。</span><br><span class=\"line\">如果使用转化为字符串的对象，改变数据的话将不起作用，因为它不再与原始绑定的字符串相关。如果计划做重要的改变和更新，数据对象需要一个唯一ID作为绑定键值。</span><br></pre></td></tr></table></figure></g></p>\n<h2 id=\"文档驱动设计及交互\"><a href=\"#文档驱动设计及交互\" class=\"headerlink\" title=\"文档驱动设计及交互\"></a>文档驱动设计及交互</h2><p>D3v4 有几个方法帮助DOM上下移动：selection.raise 和 selection.lower. 使用这些方法来移动选择的元素到DOM兄弟节点的末尾或者移动到开头位置。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).raise()</span><br><span class=\"line\">d3.select(<span class=\"string\">\"g.overallG\"</span>).lower()</span><br></pre></td></tr></table></figure></p>\n<p>禁用元素的鼠标事件：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamG.select(<span class=\"string\">\"text\"</span>).style(<span class=\"string\">\"pointer-events\"</span>,<span class=\"string\">\"none\"</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用颜色\"><a href=\"#使用颜色\" class=\"headerlink\" title=\"使用颜色\"></a>使用颜色</h3><p>d3.rbg()的使用如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"red\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"#ff0000\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"string\">\"rgb(255,0,0)\"</span>);</span><br><span class=\"line\">teamColor = d3.rgb(<span class=\"number\">255</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这些颜色对象有两个有用的方法：.darker() 和 .brighter()，返回比初始值更亮或更暗的值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).select(<span class=\"string\">\"circle\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"fill\"</span>, p =&gt; p.region === d.region ?</span><br><span class=\"line\">  teamColor.darker(<span class=\"number\">.75</span>) : teamColor.brighter(<span class=\"number\">.5</span>))</span><br></pre></td></tr></table></figure></p>\n<p>d3.hsl, d3.lab, d3.cubehelix, d3.hcl可以呈现不同的颜色空间<br>D3支持颜色插值<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ybRamp = d3.scaleLinear()</span><br><span class=\"line\">  .interpolate(d3.interpolateHsl)</span><br><span class=\"line\">  .domain([<span class=\"number\">0</span>,maxValue]).range([<span class=\"string\">\"yellow\"</span>, <span class=\"string\">\"blue\"</span>]);</span><br></pre></td></tr></table></figure></p>\n<p>离散颜色比例尺：d3.schemeCategory10, d3.schemeCategory20, d3.schemeCategory20b, and d3.schemeCategory20c<br>序数比例尺，映射离散值为特殊的颜色。一个有用的特征是它的unknown方法，当传入一个不存在的值的时候，返回灰色值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tenColorScale = d3.scaleOrdinal()</span><br><span class=\"line\">  .domain([<span class=\"string\">\"UEFA\"</span>, <span class=\"string\">\"CONMEBOL\"</span>])</span><br><span class=\"line\">  .range(d3.schemeCategory10)</span><br><span class=\"line\">  .unknown(<span class=\"string\">\"#c4b9ac\"</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"预生成内容\"><a href=\"#预生成内容\" class=\"headerlink\" title=\"预生成内容\"></a>预生成内容</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p>使用insert()替代append()，是告诉D3在文本元素前面嵌入图片，使得标签文字在新添加的图片后被绘制。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.selectAll(<span class=\"string\">\"g.overallG\"</span>).insert(<span class=\"string\">\"image\"</span>, <span class=\"string\">\"text\"</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"xlink:href\"</span>, d =&gt; <span class=\"string\">`images/<span class=\"subst\">$&#123;d.team&#125;</span>.png`</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"width\"</span>, <span class=\"string\">\"45px\"</span>).attr(<span class=\"string\">\"height\"</span>, <span class=\"string\">\"20px\"</span>)</span><br><span class=\"line\">  .attr(<span class=\"string\">\"x\"</span>, <span class=\"number\">-22</span>).attr(<span class=\"string\">\"y\"</span>, <span class=\"number\">-10</span>)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"SVG-1\"><a href=\"#SVG-1\" class=\"headerlink\" title=\"SVG\"></a>SVG</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d3.html(<span class=\"string\">\"resources/icon_1907.svg\"</span>, loadSVG);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadSVG</span>(<span class=\"params\">svgData</span>) </span>&#123;</span><br><span class=\"line\">  d3.selectAll(<span class=\"string\">\"g\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gParent = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    d3.select(svgData).selectAll(<span class=\"string\">\"path\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      gParent.appendChild(<span class=\"keyword\">this</span>.cloneNode(<span class=\"literal\">true</span>))</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">d3.selectAll(<span class=\"string\">\"path\"</span>).style(<span class=\"string\">\"fill\"</span>, <span class=\"string\">\"#93C464\"</span>)</span><br><span class=\"line\">  .style(<span class=\"string\">\"stroke\"</span>, <span class=\"string\">\"black\"</span>).style(<span class=\"string\">\"stroke-width\"</span>, <span class=\"string\">\"1px\"</span>);</span><br></pre></td></tr></table></figure>\n<p>效果图<br><img src=\"http://pic.caigoubao.cc/604149/blog/visualization/footballs.png\" alt=\"Football icons\"></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://www.manning.com/books/d3-js-in-action\" target=\"_blank\" rel=\"noopener\">D3 js in action</a></li>\n</ul>\n"},{"title":"基于VUE+VUEX+ELEMENT-UI的项目结构","author":"Peng Fang","date":"2017-07-31T09:54:00.000Z","_content":"分析了石头哥的VUE模板工程（[基于VUE+VUEX+ELEMENT-UI](https://github.com/TCL-MIG-FE/vue-web-spa-startkit)）的项目结构，如下：\n\n```\nmock-server // 模拟数据\n|   api.json // 配置请求响应的数据\n|   server.js // mock数据响应\nnode_modules // 组件安装存放目录\nsrc // 源文件目录\n|---actions // 分模块定义接口调用\n|   |   articles.js\n|   |   index.js\n|   |   root.js\n|---components // 组件\n|   |   Select.vue\n|   |   Table.vue\n|---constants // 定义一些常量\n|   |   actions.js\n|   |   api.js\n|---containers // 页面\n|   |   Article.vue\n|---layouts // 布局\n    |---css\n        |---core\n        |   |   base.less\n        |   |   common.less\n        |   |   font.less\n        |   |   index.less\n        |   |   normalize.less\n        |   |   reset.less\n        |---mixins\n        |   |   compatibility.less\n        |   |   iconfont.less\n        |   |   index.less\n        |   |   opacity.less\n        |   |   size.less\n        |---themes\n        |   |   default.less\n        index.less\n    |---fonts\n        |---antd\n        |   |   iconfont.eot\n        |   |   iconfont.svg // ...\n    |---img\n|---mutations // 更改state\n|   |   article.js\n|   |   index.js\n|   |   root.js\n|---plugins\n|   |   element.js // 注册需要的element组件\n|---store\n|   |   index.js // 创建Vuex的Store实例\n|---utils\n|   |   api.js // 暴露一些请求Api以及createAction方法\n|   |   misc.js // 公用方法\n|   App.vue // 主页\n|   index_dev.html // 开发环境的首页\n|   index_prod.html // 生产环境的首页\n|   root.js // 入口文件，创建Vue实例\n|   router.js // 创建VueRouter实例\n.babelrc babel配置文件\n.editorconfig IDE编辑器配置文件\npackage-lock.json npm更改操作自动生成\npackage.json 项目相关的各种元数据(依赖的模块)\nproxy.js 配置代理\nwebpack.config.js 根据是否是生产环境设置webpack的配置文件\nwebpack.dev.config.js 开发环境配置文件\nwebpack.prod.config 生产环境配置文件\n```","source":"_posts/基于VUE-VUEX-ELEMENT-UI的项目结构.md","raw":"title: 基于VUE+VUEX+ELEMENT-UI的项目结构\nauthor: Peng Fang\ntags:\n  - vue\ncategories:\n  - vue\ndate: 2017-07-31 17:54:00\n---\n分析了石头哥的VUE模板工程（[基于VUE+VUEX+ELEMENT-UI](https://github.com/TCL-MIG-FE/vue-web-spa-startkit)）的项目结构，如下：\n\n```\nmock-server // 模拟数据\n|   api.json // 配置请求响应的数据\n|   server.js // mock数据响应\nnode_modules // 组件安装存放目录\nsrc // 源文件目录\n|---actions // 分模块定义接口调用\n|   |   articles.js\n|   |   index.js\n|   |   root.js\n|---components // 组件\n|   |   Select.vue\n|   |   Table.vue\n|---constants // 定义一些常量\n|   |   actions.js\n|   |   api.js\n|---containers // 页面\n|   |   Article.vue\n|---layouts // 布局\n    |---css\n        |---core\n        |   |   base.less\n        |   |   common.less\n        |   |   font.less\n        |   |   index.less\n        |   |   normalize.less\n        |   |   reset.less\n        |---mixins\n        |   |   compatibility.less\n        |   |   iconfont.less\n        |   |   index.less\n        |   |   opacity.less\n        |   |   size.less\n        |---themes\n        |   |   default.less\n        index.less\n    |---fonts\n        |---antd\n        |   |   iconfont.eot\n        |   |   iconfont.svg // ...\n    |---img\n|---mutations // 更改state\n|   |   article.js\n|   |   index.js\n|   |   root.js\n|---plugins\n|   |   element.js // 注册需要的element组件\n|---store\n|   |   index.js // 创建Vuex的Store实例\n|---utils\n|   |   api.js // 暴露一些请求Api以及createAction方法\n|   |   misc.js // 公用方法\n|   App.vue // 主页\n|   index_dev.html // 开发环境的首页\n|   index_prod.html // 生产环境的首页\n|   root.js // 入口文件，创建Vue实例\n|   router.js // 创建VueRouter实例\n.babelrc babel配置文件\n.editorconfig IDE编辑器配置文件\npackage-lock.json npm更改操作自动生成\npackage.json 项目相关的各种元数据(依赖的模块)\nproxy.js 配置代理\nwebpack.config.js 根据是否是生产环境设置webpack的配置文件\nwebpack.dev.config.js 开发环境配置文件\nwebpack.prod.config 生产环境配置文件\n```","slug":"基于VUE-VUEX-ELEMENT-UI的项目结构","published":1,"updated":"2018-09-19T09:55:17.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0o000u2v2pf5x04o7n","content":"<p>分析了石头哥的VUE模板工程（<a href=\"https://github.com/TCL-MIG-FE/vue-web-spa-startkit\" target=\"_blank\" rel=\"noopener\">基于VUE+VUEX+ELEMENT-UI</a>）的项目结构，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mock-server // 模拟数据</span><br><span class=\"line\">|   api.json // 配置请求响应的数据</span><br><span class=\"line\">|   server.js // mock数据响应</span><br><span class=\"line\">node_modules // 组件安装存放目录</span><br><span class=\"line\">src // 源文件目录</span><br><span class=\"line\">|---actions // 分模块定义接口调用</span><br><span class=\"line\">|   |   articles.js</span><br><span class=\"line\">|   |   index.js</span><br><span class=\"line\">|   |   root.js</span><br><span class=\"line\">|---components // 组件</span><br><span class=\"line\">|   |   Select.vue</span><br><span class=\"line\">|   |   Table.vue</span><br><span class=\"line\">|---constants // 定义一些常量</span><br><span class=\"line\">|   |   actions.js</span><br><span class=\"line\">|   |   api.js</span><br><span class=\"line\">|---containers // 页面</span><br><span class=\"line\">|   |   Article.vue</span><br><span class=\"line\">|---layouts // 布局</span><br><span class=\"line\">    |---css</span><br><span class=\"line\">        |---core</span><br><span class=\"line\">        |   |   base.less</span><br><span class=\"line\">        |   |   common.less</span><br><span class=\"line\">        |   |   font.less</span><br><span class=\"line\">        |   |   index.less</span><br><span class=\"line\">        |   |   normalize.less</span><br><span class=\"line\">        |   |   reset.less</span><br><span class=\"line\">        |---mixins</span><br><span class=\"line\">        |   |   compatibility.less</span><br><span class=\"line\">        |   |   iconfont.less</span><br><span class=\"line\">        |   |   index.less</span><br><span class=\"line\">        |   |   opacity.less</span><br><span class=\"line\">        |   |   size.less</span><br><span class=\"line\">        |---themes</span><br><span class=\"line\">        |   |   default.less</span><br><span class=\"line\">        index.less</span><br><span class=\"line\">    |---fonts</span><br><span class=\"line\">        |---antd</span><br><span class=\"line\">        |   |   iconfont.eot</span><br><span class=\"line\">        |   |   iconfont.svg // ...</span><br><span class=\"line\">    |---img</span><br><span class=\"line\">|---mutations // 更改state</span><br><span class=\"line\">|   |   article.js</span><br><span class=\"line\">|   |   index.js</span><br><span class=\"line\">|   |   root.js</span><br><span class=\"line\">|---plugins</span><br><span class=\"line\">|   |   element.js // 注册需要的element组件</span><br><span class=\"line\">|---store</span><br><span class=\"line\">|   |   index.js // 创建Vuex的Store实例</span><br><span class=\"line\">|---utils</span><br><span class=\"line\">|   |   api.js // 暴露一些请求Api以及createAction方法</span><br><span class=\"line\">|   |   misc.js // 公用方法</span><br><span class=\"line\">|   App.vue // 主页</span><br><span class=\"line\">|   index_dev.html // 开发环境的首页</span><br><span class=\"line\">|   index_prod.html // 生产环境的首页</span><br><span class=\"line\">|   root.js // 入口文件，创建Vue实例</span><br><span class=\"line\">|   router.js // 创建VueRouter实例</span><br><span class=\"line\">.babelrc babel配置文件</span><br><span class=\"line\">.editorconfig IDE编辑器配置文件</span><br><span class=\"line\">package-lock.json npm更改操作自动生成</span><br><span class=\"line\">package.json 项目相关的各种元数据(依赖的模块)</span><br><span class=\"line\">proxy.js 配置代理</span><br><span class=\"line\">webpack.config.js 根据是否是生产环境设置webpack的配置文件</span><br><span class=\"line\">webpack.dev.config.js 开发环境配置文件</span><br><span class=\"line\">webpack.prod.config 生产环境配置文件</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>分析了石头哥的VUE模板工程（<a href=\"https://github.com/TCL-MIG-FE/vue-web-spa-startkit\" target=\"_blank\" rel=\"noopener\">基于VUE+VUEX+ELEMENT-UI</a>）的项目结构，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mock-server // 模拟数据</span><br><span class=\"line\">|   api.json // 配置请求响应的数据</span><br><span class=\"line\">|   server.js // mock数据响应</span><br><span class=\"line\">node_modules // 组件安装存放目录</span><br><span class=\"line\">src // 源文件目录</span><br><span class=\"line\">|---actions // 分模块定义接口调用</span><br><span class=\"line\">|   |   articles.js</span><br><span class=\"line\">|   |   index.js</span><br><span class=\"line\">|   |   root.js</span><br><span class=\"line\">|---components // 组件</span><br><span class=\"line\">|   |   Select.vue</span><br><span class=\"line\">|   |   Table.vue</span><br><span class=\"line\">|---constants // 定义一些常量</span><br><span class=\"line\">|   |   actions.js</span><br><span class=\"line\">|   |   api.js</span><br><span class=\"line\">|---containers // 页面</span><br><span class=\"line\">|   |   Article.vue</span><br><span class=\"line\">|---layouts // 布局</span><br><span class=\"line\">    |---css</span><br><span class=\"line\">        |---core</span><br><span class=\"line\">        |   |   base.less</span><br><span class=\"line\">        |   |   common.less</span><br><span class=\"line\">        |   |   font.less</span><br><span class=\"line\">        |   |   index.less</span><br><span class=\"line\">        |   |   normalize.less</span><br><span class=\"line\">        |   |   reset.less</span><br><span class=\"line\">        |---mixins</span><br><span class=\"line\">        |   |   compatibility.less</span><br><span class=\"line\">        |   |   iconfont.less</span><br><span class=\"line\">        |   |   index.less</span><br><span class=\"line\">        |   |   opacity.less</span><br><span class=\"line\">        |   |   size.less</span><br><span class=\"line\">        |---themes</span><br><span class=\"line\">        |   |   default.less</span><br><span class=\"line\">        index.less</span><br><span class=\"line\">    |---fonts</span><br><span class=\"line\">        |---antd</span><br><span class=\"line\">        |   |   iconfont.eot</span><br><span class=\"line\">        |   |   iconfont.svg // ...</span><br><span class=\"line\">    |---img</span><br><span class=\"line\">|---mutations // 更改state</span><br><span class=\"line\">|   |   article.js</span><br><span class=\"line\">|   |   index.js</span><br><span class=\"line\">|   |   root.js</span><br><span class=\"line\">|---plugins</span><br><span class=\"line\">|   |   element.js // 注册需要的element组件</span><br><span class=\"line\">|---store</span><br><span class=\"line\">|   |   index.js // 创建Vuex的Store实例</span><br><span class=\"line\">|---utils</span><br><span class=\"line\">|   |   api.js // 暴露一些请求Api以及createAction方法</span><br><span class=\"line\">|   |   misc.js // 公用方法</span><br><span class=\"line\">|   App.vue // 主页</span><br><span class=\"line\">|   index_dev.html // 开发环境的首页</span><br><span class=\"line\">|   index_prod.html // 生产环境的首页</span><br><span class=\"line\">|   root.js // 入口文件，创建Vue实例</span><br><span class=\"line\">|   router.js // 创建VueRouter实例</span><br><span class=\"line\">.babelrc babel配置文件</span><br><span class=\"line\">.editorconfig IDE编辑器配置文件</span><br><span class=\"line\">package-lock.json npm更改操作自动生成</span><br><span class=\"line\">package.json 项目相关的各种元数据(依赖的模块)</span><br><span class=\"line\">proxy.js 配置代理</span><br><span class=\"line\">webpack.config.js 根据是否是生产环境设置webpack的配置文件</span><br><span class=\"line\">webpack.dev.config.js 开发环境配置文件</span><br><span class=\"line\">webpack.prod.config 生产环境配置文件</span><br></pre></td></tr></table></figure>"},{"title":"怎样更有竞争力","author":"Peng Fang","date":"2018-09-18T12:34:00.000Z","_content":"- 做选择时选择难的，大家认为难的往往有竞争力  \n- 只有思考过总结出来记录下来的才是自己的  \n- 不在于愿望有多强烈，而在于每天达成一个个小目标  \n- 建立自己的个人品牌和影响力  \n- 凡事主动，主动思考，主动询问，主动了解  \n\n- 搞技术最难的不是怎么用它，而是为什么用它，它是怎么实现的，实现用到了哪些技术，基于什么样的原理  \n- 研究一门技术思考的是它的核心  \n\t- 大数据的核心是mr.hdfs\n\t- 后端的核心是框架源码和jvm\n\t- 前端的核心是框架源码，组件源码和编译原理，运行时环境\n\t- 机器学习核心是神经网络，矩阵理论，概率统计，优化\n\n- 系统性学习，建立知识框架\n- 写PPT的能力，做汇报的能力(写和讲)\n- 学习基础科学计划：\n操作系统、计算机网络、编译原理、算法与数据结构","source":"_posts/怎样更有竞争力.md","raw":"title: 怎样更有竞争力\nauthor: Peng Fang\ntags:\n  - 竞争力\ncategories:\n  - 感悟\ndate: 2018-09-18 20:34:00\n---\n- 做选择时选择难的，大家认为难的往往有竞争力  \n- 只有思考过总结出来记录下来的才是自己的  \n- 不在于愿望有多强烈，而在于每天达成一个个小目标  \n- 建立自己的个人品牌和影响力  \n- 凡事主动，主动思考，主动询问，主动了解  \n\n- 搞技术最难的不是怎么用它，而是为什么用它，它是怎么实现的，实现用到了哪些技术，基于什么样的原理  \n- 研究一门技术思考的是它的核心  \n\t- 大数据的核心是mr.hdfs\n\t- 后端的核心是框架源码和jvm\n\t- 前端的核心是框架源码，组件源码和编译原理，运行时环境\n\t- 机器学习核心是神经网络，矩阵理论，概率统计，优化\n\n- 系统性学习，建立知识框架\n- 写PPT的能力，做汇报的能力(写和讲)\n- 学习基础科学计划：\n操作系统、计算机网络、编译原理、算法与数据结构","slug":"怎样更有竞争力","published":1,"updated":"2018-09-19T12:40:16.469Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0r000z2v2pah8ep41b","content":"<ul>\n<li>做选择时选择难的，大家认为难的往往有竞争力  </li>\n<li>只有思考过总结出来记录下来的才是自己的  </li>\n<li>不在于愿望有多强烈，而在于每天达成一个个小目标  </li>\n<li>建立自己的个人品牌和影响力  </li>\n<li><p>凡事主动，主动思考，主动询问，主动了解  </p>\n</li>\n<li><p>搞技术最难的不是怎么用它，而是为什么用它，它是怎么实现的，实现用到了哪些技术，基于什么样的原理  </p>\n</li>\n<li><p>研究一门技术思考的是它的核心  </p>\n<ul>\n<li>大数据的核心是mr.hdfs</li>\n<li>后端的核心是框架源码和jvm</li>\n<li>前端的核心是框架源码，组件源码和编译原理，运行时环境</li>\n<li>机器学习核心是神经网络，矩阵理论，概率统计，优化</li>\n</ul>\n</li>\n<li><p>系统性学习，建立知识框架</p>\n</li>\n<li>写PPT的能力，做汇报的能力(写和讲)</li>\n<li>学习基础科学计划：<br>操作系统、计算机网络、编译原理、算法与数据结构</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>做选择时选择难的，大家认为难的往往有竞争力  </li>\n<li>只有思考过总结出来记录下来的才是自己的  </li>\n<li>不在于愿望有多强烈，而在于每天达成一个个小目标  </li>\n<li>建立自己的个人品牌和影响力  </li>\n<li><p>凡事主动，主动思考，主动询问，主动了解  </p>\n</li>\n<li><p>搞技术最难的不是怎么用它，而是为什么用它，它是怎么实现的，实现用到了哪些技术，基于什么样的原理  </p>\n</li>\n<li><p>研究一门技术思考的是它的核心  </p>\n<ul>\n<li>大数据的核心是mr.hdfs</li>\n<li>后端的核心是框架源码和jvm</li>\n<li>前端的核心是框架源码，组件源码和编译原理，运行时环境</li>\n<li>机器学习核心是神经网络，矩阵理论，概率统计，优化</li>\n</ul>\n</li>\n<li><p>系统性学习，建立知识框架</p>\n</li>\n<li>写PPT的能力，做汇报的能力(写和讲)</li>\n<li>学习基础科学计划：<br>操作系统、计算机网络、编译原理、算法与数据结构</li>\n</ul>\n"},{"title":"常见的Web安全漏洞介绍及解决办法","author":"Peng Fang","date":"2017-08-14T10:01:00.000Z","_content":"本文对常见的Web漏洞的原因、关注点、解决办法做简要介绍，整理自Web安全培训笔记。\n\n### SQL注入\n解决办法：参数化查询\n\n### 失效的身份认证和会话管理\n- 原因：Session相关的数据没有被完整替换导致的安全问题  \n- 关注点：Login通过后，立刻把当前Session（包含Session、Cache、Cookie）失效掉，把需要保持到Session的value重新开一个Session保存；Logout功能中，除了把当前Session失效掉外，还要把Session相关的Cache也remove掉。  \n- 登录: 登录验证通过后，要把Session.Abort()，再保存新值\n- 注销：Session要Abort，相关缓存要clear，额外的cookie也有被clear |  \n\n### XSS（跨站脚本）\n- 简介：XSS是指攻击者利用网站程序对用户输入过滤不足，输入可以显示子在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。\n- 关注点：HTML输入输出编码、JavaScript的编码、URL的编码\n- 解决办法：对用户输出的数据要过滤特殊字符，对输出到客户端的数据也要过滤特殊字符。HTML、js、URL过滤方法不同。js中使用escape函数来过滤特殊字符，包括元素value、元素Attribute，都有encode起来，相关函数有escape、encodeURI、encodeURIComponent。PHP中有htmlspecialchars 函数。下面是js中特殊字符编码的一种写法：\n```javascript\nfunction escapeHtml(text) {\n  var map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n\n  return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n```\n另外一种办法是增加cookie安全：启用httponly和secure\n>secure属性是防止信息在传递的过程中被监听捕获后信息泄漏。当设置为true时，表示创建的cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以不会被窃取到cookie的具体内容。  \n>HttpOnly属性不允许通过脚本访问cookie，只能用于传输，目的是防止程序获取cookie后进行攻击。\n\n### 敏感数据暴露\n- 原因：敏感信息需要加密保存（内存、数据库、客户端中）+加密传输（HTTPS）+不缓存（只是尽量，看情况）\n- 解决关注点：登录、付款这样的页面要用HTTPS保护传输。密码可采用单向加密，信用卡账号采用可逆的加密方式。\n- Base64算法：Base64只是一种编码方式，并不是一种加密算法，不要使用Base64来加密数据。\n- Hash算法：具有不可逆性是一种单向密码体制，只能加密不能解密，可以用来加密用户登录密码等凭证。有的开源项目采用md5加盐的方式加密如`md5(md5(pwd)+salt)`，但是不建议使用MD5等算法，MD5可用因子碰撞暴力破解，建议采用SHA-256算法。不要使用哈希函数作为对称加密算法的签名，字符串串接后再做哈希要注意（URL签名）。\n- 对称加密：加解密使用同一个密钥，计算耗时短，通常用来加密数据。推荐使用AES算法\n- 非对称加密：加解密使用不同的密钥，计算耗时长，通常利用来加密密钥。注意密钥长度不要低于512，建议2048位的密钥长度。\n>为了确保安全性，有时多种加密算法混合使用。如非对称->hash->对称\n\n### CSRF（跨站请求伪造）\n利用合法用户的身份，在合法用户的终端调用请求。  \n解决关注点：重要操作不用使用get方式，要使用post方式；为每个能进行post动作的form增加token，并且在服务端检查token的合法性，合法则进行操作。\n正确的防御方式：\n- 第一步，新建CSRF令牌添加进用户每次登陆以及存储在httpsession里，这种令牌至少对每个用户会话应是唯一的，或者是对每个请求是唯一的。\n- 第二步，令牌可以包含在URL中或作为一个URL参数记/隐藏字段。\n- 第三步，在服务器端检查提交令牌与用户会话对象令牌是否匹配。\n- 第四步，在注销和会话超时，删除用户对象会话和会话销毁。\n\n### 未验证的重定向和转发\n原因：当系统接受重定向参数，如`http://www.a.com/login.aspx?returnUrl=default.aspx`，只要修改只要修改这个url为`http://www.a.com/login.aspx?returnUrl=http://wwv.a.com/login.aspx`，这样会被重定向到假冒站点的login界面，用户再次输入密码，此时密码就被假冒站点保存起来了。\n解决关注点：对于returnUrl这种参数值进行判断，只要在白名单中的url才能redirect，尽量使用相对路径来redirect。\n\n### 会话安全\n- Session会话ID要足够长足够随机  \n- 认证用户后应开启一个全新的用户ID  \n- 限制会话闲置时间  \n- 限制会话生命周期  \n- 允许用户自行注销会话  \n- 会话结束后清除数据  \n\n### 安全基础\n应当在完全不信任用户输入和客户端提交的数据的前提下开发应用程序。\n\n### 输入验证\n- 集中式输入验证\n- 服务器端输入验证\n- 建议采用白名单放弃黑名单\n- 验证输入长度、格式、字符合法性等\n- 验证所有的输入\n- 防范元字符攻击\n\n### 防范元字符攻击\n- SQL注入\n- 跨站脚本\n- 路径操纵\n- 命令注入\n- 日志欺骗\n\n### 数据库连接安全\n- 使用参数化SQL语句\n- 数据库中的数据也是不可信的\n- 确保数据库资源能够被释放\n\n### 减少编码逻辑漏洞\n执行操作时需要权限判断\n\n### 文件安全 \n#### 严格控制文件上传  \n> - 文件类型验证（白名单验证） \n> - 存储路径安全（把握原则：可执行目录不可写，可写目录不可执行）  \n> - 防范rar压缩炸弹  \n> - 限制文件大小 \n\n#### 严格分配文件访问权限策略  \n#### 安全的临时文件  \n#### 访问竞争条件  \n\n### 开发调试\n#### 日志\n>- 集中日志记录\n>- 使用时间戳\n>- 记录每个重要行为\n>- 保护日志文件\n\n#### 调试\n>- 上线产品删除调试代码\n>- 产品中不包含后门代码\n>- 清除备份和调试文件\n#### 错误日志\n\n### 错误处理\n- 保证整个团队使用一个共同的异常处理方法\n- 禁用或限制详细错误处理信息（可以暴露错误状态码，而错误详细信息不应被暴露）\n- 多个错误同一时间内返回相似或同样的出错信息 \n- 各种应用层会返回错误或异常结果\n- 有必要创建一个默认的错误处理机\n- 可以用总是返回“200”错误代码来覆盖默认的错误输出\n\n### 不安全的加密存储\n- 不要自己创建加密算法。  \n- 应使用已经被证明的公开加密算法，例如AES，RAS公钥加密，和SHA-256或更好的HASH算法。   \n- 不要使用弱加密算法，比如MD5/SHA1。  \n- 建议使用更安全的加密算法，比如SHA-256或更其它的选择。  \n\n### 不安全的通讯\n- 对所有传输认证或传输数据的连接启用SSL\n- 确保web服务器和数据库之间的通讯安全恰当的加密\n\n### 限制敏感数据的生命周期\n#### 问题\n>- 使用对象来存储敏感数据，但使用后没清除或回收  \n>- 具有可以被操作系统按需交换到磁盘的内存页面  \n>- 在缓冲区中有敏感数据  \n>- 使用了一些反射机制来控制敏感数据  \n>- 通过调试信息、日志文件、环境变量等方式暴露敏感数据  \n\n### 不要在客户端存储未经加密的数据\n### 确保安全敏感方法被调用时参数经过验证\n### 不要使用不安全的弱加密算法\n\n### 身份鉴别\n#### 用户ID管理\n> 用户名是唯一的\n>- 注册判断重命等逻辑放在服务器端\n>- Insert之前判断用户名是否存在\n\n#### 密码管理\n> 密码长度不小于8个字符  \n> 密码至少包含大小写字母、数字及特殊符号。密码与账户名不同  \n> 存储过程中不能使用明文以及不安全的存储  \n> 在密码传输工程中不能使用明文，短信验证码设置有效期  \n> 输入密码时不显示密码  \n> 管理账户没弱口令，删除测试账户 \n\n#### 认证限制\n> 用户身份认证尝试超限锁定功能  \n> 如果用户名易被猜测，对同一ip多次认证失败锁定  \n> 认证期间不透露用户ID是否存在  \n> 关键系统双因子认证  \n> 认证需要采用有效挑战应答机制  \n\n### 注意的漏洞\n1. Struts2框架任意代码执行  \n2. Java反序列化化漏洞  \n3. 容错处理不当致信息泄露  \n4. mybatis(ibatis)框架存在的SQL注入，正确的写法：\n```sql\nselect * from user where username like concat('%',#username#,'%')\n```\n5. mybatis框架$存在的SQL注入  \n尽量使用#描述参数，如果一定要使用$，则需要自己过滤用户输入。因为使用$参数MyBatis不会修改或转义字符串。\n6. Hibernate存在的SQL注入  \n正确的写法：\n- 名称绑定\n```java\nString queryString = \"from Item item where item.description like :searchString and item.date > :minDate\";\nList result = session.createQuery(queryString).setString(\"searchString\", searchString).setDate(\"minDate\", minDate).list();\n```\n- 位置绑定\n```java\nString queryString = \"from Item item where item.description like ? and item.date > ?\";\nList result = session.createQuery(queryString).setString(0, searchString).setDate(1, minDate).list();\n```","source":"_posts/常见的Web安全漏洞介绍及解决办法.md","raw":"title: 常见的Web安全漏洞介绍及解决办法\nauthor: Peng Fang\ntags:\n  - Web安全\ncategories:\n  - Web安全\ndate: 2017-08-14 18:01:00\n---\n本文对常见的Web漏洞的原因、关注点、解决办法做简要介绍，整理自Web安全培训笔记。\n\n### SQL注入\n解决办法：参数化查询\n\n### 失效的身份认证和会话管理\n- 原因：Session相关的数据没有被完整替换导致的安全问题  \n- 关注点：Login通过后，立刻把当前Session（包含Session、Cache、Cookie）失效掉，把需要保持到Session的value重新开一个Session保存；Logout功能中，除了把当前Session失效掉外，还要把Session相关的Cache也remove掉。  \n- 登录: 登录验证通过后，要把Session.Abort()，再保存新值\n- 注销：Session要Abort，相关缓存要clear，额外的cookie也有被clear |  \n\n### XSS（跨站脚本）\n- 简介：XSS是指攻击者利用网站程序对用户输入过滤不足，输入可以显示子在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。\n- 关注点：HTML输入输出编码、JavaScript的编码、URL的编码\n- 解决办法：对用户输出的数据要过滤特殊字符，对输出到客户端的数据也要过滤特殊字符。HTML、js、URL过滤方法不同。js中使用escape函数来过滤特殊字符，包括元素value、元素Attribute，都有encode起来，相关函数有escape、encodeURI、encodeURIComponent。PHP中有htmlspecialchars 函数。下面是js中特殊字符编码的一种写法：\n```javascript\nfunction escapeHtml(text) {\n  var map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n\n  return text.replace(/[&<>\"']/g, function(m) { return map[m]; });\n}\n```\n另外一种办法是增加cookie安全：启用httponly和secure\n>secure属性是防止信息在传递的过程中被监听捕获后信息泄漏。当设置为true时，表示创建的cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以不会被窃取到cookie的具体内容。  \n>HttpOnly属性不允许通过脚本访问cookie，只能用于传输，目的是防止程序获取cookie后进行攻击。\n\n### 敏感数据暴露\n- 原因：敏感信息需要加密保存（内存、数据库、客户端中）+加密传输（HTTPS）+不缓存（只是尽量，看情况）\n- 解决关注点：登录、付款这样的页面要用HTTPS保护传输。密码可采用单向加密，信用卡账号采用可逆的加密方式。\n- Base64算法：Base64只是一种编码方式，并不是一种加密算法，不要使用Base64来加密数据。\n- Hash算法：具有不可逆性是一种单向密码体制，只能加密不能解密，可以用来加密用户登录密码等凭证。有的开源项目采用md5加盐的方式加密如`md5(md5(pwd)+salt)`，但是不建议使用MD5等算法，MD5可用因子碰撞暴力破解，建议采用SHA-256算法。不要使用哈希函数作为对称加密算法的签名，字符串串接后再做哈希要注意（URL签名）。\n- 对称加密：加解密使用同一个密钥，计算耗时短，通常用来加密数据。推荐使用AES算法\n- 非对称加密：加解密使用不同的密钥，计算耗时长，通常利用来加密密钥。注意密钥长度不要低于512，建议2048位的密钥长度。\n>为了确保安全性，有时多种加密算法混合使用。如非对称->hash->对称\n\n### CSRF（跨站请求伪造）\n利用合法用户的身份，在合法用户的终端调用请求。  \n解决关注点：重要操作不用使用get方式，要使用post方式；为每个能进行post动作的form增加token，并且在服务端检查token的合法性，合法则进行操作。\n正确的防御方式：\n- 第一步，新建CSRF令牌添加进用户每次登陆以及存储在httpsession里，这种令牌至少对每个用户会话应是唯一的，或者是对每个请求是唯一的。\n- 第二步，令牌可以包含在URL中或作为一个URL参数记/隐藏字段。\n- 第三步，在服务器端检查提交令牌与用户会话对象令牌是否匹配。\n- 第四步，在注销和会话超时，删除用户对象会话和会话销毁。\n\n### 未验证的重定向和转发\n原因：当系统接受重定向参数，如`http://www.a.com/login.aspx?returnUrl=default.aspx`，只要修改只要修改这个url为`http://www.a.com/login.aspx?returnUrl=http://wwv.a.com/login.aspx`，这样会被重定向到假冒站点的login界面，用户再次输入密码，此时密码就被假冒站点保存起来了。\n解决关注点：对于returnUrl这种参数值进行判断，只要在白名单中的url才能redirect，尽量使用相对路径来redirect。\n\n### 会话安全\n- Session会话ID要足够长足够随机  \n- 认证用户后应开启一个全新的用户ID  \n- 限制会话闲置时间  \n- 限制会话生命周期  \n- 允许用户自行注销会话  \n- 会话结束后清除数据  \n\n### 安全基础\n应当在完全不信任用户输入和客户端提交的数据的前提下开发应用程序。\n\n### 输入验证\n- 集中式输入验证\n- 服务器端输入验证\n- 建议采用白名单放弃黑名单\n- 验证输入长度、格式、字符合法性等\n- 验证所有的输入\n- 防范元字符攻击\n\n### 防范元字符攻击\n- SQL注入\n- 跨站脚本\n- 路径操纵\n- 命令注入\n- 日志欺骗\n\n### 数据库连接安全\n- 使用参数化SQL语句\n- 数据库中的数据也是不可信的\n- 确保数据库资源能够被释放\n\n### 减少编码逻辑漏洞\n执行操作时需要权限判断\n\n### 文件安全 \n#### 严格控制文件上传  \n> - 文件类型验证（白名单验证） \n> - 存储路径安全（把握原则：可执行目录不可写，可写目录不可执行）  \n> - 防范rar压缩炸弹  \n> - 限制文件大小 \n\n#### 严格分配文件访问权限策略  \n#### 安全的临时文件  \n#### 访问竞争条件  \n\n### 开发调试\n#### 日志\n>- 集中日志记录\n>- 使用时间戳\n>- 记录每个重要行为\n>- 保护日志文件\n\n#### 调试\n>- 上线产品删除调试代码\n>- 产品中不包含后门代码\n>- 清除备份和调试文件\n#### 错误日志\n\n### 错误处理\n- 保证整个团队使用一个共同的异常处理方法\n- 禁用或限制详细错误处理信息（可以暴露错误状态码，而错误详细信息不应被暴露）\n- 多个错误同一时间内返回相似或同样的出错信息 \n- 各种应用层会返回错误或异常结果\n- 有必要创建一个默认的错误处理机\n- 可以用总是返回“200”错误代码来覆盖默认的错误输出\n\n### 不安全的加密存储\n- 不要自己创建加密算法。  \n- 应使用已经被证明的公开加密算法，例如AES，RAS公钥加密，和SHA-256或更好的HASH算法。   \n- 不要使用弱加密算法，比如MD5/SHA1。  \n- 建议使用更安全的加密算法，比如SHA-256或更其它的选择。  \n\n### 不安全的通讯\n- 对所有传输认证或传输数据的连接启用SSL\n- 确保web服务器和数据库之间的通讯安全恰当的加密\n\n### 限制敏感数据的生命周期\n#### 问题\n>- 使用对象来存储敏感数据，但使用后没清除或回收  \n>- 具有可以被操作系统按需交换到磁盘的内存页面  \n>- 在缓冲区中有敏感数据  \n>- 使用了一些反射机制来控制敏感数据  \n>- 通过调试信息、日志文件、环境变量等方式暴露敏感数据  \n\n### 不要在客户端存储未经加密的数据\n### 确保安全敏感方法被调用时参数经过验证\n### 不要使用不安全的弱加密算法\n\n### 身份鉴别\n#### 用户ID管理\n> 用户名是唯一的\n>- 注册判断重命等逻辑放在服务器端\n>- Insert之前判断用户名是否存在\n\n#### 密码管理\n> 密码长度不小于8个字符  \n> 密码至少包含大小写字母、数字及特殊符号。密码与账户名不同  \n> 存储过程中不能使用明文以及不安全的存储  \n> 在密码传输工程中不能使用明文，短信验证码设置有效期  \n> 输入密码时不显示密码  \n> 管理账户没弱口令，删除测试账户 \n\n#### 认证限制\n> 用户身份认证尝试超限锁定功能  \n> 如果用户名易被猜测，对同一ip多次认证失败锁定  \n> 认证期间不透露用户ID是否存在  \n> 关键系统双因子认证  \n> 认证需要采用有效挑战应答机制  \n\n### 注意的漏洞\n1. Struts2框架任意代码执行  \n2. Java反序列化化漏洞  \n3. 容错处理不当致信息泄露  \n4. mybatis(ibatis)框架存在的SQL注入，正确的写法：\n```sql\nselect * from user where username like concat('%',#username#,'%')\n```\n5. mybatis框架$存在的SQL注入  \n尽量使用#描述参数，如果一定要使用$，则需要自己过滤用户输入。因为使用$参数MyBatis不会修改或转义字符串。\n6. Hibernate存在的SQL注入  \n正确的写法：\n- 名称绑定\n```java\nString queryString = \"from Item item where item.description like :searchString and item.date > :minDate\";\nList result = session.createQuery(queryString).setString(\"searchString\", searchString).setDate(\"minDate\", minDate).list();\n```\n- 位置绑定\n```java\nString queryString = \"from Item item where item.description like ? and item.date > ?\";\nList result = session.createQuery(queryString).setString(0, searchString).setDate(1, minDate).list();\n```","slug":"常见的Web安全漏洞介绍及解决办法","published":1,"updated":"2018-09-19T10:08:47.762Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0s00112v2pw2dgc8c1","content":"<p>本文对常见的Web漏洞的原因、关注点、解决办法做简要介绍，整理自Web安全培训笔记。</p>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>解决办法：参数化查询</p>\n<h3 id=\"失效的身份认证和会话管理\"><a href=\"#失效的身份认证和会话管理\" class=\"headerlink\" title=\"失效的身份认证和会话管理\"></a>失效的身份认证和会话管理</h3><ul>\n<li>原因：Session相关的数据没有被完整替换导致的安全问题  </li>\n<li>关注点：Login通过后，立刻把当前Session（包含Session、Cache、Cookie）失效掉，把需要保持到Session的value重新开一个Session保存；Logout功能中，除了把当前Session失效掉外，还要把Session相关的Cache也remove掉。  </li>\n<li>登录: 登录验证通过后，要把Session.Abort()，再保存新值</li>\n<li>注销：Session要Abort，相关缓存要clear，额外的cookie也有被clear |  </li>\n</ul>\n<h3 id=\"XSS（跨站脚本）\"><a href=\"#XSS（跨站脚本）\" class=\"headerlink\" title=\"XSS（跨站脚本）\"></a>XSS（跨站脚本）</h3><ul>\n<li>简介：XSS是指攻击者利用网站程序对用户输入过滤不足，输入可以显示子在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</li>\n<li>关注点：HTML输入输出编码、JavaScript的编码、URL的编码</li>\n<li>解决办法：对用户输出的数据要过滤特殊字符，对输出到客户端的数据也要过滤特殊字符。HTML、js、URL过滤方法不同。js中使用escape函数来过滤特殊字符，包括元素value、元素Attribute，都有encode起来，相关函数有escape、encodeURI、encodeURIComponent。PHP中有htmlspecialchars 函数。下面是js中特殊字符编码的一种写法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">escapeHtml</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> map = &#123;</span><br><span class=\"line\">    <span class=\"string\">'&amp;'</span>: <span class=\"string\">'&amp;amp;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#039;'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> text.replace(<span class=\"regexp\">/[&amp;&lt;&gt;\"']/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> map[m]; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外一种办法是增加cookie安全：启用httponly和secure</p>\n<blockquote>\n<p>secure属性是防止信息在传递的过程中被监听捕获后信息泄漏。当设置为true时，表示创建的cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以不会被窃取到cookie的具体内容。<br>HttpOnly属性不允许通过脚本访问cookie，只能用于传输，目的是防止程序获取cookie后进行攻击。</p>\n</blockquote>\n<h3 id=\"敏感数据暴露\"><a href=\"#敏感数据暴露\" class=\"headerlink\" title=\"敏感数据暴露\"></a>敏感数据暴露</h3><ul>\n<li>原因：敏感信息需要加密保存（内存、数据库、客户端中）+加密传输（HTTPS）+不缓存（只是尽量，看情况）</li>\n<li>解决关注点：登录、付款这样的页面要用HTTPS保护传输。密码可采用单向加密，信用卡账号采用可逆的加密方式。</li>\n<li>Base64算法：Base64只是一种编码方式，并不是一种加密算法，不要使用Base64来加密数据。</li>\n<li>Hash算法：具有不可逆性是一种单向密码体制，只能加密不能解密，可以用来加密用户登录密码等凭证。有的开源项目采用md5加盐的方式加密如<code>md5(md5(pwd)+salt)</code>，但是不建议使用MD5等算法，MD5可用因子碰撞暴力破解，建议采用SHA-256算法。不要使用哈希函数作为对称加密算法的签名，字符串串接后再做哈希要注意（URL签名）。</li>\n<li>对称加密：加解密使用同一个密钥，计算耗时短，通常用来加密数据。推荐使用AES算法</li>\n<li>非对称加密：加解密使用不同的密钥，计算耗时长，通常利用来加密密钥。注意密钥长度不要低于512，建议2048位的密钥长度。<blockquote>\n<p>为了确保安全性，有时多种加密算法混合使用。如非对称-&gt;hash-&gt;对称</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"CSRF（跨站请求伪造）\"><a href=\"#CSRF（跨站请求伪造）\" class=\"headerlink\" title=\"CSRF（跨站请求伪造）\"></a>CSRF（跨站请求伪造）</h3><p>利用合法用户的身份，在合法用户的终端调用请求。<br>解决关注点：重要操作不用使用get方式，要使用post方式；为每个能进行post动作的form增加token，并且在服务端检查token的合法性，合法则进行操作。<br>正确的防御方式：</p>\n<ul>\n<li>第一步，新建CSRF令牌添加进用户每次登陆以及存储在httpsession里，这种令牌至少对每个用户会话应是唯一的，或者是对每个请求是唯一的。</li>\n<li>第二步，令牌可以包含在URL中或作为一个URL参数记/隐藏字段。</li>\n<li>第三步，在服务器端检查提交令牌与用户会话对象令牌是否匹配。</li>\n<li>第四步，在注销和会话超时，删除用户对象会话和会话销毁。</li>\n</ul>\n<h3 id=\"未验证的重定向和转发\"><a href=\"#未验证的重定向和转发\" class=\"headerlink\" title=\"未验证的重定向和转发\"></a>未验证的重定向和转发</h3><p>原因：当系统接受重定向参数，如<code>http://www.a.com/login.aspx?returnUrl=default.aspx</code>，只要修改只要修改这个url为<code>http://www.a.com/login.aspx?returnUrl=http://wwv.a.com/login.aspx</code>，这样会被重定向到假冒站点的login界面，用户再次输入密码，此时密码就被假冒站点保存起来了。<br>解决关注点：对于returnUrl这种参数值进行判断，只要在白名单中的url才能redirect，尽量使用相对路径来redirect。</p>\n<h3 id=\"会话安全\"><a href=\"#会话安全\" class=\"headerlink\" title=\"会话安全\"></a>会话安全</h3><ul>\n<li>Session会话ID要足够长足够随机  </li>\n<li>认证用户后应开启一个全新的用户ID  </li>\n<li>限制会话闲置时间  </li>\n<li>限制会话生命周期  </li>\n<li>允许用户自行注销会话  </li>\n<li>会话结束后清除数据  </li>\n</ul>\n<h3 id=\"安全基础\"><a href=\"#安全基础\" class=\"headerlink\" title=\"安全基础\"></a>安全基础</h3><p>应当在完全不信任用户输入和客户端提交的数据的前提下开发应用程序。</p>\n<h3 id=\"输入验证\"><a href=\"#输入验证\" class=\"headerlink\" title=\"输入验证\"></a>输入验证</h3><ul>\n<li>集中式输入验证</li>\n<li>服务器端输入验证</li>\n<li>建议采用白名单放弃黑名单</li>\n<li>验证输入长度、格式、字符合法性等</li>\n<li>验证所有的输入</li>\n<li>防范元字符攻击</li>\n</ul>\n<h3 id=\"防范元字符攻击\"><a href=\"#防范元字符攻击\" class=\"headerlink\" title=\"防范元字符攻击\"></a>防范元字符攻击</h3><ul>\n<li>SQL注入</li>\n<li>跨站脚本</li>\n<li>路径操纵</li>\n<li>命令注入</li>\n<li>日志欺骗</li>\n</ul>\n<h3 id=\"数据库连接安全\"><a href=\"#数据库连接安全\" class=\"headerlink\" title=\"数据库连接安全\"></a>数据库连接安全</h3><ul>\n<li>使用参数化SQL语句</li>\n<li>数据库中的数据也是不可信的</li>\n<li>确保数据库资源能够被释放</li>\n</ul>\n<h3 id=\"减少编码逻辑漏洞\"><a href=\"#减少编码逻辑漏洞\" class=\"headerlink\" title=\"减少编码逻辑漏洞\"></a>减少编码逻辑漏洞</h3><p>执行操作时需要权限判断</p>\n<h3 id=\"文件安全\"><a href=\"#文件安全\" class=\"headerlink\" title=\"文件安全\"></a>文件安全</h3><h4 id=\"严格控制文件上传\"><a href=\"#严格控制文件上传\" class=\"headerlink\" title=\"严格控制文件上传\"></a>严格控制文件上传</h4><blockquote>\n<ul>\n<li>文件类型验证（白名单验证） </li>\n<li>存储路径安全（把握原则：可执行目录不可写，可写目录不可执行）  </li>\n<li>防范rar压缩炸弹  </li>\n<li>限制文件大小 </li>\n</ul>\n</blockquote>\n<h4 id=\"严格分配文件访问权限策略\"><a href=\"#严格分配文件访问权限策略\" class=\"headerlink\" title=\"严格分配文件访问权限策略\"></a>严格分配文件访问权限策略</h4><h4 id=\"安全的临时文件\"><a href=\"#安全的临时文件\" class=\"headerlink\" title=\"安全的临时文件\"></a>安全的临时文件</h4><h4 id=\"访问竞争条件\"><a href=\"#访问竞争条件\" class=\"headerlink\" title=\"访问竞争条件\"></a>访问竞争条件</h4><h3 id=\"开发调试\"><a href=\"#开发调试\" class=\"headerlink\" title=\"开发调试\"></a>开发调试</h3><h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><blockquote>\n<ul>\n<li>集中日志记录</li>\n<li>使用时间戳</li>\n<li>记录每个重要行为</li>\n<li>保护日志文件</li>\n</ul>\n</blockquote>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><blockquote>\n<ul>\n<li>上线产品删除调试代码</li>\n<li>产品中不包含后门代码</li>\n<li>清除备份和调试文件</li>\n</ul>\n</blockquote>\n<h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><ul>\n<li>保证整个团队使用一个共同的异常处理方法</li>\n<li>禁用或限制详细错误处理信息（可以暴露错误状态码，而错误详细信息不应被暴露）</li>\n<li>多个错误同一时间内返回相似或同样的出错信息 </li>\n<li>各种应用层会返回错误或异常结果</li>\n<li>有必要创建一个默认的错误处理机</li>\n<li>可以用总是返回“200”错误代码来覆盖默认的错误输出</li>\n</ul>\n<h3 id=\"不安全的加密存储\"><a href=\"#不安全的加密存储\" class=\"headerlink\" title=\"不安全的加密存储\"></a>不安全的加密存储</h3><ul>\n<li>不要自己创建加密算法。  </li>\n<li>应使用已经被证明的公开加密算法，例如AES，RAS公钥加密，和SHA-256或更好的HASH算法。   </li>\n<li>不要使用弱加密算法，比如MD5/SHA1。  </li>\n<li>建议使用更安全的加密算法，比如SHA-256或更其它的选择。  </li>\n</ul>\n<h3 id=\"不安全的通讯\"><a href=\"#不安全的通讯\" class=\"headerlink\" title=\"不安全的通讯\"></a>不安全的通讯</h3><ul>\n<li>对所有传输认证或传输数据的连接启用SSL</li>\n<li>确保web服务器和数据库之间的通讯安全恰当的加密</li>\n</ul>\n<h3 id=\"限制敏感数据的生命周期\"><a href=\"#限制敏感数据的生命周期\" class=\"headerlink\" title=\"限制敏感数据的生命周期\"></a>限制敏感数据的生命周期</h3><h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><blockquote>\n<ul>\n<li>使用对象来存储敏感数据，但使用后没清除或回收  </li>\n<li>具有可以被操作系统按需交换到磁盘的内存页面  </li>\n<li>在缓冲区中有敏感数据  </li>\n<li>使用了一些反射机制来控制敏感数据  </li>\n<li>通过调试信息、日志文件、环境变量等方式暴露敏感数据  </li>\n</ul>\n</blockquote>\n<h3 id=\"不要在客户端存储未经加密的数据\"><a href=\"#不要在客户端存储未经加密的数据\" class=\"headerlink\" title=\"不要在客户端存储未经加密的数据\"></a>不要在客户端存储未经加密的数据</h3><h3 id=\"确保安全敏感方法被调用时参数经过验证\"><a href=\"#确保安全敏感方法被调用时参数经过验证\" class=\"headerlink\" title=\"确保安全敏感方法被调用时参数经过验证\"></a>确保安全敏感方法被调用时参数经过验证</h3><h3 id=\"不要使用不安全的弱加密算法\"><a href=\"#不要使用不安全的弱加密算法\" class=\"headerlink\" title=\"不要使用不安全的弱加密算法\"></a>不要使用不安全的弱加密算法</h3><h3 id=\"身份鉴别\"><a href=\"#身份鉴别\" class=\"headerlink\" title=\"身份鉴别\"></a>身份鉴别</h3><h4 id=\"用户ID管理\"><a href=\"#用户ID管理\" class=\"headerlink\" title=\"用户ID管理\"></a>用户ID管理</h4><blockquote>\n<p>用户名是唯一的</p>\n<ul>\n<li>注册判断重命等逻辑放在服务器端</li>\n<li>Insert之前判断用户名是否存在</li>\n</ul>\n</blockquote>\n<h4 id=\"密码管理\"><a href=\"#密码管理\" class=\"headerlink\" title=\"密码管理\"></a>密码管理</h4><blockquote>\n<p>密码长度不小于8个字符<br>密码至少包含大小写字母、数字及特殊符号。密码与账户名不同<br>存储过程中不能使用明文以及不安全的存储<br>在密码传输工程中不能使用明文，短信验证码设置有效期<br>输入密码时不显示密码<br>管理账户没弱口令，删除测试账户 </p>\n</blockquote>\n<h4 id=\"认证限制\"><a href=\"#认证限制\" class=\"headerlink\" title=\"认证限制\"></a>认证限制</h4><blockquote>\n<p>用户身份认证尝试超限锁定功能<br>如果用户名易被猜测，对同一ip多次认证失败锁定<br>认证期间不透露用户ID是否存在<br>关键系统双因子认证<br>认证需要采用有效挑战应答机制  </p>\n</blockquote>\n<h3 id=\"注意的漏洞\"><a href=\"#注意的漏洞\" class=\"headerlink\" title=\"注意的漏洞\"></a>注意的漏洞</h3><ol>\n<li>Struts2框架任意代码执行  </li>\n<li>Java反序列化化漏洞  </li>\n<li>容错处理不当致信息泄露  </li>\n<li><p>mybatis(ibatis)框架存在的SQL注入，正确的写法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"keyword\">concat</span>(<span class=\"string\">'%'</span>,#username#,<span class=\"string\">'%'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mybatis框架$存在的SQL注入<br>尽量使用#描述参数，如果一定要使用$，则需要自己过滤用户输入。因为使用$参数MyBatis不会修改或转义字符串。</p>\n</li>\n<li>Hibernate存在的SQL注入<br>正确的写法：</li>\n</ol>\n<ul>\n<li><p>名称绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String queryString = <span class=\"string\">\"from Item item where item.description like :searchString and item.date &gt; :minDate\"</span>;</span><br><span class=\"line\">List result = session.createQuery(queryString).setString(<span class=\"string\">\"searchString\"</span>, searchString).setDate(<span class=\"string\">\"minDate\"</span>, minDate).list();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位置绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String queryString = <span class=\"string\">\"from Item item where item.description like ? and item.date &gt; ?\"</span>;</span><br><span class=\"line\">List result = session.createQuery(queryString).setString(<span class=\"number\">0</span>, searchString).setDate(<span class=\"number\">1</span>, minDate).list();</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>本文对常见的Web漏洞的原因、关注点、解决办法做简要介绍，整理自Web安全培训笔记。</p>\n<h3 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h3><p>解决办法：参数化查询</p>\n<h3 id=\"失效的身份认证和会话管理\"><a href=\"#失效的身份认证和会话管理\" class=\"headerlink\" title=\"失效的身份认证和会话管理\"></a>失效的身份认证和会话管理</h3><ul>\n<li>原因：Session相关的数据没有被完整替换导致的安全问题  </li>\n<li>关注点：Login通过后，立刻把当前Session（包含Session、Cache、Cookie）失效掉，把需要保持到Session的value重新开一个Session保存；Logout功能中，除了把当前Session失效掉外，还要把Session相关的Cache也remove掉。  </li>\n<li>登录: 登录验证通过后，要把Session.Abort()，再保存新值</li>\n<li>注销：Session要Abort，相关缓存要clear，额外的cookie也有被clear |  </li>\n</ul>\n<h3 id=\"XSS（跨站脚本）\"><a href=\"#XSS（跨站脚本）\" class=\"headerlink\" title=\"XSS（跨站脚本）\"></a>XSS（跨站脚本）</h3><ul>\n<li>简介：XSS是指攻击者利用网站程序对用户输入过滤不足，输入可以显示子在页面上对其他用户造成影响的HTML代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</li>\n<li>关注点：HTML输入输出编码、JavaScript的编码、URL的编码</li>\n<li>解决办法：对用户输出的数据要过滤特殊字符，对输出到客户端的数据也要过滤特殊字符。HTML、js、URL过滤方法不同。js中使用escape函数来过滤特殊字符，包括元素value、元素Attribute，都有encode起来，相关函数有escape、encodeURI、encodeURIComponent。PHP中有htmlspecialchars 函数。下面是js中特殊字符编码的一种写法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">escapeHtml</span>(<span class=\"params\">text</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> map = &#123;</span><br><span class=\"line\">    <span class=\"string\">'&amp;'</span>: <span class=\"string\">'&amp;amp;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&lt;'</span>: <span class=\"string\">'&amp;lt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'&gt;'</span>: <span class=\"string\">'&amp;gt;'</span>,</span><br><span class=\"line\">    <span class=\"string\">'\"'</span>: <span class=\"string\">'&amp;quot;'</span>,</span><br><span class=\"line\">    <span class=\"string\">\"'\"</span>: <span class=\"string\">'&amp;#039;'</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> text.replace(<span class=\"regexp\">/[&amp;&lt;&gt;\"']/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>) </span>&#123; <span class=\"keyword\">return</span> map[m]; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外一种办法是增加cookie安全：启用httponly和secure</p>\n<blockquote>\n<p>secure属性是防止信息在传递的过程中被监听捕获后信息泄漏。当设置为true时，表示创建的cookie会被以安全的形式向服务器传输，也就是只能在HTTPS连接中被浏览器传递到服务器端进行会话验证，如果是HTTP连接则不会传递该信息，所以不会被窃取到cookie的具体内容。<br>HttpOnly属性不允许通过脚本访问cookie，只能用于传输，目的是防止程序获取cookie后进行攻击。</p>\n</blockquote>\n<h3 id=\"敏感数据暴露\"><a href=\"#敏感数据暴露\" class=\"headerlink\" title=\"敏感数据暴露\"></a>敏感数据暴露</h3><ul>\n<li>原因：敏感信息需要加密保存（内存、数据库、客户端中）+加密传输（HTTPS）+不缓存（只是尽量，看情况）</li>\n<li>解决关注点：登录、付款这样的页面要用HTTPS保护传输。密码可采用单向加密，信用卡账号采用可逆的加密方式。</li>\n<li>Base64算法：Base64只是一种编码方式，并不是一种加密算法，不要使用Base64来加密数据。</li>\n<li>Hash算法：具有不可逆性是一种单向密码体制，只能加密不能解密，可以用来加密用户登录密码等凭证。有的开源项目采用md5加盐的方式加密如<code>md5(md5(pwd)+salt)</code>，但是不建议使用MD5等算法，MD5可用因子碰撞暴力破解，建议采用SHA-256算法。不要使用哈希函数作为对称加密算法的签名，字符串串接后再做哈希要注意（URL签名）。</li>\n<li>对称加密：加解密使用同一个密钥，计算耗时短，通常用来加密数据。推荐使用AES算法</li>\n<li>非对称加密：加解密使用不同的密钥，计算耗时长，通常利用来加密密钥。注意密钥长度不要低于512，建议2048位的密钥长度。<blockquote>\n<p>为了确保安全性，有时多种加密算法混合使用。如非对称-&gt;hash-&gt;对称</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"CSRF（跨站请求伪造）\"><a href=\"#CSRF（跨站请求伪造）\" class=\"headerlink\" title=\"CSRF（跨站请求伪造）\"></a>CSRF（跨站请求伪造）</h3><p>利用合法用户的身份，在合法用户的终端调用请求。<br>解决关注点：重要操作不用使用get方式，要使用post方式；为每个能进行post动作的form增加token，并且在服务端检查token的合法性，合法则进行操作。<br>正确的防御方式：</p>\n<ul>\n<li>第一步，新建CSRF令牌添加进用户每次登陆以及存储在httpsession里，这种令牌至少对每个用户会话应是唯一的，或者是对每个请求是唯一的。</li>\n<li>第二步，令牌可以包含在URL中或作为一个URL参数记/隐藏字段。</li>\n<li>第三步，在服务器端检查提交令牌与用户会话对象令牌是否匹配。</li>\n<li>第四步，在注销和会话超时，删除用户对象会话和会话销毁。</li>\n</ul>\n<h3 id=\"未验证的重定向和转发\"><a href=\"#未验证的重定向和转发\" class=\"headerlink\" title=\"未验证的重定向和转发\"></a>未验证的重定向和转发</h3><p>原因：当系统接受重定向参数，如<code>http://www.a.com/login.aspx?returnUrl=default.aspx</code>，只要修改只要修改这个url为<code>http://www.a.com/login.aspx?returnUrl=http://wwv.a.com/login.aspx</code>，这样会被重定向到假冒站点的login界面，用户再次输入密码，此时密码就被假冒站点保存起来了。<br>解决关注点：对于returnUrl这种参数值进行判断，只要在白名单中的url才能redirect，尽量使用相对路径来redirect。</p>\n<h3 id=\"会话安全\"><a href=\"#会话安全\" class=\"headerlink\" title=\"会话安全\"></a>会话安全</h3><ul>\n<li>Session会话ID要足够长足够随机  </li>\n<li>认证用户后应开启一个全新的用户ID  </li>\n<li>限制会话闲置时间  </li>\n<li>限制会话生命周期  </li>\n<li>允许用户自行注销会话  </li>\n<li>会话结束后清除数据  </li>\n</ul>\n<h3 id=\"安全基础\"><a href=\"#安全基础\" class=\"headerlink\" title=\"安全基础\"></a>安全基础</h3><p>应当在完全不信任用户输入和客户端提交的数据的前提下开发应用程序。</p>\n<h3 id=\"输入验证\"><a href=\"#输入验证\" class=\"headerlink\" title=\"输入验证\"></a>输入验证</h3><ul>\n<li>集中式输入验证</li>\n<li>服务器端输入验证</li>\n<li>建议采用白名单放弃黑名单</li>\n<li>验证输入长度、格式、字符合法性等</li>\n<li>验证所有的输入</li>\n<li>防范元字符攻击</li>\n</ul>\n<h3 id=\"防范元字符攻击\"><a href=\"#防范元字符攻击\" class=\"headerlink\" title=\"防范元字符攻击\"></a>防范元字符攻击</h3><ul>\n<li>SQL注入</li>\n<li>跨站脚本</li>\n<li>路径操纵</li>\n<li>命令注入</li>\n<li>日志欺骗</li>\n</ul>\n<h3 id=\"数据库连接安全\"><a href=\"#数据库连接安全\" class=\"headerlink\" title=\"数据库连接安全\"></a>数据库连接安全</h3><ul>\n<li>使用参数化SQL语句</li>\n<li>数据库中的数据也是不可信的</li>\n<li>确保数据库资源能够被释放</li>\n</ul>\n<h3 id=\"减少编码逻辑漏洞\"><a href=\"#减少编码逻辑漏洞\" class=\"headerlink\" title=\"减少编码逻辑漏洞\"></a>减少编码逻辑漏洞</h3><p>执行操作时需要权限判断</p>\n<h3 id=\"文件安全\"><a href=\"#文件安全\" class=\"headerlink\" title=\"文件安全\"></a>文件安全</h3><h4 id=\"严格控制文件上传\"><a href=\"#严格控制文件上传\" class=\"headerlink\" title=\"严格控制文件上传\"></a>严格控制文件上传</h4><blockquote>\n<ul>\n<li>文件类型验证（白名单验证） </li>\n<li>存储路径安全（把握原则：可执行目录不可写，可写目录不可执行）  </li>\n<li>防范rar压缩炸弹  </li>\n<li>限制文件大小 </li>\n</ul>\n</blockquote>\n<h4 id=\"严格分配文件访问权限策略\"><a href=\"#严格分配文件访问权限策略\" class=\"headerlink\" title=\"严格分配文件访问权限策略\"></a>严格分配文件访问权限策略</h4><h4 id=\"安全的临时文件\"><a href=\"#安全的临时文件\" class=\"headerlink\" title=\"安全的临时文件\"></a>安全的临时文件</h4><h4 id=\"访问竞争条件\"><a href=\"#访问竞争条件\" class=\"headerlink\" title=\"访问竞争条件\"></a>访问竞争条件</h4><h3 id=\"开发调试\"><a href=\"#开发调试\" class=\"headerlink\" title=\"开发调试\"></a>开发调试</h3><h4 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h4><blockquote>\n<ul>\n<li>集中日志记录</li>\n<li>使用时间戳</li>\n<li>记录每个重要行为</li>\n<li>保护日志文件</li>\n</ul>\n</blockquote>\n<h4 id=\"调试\"><a href=\"#调试\" class=\"headerlink\" title=\"调试\"></a>调试</h4><blockquote>\n<ul>\n<li>上线产品删除调试代码</li>\n<li>产品中不包含后门代码</li>\n<li>清除备份和调试文件</li>\n</ul>\n</blockquote>\n<h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><h3 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h3><ul>\n<li>保证整个团队使用一个共同的异常处理方法</li>\n<li>禁用或限制详细错误处理信息（可以暴露错误状态码，而错误详细信息不应被暴露）</li>\n<li>多个错误同一时间内返回相似或同样的出错信息 </li>\n<li>各种应用层会返回错误或异常结果</li>\n<li>有必要创建一个默认的错误处理机</li>\n<li>可以用总是返回“200”错误代码来覆盖默认的错误输出</li>\n</ul>\n<h3 id=\"不安全的加密存储\"><a href=\"#不安全的加密存储\" class=\"headerlink\" title=\"不安全的加密存储\"></a>不安全的加密存储</h3><ul>\n<li>不要自己创建加密算法。  </li>\n<li>应使用已经被证明的公开加密算法，例如AES，RAS公钥加密，和SHA-256或更好的HASH算法。   </li>\n<li>不要使用弱加密算法，比如MD5/SHA1。  </li>\n<li>建议使用更安全的加密算法，比如SHA-256或更其它的选择。  </li>\n</ul>\n<h3 id=\"不安全的通讯\"><a href=\"#不安全的通讯\" class=\"headerlink\" title=\"不安全的通讯\"></a>不安全的通讯</h3><ul>\n<li>对所有传输认证或传输数据的连接启用SSL</li>\n<li>确保web服务器和数据库之间的通讯安全恰当的加密</li>\n</ul>\n<h3 id=\"限制敏感数据的生命周期\"><a href=\"#限制敏感数据的生命周期\" class=\"headerlink\" title=\"限制敏感数据的生命周期\"></a>限制敏感数据的生命周期</h3><h4 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h4><blockquote>\n<ul>\n<li>使用对象来存储敏感数据，但使用后没清除或回收  </li>\n<li>具有可以被操作系统按需交换到磁盘的内存页面  </li>\n<li>在缓冲区中有敏感数据  </li>\n<li>使用了一些反射机制来控制敏感数据  </li>\n<li>通过调试信息、日志文件、环境变量等方式暴露敏感数据  </li>\n</ul>\n</blockquote>\n<h3 id=\"不要在客户端存储未经加密的数据\"><a href=\"#不要在客户端存储未经加密的数据\" class=\"headerlink\" title=\"不要在客户端存储未经加密的数据\"></a>不要在客户端存储未经加密的数据</h3><h3 id=\"确保安全敏感方法被调用时参数经过验证\"><a href=\"#确保安全敏感方法被调用时参数经过验证\" class=\"headerlink\" title=\"确保安全敏感方法被调用时参数经过验证\"></a>确保安全敏感方法被调用时参数经过验证</h3><h3 id=\"不要使用不安全的弱加密算法\"><a href=\"#不要使用不安全的弱加密算法\" class=\"headerlink\" title=\"不要使用不安全的弱加密算法\"></a>不要使用不安全的弱加密算法</h3><h3 id=\"身份鉴别\"><a href=\"#身份鉴别\" class=\"headerlink\" title=\"身份鉴别\"></a>身份鉴别</h3><h4 id=\"用户ID管理\"><a href=\"#用户ID管理\" class=\"headerlink\" title=\"用户ID管理\"></a>用户ID管理</h4><blockquote>\n<p>用户名是唯一的</p>\n<ul>\n<li>注册判断重命等逻辑放在服务器端</li>\n<li>Insert之前判断用户名是否存在</li>\n</ul>\n</blockquote>\n<h4 id=\"密码管理\"><a href=\"#密码管理\" class=\"headerlink\" title=\"密码管理\"></a>密码管理</h4><blockquote>\n<p>密码长度不小于8个字符<br>密码至少包含大小写字母、数字及特殊符号。密码与账户名不同<br>存储过程中不能使用明文以及不安全的存储<br>在密码传输工程中不能使用明文，短信验证码设置有效期<br>输入密码时不显示密码<br>管理账户没弱口令，删除测试账户 </p>\n</blockquote>\n<h4 id=\"认证限制\"><a href=\"#认证限制\" class=\"headerlink\" title=\"认证限制\"></a>认证限制</h4><blockquote>\n<p>用户身份认证尝试超限锁定功能<br>如果用户名易被猜测，对同一ip多次认证失败锁定<br>认证期间不透露用户ID是否存在<br>关键系统双因子认证<br>认证需要采用有效挑战应答机制  </p>\n</blockquote>\n<h3 id=\"注意的漏洞\"><a href=\"#注意的漏洞\" class=\"headerlink\" title=\"注意的漏洞\"></a>注意的漏洞</h3><ol>\n<li>Struts2框架任意代码执行  </li>\n<li>Java反序列化化漏洞  </li>\n<li>容错处理不当致信息泄露  </li>\n<li><p>mybatis(ibatis)框架存在的SQL注入，正确的写法：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> <span class=\"keyword\">user</span> <span class=\"keyword\">where</span> username <span class=\"keyword\">like</span> <span class=\"keyword\">concat</span>(<span class=\"string\">'%'</span>,#username#,<span class=\"string\">'%'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>mybatis框架$存在的SQL注入<br>尽量使用#描述参数，如果一定要使用$，则需要自己过滤用户输入。因为使用$参数MyBatis不会修改或转义字符串。</p>\n</li>\n<li>Hibernate存在的SQL注入<br>正确的写法：</li>\n</ol>\n<ul>\n<li><p>名称绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String queryString = <span class=\"string\">\"from Item item where item.description like :searchString and item.date &gt; :minDate\"</span>;</span><br><span class=\"line\">List result = session.createQuery(queryString).setString(<span class=\"string\">\"searchString\"</span>, searchString).setDate(<span class=\"string\">\"minDate\"</span>, minDate).list();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>位置绑定</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String queryString = <span class=\"string\">\"from Item item where item.description like ? and item.date &gt; ?\"</span>;</span><br><span class=\"line\">List result = session.createQuery(queryString).setString(<span class=\"number\">0</span>, searchString).setDate(<span class=\"number\">1</span>, minDate).list();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"记一次crontab执行scp异常解决","author":"Peng Fang","date":"2018-10-22T07:57:00.000Z","_content":"\n\n### Python执行shell命令时的奇怪问题\n通过crontab命令，周期性执行Python脚本。简单来说，用Python脚本实现的是将一些指定目录下的文件scp到远程主机的某个目录下。奇怪的是，该scp命令在命令行中执行没问题，通过上述的方式执行就不能成功，日志记录的是“scp传输失败”\n\n### 问题具体一些\n我们通过crontab命令，可以在固定的间隔时间执行指定的系统指令或shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。   \n任务定义格式：   \n.---------------- minute (0 - 59)   \n|  .------------- hour (0 - 23)   \n|  |  .---------- day of month (1 - 31)   \n|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...   \n|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat   \n|  |  |  |  |   \n`*  *  *  *  * user-name  command to be executed `  \n\n例如：每五分钟执行一次验证脚本\n`*/5 * * * * python /data/mgxy/scripts/verify.py MGSM ZL BLXY`\n\ncrontab有个用户域，也就是说当前用户可以设置自己的crontab命令，设置成功可以通过`crontab -l`命令查看当前用户设置的任务，不能看到其他用户设置的任务。通过`crontab -e`命令来编辑当前用户的crontab，也就是在执行命令后的编辑器中输入上面的验证脚本，然后保存后会将编辑的crontab文件提交给cron进程执行。\n\n\"verify.py\"中执行scp命令是采用免密方式，免密登录是通过sshpass来实现的，用-p参数指定明文密码：\n``` shell\nsshpass -p loginPassord scp -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no /sourcePath/sourceFile username@targetIp:/targetPath/\n```\n\n每次ssh访问过的计算机公钥都会记录在`~/.ssh/known_hosts`，方便下次访问该计算机时核对。记得首次ssh登录一个主机的时候，命令行都会提示：“RSA key fingerprint is *****. Are you sure you want to continue connecting (yes/no)?”，如果回复yes,ssh客户端就会继续登录，将主机key存在文件`~/.ssh/known_hosts`中，如果回复no，连接就会中断。\n\nscp 可以通过`-o`来指定ssh选项。`StrictHostKeyChecking=no`，该选项会禁用掉上面的交互提示，自动将主机key添加到文件`~/.ssh/known_hosts`中。如果我们确认远程主机密码更改时合法的，我们可以跳过主机密钥的校验，通过设置`UserKnownHostsFile=/dev/null`将密钥发送到一个null的known_hosts文件中。\n\n### 一些尝试\n- 将实际执行的命令，放到命令行中执行\n  结果：能够正常执行。\n  猜想：\n  1. 会不会命令行用户和执行脚本的用户不同导致？实际这两个都同一个用户。\n  2. 会不会是Python脚本的问题？python脚本在另一台机器运行正常。\n- 不用crontab命令，将Python脚本在命令行执行\n  结果：脚本正常执行。说明是crontab执行任务的问题。\n  涛哥指导：crontab的用户比较特殊，尽可能使用绝对路径\n- crontab命令中将python改为绝对路径\n  结果：`*/5 * * * * /usr/bin/python xxx`问题依然存在\n  设想：会不会是python脚本中执行的scp命令也要换成绝对路径\n- 将python中执行的命令换成绝对路径\n  结果：成功！能够正常拷贝文件。\n### 解决办法\n想想修改python中的命令为绝对路径，这不是通用办法。有没有通用点的办法，不用修改python脚本呢。然后我谷歌了一下，发现`/etc/contab`中可以设置环境变量，如：\n``` shell\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n```\n\n很多命令就在以上的$PATH中啊。想想该怎么设置环境变量呢，在哪里设置呢？他们以前会不会也有这样的问题呢？是怎么解决的呢？所以我去线上环境`crontab -l`看了一下，发现类似的设置：\n``` shell\n*/10 * * * * . /etc/profile;/bin/sh xxx.sh\n```\n\n然后百度了一下，有这么一段描述(来自[博客](https://www.cnblogs.com/intval/p/5763929.html))：\n>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：\n>`0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh`\n\n最后，我在crontab命令按照以上配置（crontab命令设置绝对路径是好习惯）：\n``` shell\n*/5 * * * * . /etc/profile;/usr/bin/python  xxx.py xxx\n```\n并在/etc/profile中设置环境变量：\n`PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH`   \nbingo, 成功！\n\n#### 参考资料\nhttps://www.cnblogs.com/chenlaichao/p/7727554.html   \nhttps://www.shellhacks.com/disable-ssh-host-key-checking/   \nhttps://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths   \nhttps://www.cnblogs.com/intval/p/5763929.html   \n\n\n\n\n\n\n","source":"_posts/记一次crontab执行scp异常解决.md","raw":"title: 记一次crontab执行scp异常解决\nauthor: Peng Fang\ntags:\n  - 异常解决\ncategories:\n  - 运维\ndate: 2018-10-22 15:57:00\n---\n\n\n### Python执行shell命令时的奇怪问题\n通过crontab命令，周期性执行Python脚本。简单来说，用Python脚本实现的是将一些指定目录下的文件scp到远程主机的某个目录下。奇怪的是，该scp命令在命令行中执行没问题，通过上述的方式执行就不能成功，日志记录的是“scp传输失败”\n\n### 问题具体一些\n我们通过crontab命令，可以在固定的间隔时间执行指定的系统指令或shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。   \n任务定义格式：   \n.---------------- minute (0 - 59)   \n|  .------------- hour (0 - 23)   \n|  |  .---------- day of month (1 - 31)   \n|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...   \n|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat   \n|  |  |  |  |   \n`*  *  *  *  * user-name  command to be executed `  \n\n例如：每五分钟执行一次验证脚本\n`*/5 * * * * python /data/mgxy/scripts/verify.py MGSM ZL BLXY`\n\ncrontab有个用户域，也就是说当前用户可以设置自己的crontab命令，设置成功可以通过`crontab -l`命令查看当前用户设置的任务，不能看到其他用户设置的任务。通过`crontab -e`命令来编辑当前用户的crontab，也就是在执行命令后的编辑器中输入上面的验证脚本，然后保存后会将编辑的crontab文件提交给cron进程执行。\n\n\"verify.py\"中执行scp命令是采用免密方式，免密登录是通过sshpass来实现的，用-p参数指定明文密码：\n``` shell\nsshpass -p loginPassord scp -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no /sourcePath/sourceFile username@targetIp:/targetPath/\n```\n\n每次ssh访问过的计算机公钥都会记录在`~/.ssh/known_hosts`，方便下次访问该计算机时核对。记得首次ssh登录一个主机的时候，命令行都会提示：“RSA key fingerprint is *****. Are you sure you want to continue connecting (yes/no)?”，如果回复yes,ssh客户端就会继续登录，将主机key存在文件`~/.ssh/known_hosts`中，如果回复no，连接就会中断。\n\nscp 可以通过`-o`来指定ssh选项。`StrictHostKeyChecking=no`，该选项会禁用掉上面的交互提示，自动将主机key添加到文件`~/.ssh/known_hosts`中。如果我们确认远程主机密码更改时合法的，我们可以跳过主机密钥的校验，通过设置`UserKnownHostsFile=/dev/null`将密钥发送到一个null的known_hosts文件中。\n\n### 一些尝试\n- 将实际执行的命令，放到命令行中执行\n  结果：能够正常执行。\n  猜想：\n  1. 会不会命令行用户和执行脚本的用户不同导致？实际这两个都同一个用户。\n  2. 会不会是Python脚本的问题？python脚本在另一台机器运行正常。\n- 不用crontab命令，将Python脚本在命令行执行\n  结果：脚本正常执行。说明是crontab执行任务的问题。\n  涛哥指导：crontab的用户比较特殊，尽可能使用绝对路径\n- crontab命令中将python改为绝对路径\n  结果：`*/5 * * * * /usr/bin/python xxx`问题依然存在\n  设想：会不会是python脚本中执行的scp命令也要换成绝对路径\n- 将python中执行的命令换成绝对路径\n  结果：成功！能够正常拷贝文件。\n### 解决办法\n想想修改python中的命令为绝对路径，这不是通用办法。有没有通用点的办法，不用修改python脚本呢。然后我谷歌了一下，发现`/etc/contab`中可以设置环境变量，如：\n``` shell\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n```\n\n很多命令就在以上的$PATH中啊。想想该怎么设置环境变量呢，在哪里设置呢？他们以前会不会也有这样的问题呢？是怎么解决的呢？所以我去线上环境`crontab -l`看了一下，发现类似的设置：\n``` shell\n*/10 * * * * . /etc/profile;/bin/sh xxx.sh\n```\n\n然后百度了一下，有这么一段描述(来自[博客](https://www.cnblogs.com/intval/p/5763929.html))：\n>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：\n>`0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh`\n\n最后，我在crontab命令按照以上配置（crontab命令设置绝对路径是好习惯）：\n``` shell\n*/5 * * * * . /etc/profile;/usr/bin/python  xxx.py xxx\n```\n并在/etc/profile中设置环境变量：\n`PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH`   \nbingo, 成功！\n\n#### 参考资料\nhttps://www.cnblogs.com/chenlaichao/p/7727554.html   \nhttps://www.shellhacks.com/disable-ssh-host-key-checking/   \nhttps://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths   \nhttps://www.cnblogs.com/intval/p/5763929.html   \n\n\n\n\n\n\n","slug":"记一次crontab执行scp异常解决","published":1,"updated":"2018-10-22T07:59:51.630Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjnk0jz0t00132v2p9whnrd6g","content":"<h3 id=\"Python执行shell命令时的奇怪问题\"><a href=\"#Python执行shell命令时的奇怪问题\" class=\"headerlink\" title=\"Python执行shell命令时的奇怪问题\"></a>Python执行shell命令时的奇怪问题</h3><p>通过crontab命令，周期性执行Python脚本。简单来说，用Python脚本实现的是将一些指定目录下的文件scp到远程主机的某个目录下。奇怪的是，该scp命令在命令行中执行没问题，通过上述的方式执行就不能成功，日志记录的是“scp传输失败”</p>\n<h3 id=\"问题具体一些\"><a href=\"#问题具体一些\" class=\"headerlink\" title=\"问题具体一些\"></a>问题具体一些</h3><p>我们通过crontab命令，可以在固定的间隔时间执行指定的系统指令或shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。<br>任务定义格式：<br>.—————- minute (0 - 59)<br>|  .————- hour (0 - 23)<br>|  |  .———- day of month (1 - 31)<br>|  |  |  .——- month (1 - 12) OR jan,feb,mar,apr …<br>|  |  |  |  .—- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat<br>|  |  |  |  |<br><code>*  *  *  *  * user-name  command to be executed</code>  </p>\n<p>例如：每五分钟执行一次验证脚本<br><code>*/5 * * * * python /data/mgxy/scripts/verify.py MGSM ZL BLXY</code></p>\n<p>crontab有个用户域，也就是说当前用户可以设置自己的crontab命令，设置成功可以通过<code>crontab -l</code>命令查看当前用户设置的任务，不能看到其他用户设置的任务。通过<code>crontab -e</code>命令来编辑当前用户的crontab，也就是在执行命令后的编辑器中输入上面的验证脚本，然后保存后会将编辑的crontab文件提交给cron进程执行。</p>\n<p>“verify.py”中执行scp命令是采用免密方式，免密登录是通过sshpass来实现的，用-p参数指定明文密码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p loginPassord scp -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no /sourcePath/sourceFile username@targetIp:/targetPath/</span><br></pre></td></tr></table></figure></p>\n<p>每次ssh访问过的计算机公钥都会记录在<code>~/.ssh/known_hosts</code>，方便下次访问该计算机时核对。记得首次ssh登录一个主机的时候，命令行都会提示：“RSA key fingerprint is <strong>*</strong>. Are you sure you want to continue connecting (yes/no)?”，如果回复yes,ssh客户端就会继续登录，将主机key存在文件<code>~/.ssh/known_hosts</code>中，如果回复no，连接就会中断。</p>\n<p>scp 可以通过<code>-o</code>来指定ssh选项。<code>StrictHostKeyChecking=no</code>，该选项会禁用掉上面的交互提示，自动将主机key添加到文件<code>~/.ssh/known_hosts</code>中。如果我们确认远程主机密码更改时合法的，我们可以跳过主机密钥的校验，通过设置<code>UserKnownHostsFile=/dev/null</code>将密钥发送到一个null的known_hosts文件中。</p>\n<h3 id=\"一些尝试\"><a href=\"#一些尝试\" class=\"headerlink\" title=\"一些尝试\"></a>一些尝试</h3><ul>\n<li>将实际执行的命令，放到命令行中执行<br>结果：能够正常执行。<br>猜想：<ol>\n<li>会不会命令行用户和执行脚本的用户不同导致？实际这两个都同一个用户。</li>\n<li>会不会是Python脚本的问题？python脚本在另一台机器运行正常。</li>\n</ol>\n</li>\n<li>不用crontab命令，将Python脚本在命令行执行<br>结果：脚本正常执行。说明是crontab执行任务的问题。<br>涛哥指导：crontab的用户比较特殊，尽可能使用绝对路径</li>\n<li>crontab命令中将python改为绝对路径<br>结果：<code>*/5 * * * * /usr/bin/python xxx</code>问题依然存在<br>设想：会不会是python脚本中执行的scp命令也要换成绝对路径</li>\n<li>将python中执行的命令换成绝对路径<br>结果：成功！能够正常拷贝文件。<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3>想想修改python中的命令为绝对路径，这不是通用办法。有没有通用点的办法，不用修改python脚本呢。然后我谷歌了一下，发现<code>/etc/contab</code>中可以设置环境变量，如：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>很多命令就在以上的$PATH中啊。想想该怎么设置环境变量呢，在哪里设置呢？他们以前会不会也有这样的问题呢？是怎么解决的呢？所以我去线上环境<code>crontab -l</code>看了一下，发现类似的设置：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/10 * * * * . /etc/profile;/bin/sh xxx.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后百度了一下，有这么一段描述(来自<a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">博客</a>)：</p>\n<blockquote>\n<p>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：<br><code>0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</code></p>\n</blockquote>\n<p>最后，我在crontab命令按照以上配置（crontab命令设置绝对路径是好习惯）：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/5 * * * * . /etc/profile;/usr/bin/python  xxx.py xxx</span><br></pre></td></tr></table></figure></p>\n<p>并在/etc/profile中设置环境变量：<br><code>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH</code><br>bingo, 成功！</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/chenlaichao/p/7727554.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chenlaichao/p/7727554.html</a><br><a href=\"https://www.shellhacks.com/disable-ssh-host-key-checking/\" target=\"_blank\" rel=\"noopener\">https://www.shellhacks.com/disable-ssh-host-key-checking/</a><br><a href=\"https://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths</a><br><a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a>   </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Python执行shell命令时的奇怪问题\"><a href=\"#Python执行shell命令时的奇怪问题\" class=\"headerlink\" title=\"Python执行shell命令时的奇怪问题\"></a>Python执行shell命令时的奇怪问题</h3><p>通过crontab命令，周期性执行Python脚本。简单来说，用Python脚本实现的是将一些指定目录下的文件scp到远程主机的某个目录下。奇怪的是，该scp命令在命令行中执行没问题，通过上述的方式执行就不能成功，日志记录的是“scp传输失败”</p>\n<h3 id=\"问题具体一些\"><a href=\"#问题具体一些\" class=\"headerlink\" title=\"问题具体一些\"></a>问题具体一些</h3><p>我们通过crontab命令，可以在固定的间隔时间执行指定的系统指令或shell script脚本。时间间隔的单位可以是分钟、小时、日、月、周及以上的任意组合。<br>任务定义格式：<br>.—————- minute (0 - 59)<br>|  .————- hour (0 - 23)<br>|  |  .———- day of month (1 - 31)<br>|  |  |  .——- month (1 - 12) OR jan,feb,mar,apr …<br>|  |  |  |  .—- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat<br>|  |  |  |  |<br><code>*  *  *  *  * user-name  command to be executed</code>  </p>\n<p>例如：每五分钟执行一次验证脚本<br><code>*/5 * * * * python /data/mgxy/scripts/verify.py MGSM ZL BLXY</code></p>\n<p>crontab有个用户域，也就是说当前用户可以设置自己的crontab命令，设置成功可以通过<code>crontab -l</code>命令查看当前用户设置的任务，不能看到其他用户设置的任务。通过<code>crontab -e</code>命令来编辑当前用户的crontab，也就是在执行命令后的编辑器中输入上面的验证脚本，然后保存后会将编辑的crontab文件提交给cron进程执行。</p>\n<p>“verify.py”中执行scp命令是采用免密方式，免密登录是通过sshpass来实现的，用-p参数指定明文密码：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sshpass -p loginPassord scp -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no /sourcePath/sourceFile username@targetIp:/targetPath/</span><br></pre></td></tr></table></figure></p>\n<p>每次ssh访问过的计算机公钥都会记录在<code>~/.ssh/known_hosts</code>，方便下次访问该计算机时核对。记得首次ssh登录一个主机的时候，命令行都会提示：“RSA key fingerprint is <strong>*</strong>. Are you sure you want to continue connecting (yes/no)?”，如果回复yes,ssh客户端就会继续登录，将主机key存在文件<code>~/.ssh/known_hosts</code>中，如果回复no，连接就会中断。</p>\n<p>scp 可以通过<code>-o</code>来指定ssh选项。<code>StrictHostKeyChecking=no</code>，该选项会禁用掉上面的交互提示，自动将主机key添加到文件<code>~/.ssh/known_hosts</code>中。如果我们确认远程主机密码更改时合法的，我们可以跳过主机密钥的校验，通过设置<code>UserKnownHostsFile=/dev/null</code>将密钥发送到一个null的known_hosts文件中。</p>\n<h3 id=\"一些尝试\"><a href=\"#一些尝试\" class=\"headerlink\" title=\"一些尝试\"></a>一些尝试</h3><ul>\n<li>将实际执行的命令，放到命令行中执行<br>结果：能够正常执行。<br>猜想：<ol>\n<li>会不会命令行用户和执行脚本的用户不同导致？实际这两个都同一个用户。</li>\n<li>会不会是Python脚本的问题？python脚本在另一台机器运行正常。</li>\n</ol>\n</li>\n<li>不用crontab命令，将Python脚本在命令行执行<br>结果：脚本正常执行。说明是crontab执行任务的问题。<br>涛哥指导：crontab的用户比较特殊，尽可能使用绝对路径</li>\n<li>crontab命令中将python改为绝对路径<br>结果：<code>*/5 * * * * /usr/bin/python xxx</code>问题依然存在<br>设想：会不会是python脚本中执行的scp命令也要换成绝对路径</li>\n<li>将python中执行的命令换成绝对路径<br>结果：成功！能够正常拷贝文件。<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3>想想修改python中的命令为绝对路径，这不是通用办法。有没有通用点的办法，不用修改python脚本呢。然后我谷歌了一下，发现<code>/etc/contab</code>中可以设置环境变量，如：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>很多命令就在以上的$PATH中啊。想想该怎么设置环境变量呢，在哪里设置呢？他们以前会不会也有这样的问题呢？是怎么解决的呢？所以我去线上环境<code>crontab -l</code>看了一下，发现类似的设置：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/10 * * * * . /etc/profile;/bin/sh xxx.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后百度了一下，有这么一段描述(来自<a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">博客</a>)：</p>\n<blockquote>\n<p>当手动执行脚本OK，但是crontab死活不执行时。这时必须大胆怀疑是环境变量惹的祸，并可以尝试在crontab中直接引入环境变量解决问题。如：<br><code>0 * * * * . /etc/profile;/bin/sh /var/www/java/audit_no_count/bin/restart_audit.sh</code></p>\n</blockquote>\n<p>最后，我在crontab命令按照以上配置（crontab命令设置绝对路径是好习惯）：<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/5 * * * * . /etc/profile;/usr/bin/python  xxx.py xxx</span><br></pre></td></tr></table></figure></p>\n<p>并在/etc/profile中设置环境变量：<br><code>PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:$PATH</code><br>bingo, 成功！</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><p><a href=\"https://www.cnblogs.com/chenlaichao/p/7727554.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/chenlaichao/p/7727554.html</a><br><a href=\"https://www.shellhacks.com/disable-ssh-host-key-checking/\" target=\"_blank\" rel=\"noopener\">https://www.shellhacks.com/disable-ssh-host-key-checking/</a><br><a href=\"https://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/2388087/how-to-get-cron-to-call-in-the-correct-paths</a><br><a href=\"https://www.cnblogs.com/intval/p/5763929.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/intval/p/5763929.html</a>   </p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjnk0jyzx00012v2pxzmvpttf","category_id":"cjnk0jz0200032v2pz4ryjecy","_id":"cjnk0jz0d000d2v2p3npqcjq1"},{"post_id":"cjnk0jz0000022v2p7ycgf68m","category_id":"cjnk0jz0700082v2pgnug8cn2","_id":"cjnk0jz0j000k2v2pfa2mxl0j"},{"post_id":"cjnk0jz0400052v2p4m21e824","category_id":"cjnk0jz0700082v2pgnug8cn2","_id":"cjnk0jz0m000p2v2ppxmok54a"},{"post_id":"cjnk0jz0500062v2p2129wzae","category_id":"cjnk0jz0j000j2v2punqhmxeb","_id":"cjnk0jz0q000v2v2pziow7sw4"},{"post_id":"cjnk0jz0n000s2v2p6eyy6g8u","category_id":"cjnk0jz0700082v2pgnug8cn2","_id":"cjnk0jz0s00122v2pmu1v904u"},{"post_id":"cjnk0jz0700072v2pvk4beymb","category_id":"cjnk0jz0m000q2v2pvohuzhmt","_id":"cjnk0jz0t00142v2phmgvdchy"},{"post_id":"cjnk0jz09000b2v2per3m8ftz","category_id":"cjnk0jz0q000x2v2pzi19yb9o","_id":"cjnk0jz0v00192v2p7snlye77"},{"post_id":"cjnk0jz0c000c2v2p2912owus","category_id":"cjnk0jz0m000q2v2pvohuzhmt","_id":"cjnk0jz0w001b2v2pw2i7399n"},{"post_id":"cjnk0jz0f000g2v2p6d7traai","category_id":"cjnk0jz0v00182v2p63suz92q","_id":"cjnk0jz0x001g2v2pun60l3jn"},{"post_id":"cjnk0jz0h000i2v2p40oaj9rb","category_id":"cjnk0jz0w001c2v2pc8n1wzv9","_id":"cjnk0jz0z001k2v2pn1m69c89"},{"post_id":"cjnk0jz0k000m2v2pmr90likf","category_id":"cjnk0jz0x001h2v2phu11mny6","_id":"cjnk0jz10001o2v2p4655q6wz"},{"post_id":"cjnk0jz0l000o2v2p02vmx09n","category_id":"cjnk0jz0z001l2v2pgam8wiip","_id":"cjnk0jz11001s2v2ppyl5czwh"},{"post_id":"cjnk0jz0o000u2v2pf5x04o7n","category_id":"cjnk0jz10001p2v2po6q0tp3x","_id":"cjnk0jz12001w2v2phlbd3vhw"},{"post_id":"cjnk0jz0r000z2v2pah8ep41b","category_id":"cjnk0jz11001t2v2pon8em5pj","_id":"cjnk0jz1300202v2pbz49mahx"},{"post_id":"cjnk0jz0s00112v2pw2dgc8c1","category_id":"cjnk0jz12001x2v2ptv5pqc9g","_id":"cjnk0jz1400242v2p076a3893"},{"post_id":"cjnk0jz0t00132v2p9whnrd6g","category_id":"cjnk0jz1300212v2p4gtj5kwm","_id":"cjnk0jz1400272v2p798qpzkp"}],"PostTag":[{"post_id":"cjnk0jyzx00012v2pxzmvpttf","tag_id":"cjnk0jz0300042v2p64mskenw","_id":"cjnk0jz09000a2v2p49ljsdlw"},{"post_id":"cjnk0jz0000022v2p7ycgf68m","tag_id":"cjnk0jz0800092v2pbkbwtgre","_id":"cjnk0jz0g000h2v2pfdsvqoz1"},{"post_id":"cjnk0jz0400052v2p4m21e824","tag_id":"cjnk0jz0800092v2pbkbwtgre","_id":"cjnk0jz0l000n2v2psw1qi77q"},{"post_id":"cjnk0jz0500062v2p2129wzae","tag_id":"cjnk0jz0j000l2v2puho2koto","_id":"cjnk0jz0o000t2v2ppkrcfhji"},{"post_id":"cjnk0jz0n000s2v2p6eyy6g8u","tag_id":"cjnk0jz0800092v2pbkbwtgre","_id":"cjnk0jz0q000w2v2psybz40gh"},{"post_id":"cjnk0jz0700072v2pvk4beymb","tag_id":"cjnk0jz0n000r2v2px21mq55r","_id":"cjnk0jz0s00102v2piw28ka65"},{"post_id":"cjnk0jz09000b2v2per3m8ftz","tag_id":"cjnk0jz0q000y2v2puo1m8gm7","_id":"cjnk0jz0u00172v2p31robst1"},{"post_id":"cjnk0jz0c000c2v2p2912owus","tag_id":"cjnk0jz0u00162v2p3y02l253","_id":"cjnk0jz0x001e2v2pigg4lcp1"},{"post_id":"cjnk0jz0c000c2v2p2912owus","tag_id":"cjnk0jz0n000r2v2px21mq55r","_id":"cjnk0jz0x001f2v2pkwl9frd5"},{"post_id":"cjnk0jz0f000g2v2p6d7traai","tag_id":"cjnk0jz0w001d2v2pgx156wuz","_id":"cjnk0jz0y001j2v2pbzosurip"},{"post_id":"cjnk0jz0h000i2v2p40oaj9rb","tag_id":"cjnk0jz0y001i2v2pvp00q5e7","_id":"cjnk0jz0z001n2v2pxa6r9txe"},{"post_id":"cjnk0jz0k000m2v2pmr90likf","tag_id":"cjnk0jz0z001m2v2pevn08nuq","_id":"cjnk0jz11001r2v2p5ibsbdv9"},{"post_id":"cjnk0jz0l000o2v2p02vmx09n","tag_id":"cjnk0jz10001q2v2pwflhrahk","_id":"cjnk0jz12001v2v2pgwlt9ue2"},{"post_id":"cjnk0jz0o000u2v2pf5x04o7n","tag_id":"cjnk0jz11001u2v2pzdagj520","_id":"cjnk0jz13001z2v2pqtduy2d5"},{"post_id":"cjnk0jz0r000z2v2pah8ep41b","tag_id":"cjnk0jz12001y2v2pdaoaoml5","_id":"cjnk0jz1300232v2p9221wmko"},{"post_id":"cjnk0jz0s00112v2pw2dgc8c1","tag_id":"cjnk0jz1300222v2p2s9nb5js","_id":"cjnk0jz1400262v2p1n3kkdyg"},{"post_id":"cjnk0jz0t00132v2p9whnrd6g","tag_id":"cjnk0jz1400252v2pm5vownd9","_id":"cjnk0jz1400282v2p0q81bqw6"}],"Tag":[{"name":"书单","_id":"cjnk0jz0300042v2p64mskenw"},{"name":"D3.js","_id":"cjnk0jz0800092v2pbkbwtgre"},{"name":"HTTPS","_id":"cjnk0jz0j000l2v2puho2koto"},{"name":"Hbase","_id":"cjnk0jz0n000r2v2px21mq55r"},{"name":"前端环境","_id":"cjnk0jz0q000y2v2puo1m8gm7"},{"name":"数据入库","_id":"cjnk0jz0u00162v2p3y02l253"},{"name":"webcola","_id":"cjnk0jz0w001d2v2pgx156wuz"},{"name":"webpack","_id":"cjnk0jz0y001i2v2pvp00q5e7"},{"name":"接口设计","_id":"cjnk0jz0z001m2v2pevn08nuq"},{"name":"自动化部署 博客","_id":"cjnk0jz10001q2v2pwflhrahk"},{"name":"vue","_id":"cjnk0jz11001u2v2pzdagj520"},{"name":"竞争力","_id":"cjnk0jz12001y2v2pdaoaoml5"},{"name":"Web安全","_id":"cjnk0jz1300222v2p2s9nb5js"},{"name":"异常解决","_id":"cjnk0jz1400252v2pm5vownd9"}]}}